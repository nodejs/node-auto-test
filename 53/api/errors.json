{
  "type": "module",
  "source": "doc/api/errors.md",
  "introduced_in": "v4.0.0",
  "classes": [
    {
      "textRaw": "Class: `Error`",
      "type": "class",
      "name": "Error",
      "desc": "<p>A generic JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a \"stack trace\"\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>All errors generated by Node.js, including all system and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>",
      "methods": [
        {
          "textRaw": "`Error.captureStackTrace(targetObject[, constructorOpt])`",
          "type": "method",
          "name": "captureStackTrace",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`targetObject` {Object}",
                  "name": "targetObject",
                  "type": "Object"
                },
                {
                  "textRaw": "`constructorOpt` {Function}",
                  "name": "constructorOpt",
                  "type": "Function"
                }
              ]
            }
          ],
          "desc": "<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"language-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace will be prefixed with\n<code>${myObject.name}: ${myObject.message}</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from the user. For instance:</p>\n<pre><code class=\"language-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\n</code></pre>"
        }
      ],
      "properties": [
        {
          "textRaw": "`stackTraceLimit` {number}",
          "type": "number",
          "name": "stackTraceLimit",
          "desc": "<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>"
        },
        {
          "textRaw": "`cause` {any}",
          "type": "any",
          "name": "cause",
          "meta": {
            "added": [
              "v16.9.0"
            ],
            "changes": []
          },
          "desc": "<p>If present, the <code>error.cause</code> property is the underlying cause of the <code>Error</code>.\nIt is used when catching an error and throwing a new one with a different\nmessage or code in order to still have access to the original error.</p>\n<p>The <code>error.cause</code> property is typically set by calling\n<code>new Error(message, { cause })</code>. It is not set by the constructor if the\n<code>cause</code> option is not provided.</p>\n<p>This property allows errors to be chained. When serializing <code>Error</code> objects,\n<a href=\"util.html#utilinspectobject-options\"><code>util.inspect()</code></a> recursively serializes <code>error.cause</code> if it is set.</p>\n<pre><code class=\"language-js\">const cause = new Error('The remote HTTP server responded with a 500 status');\nconst symptom = new Error('The message failed to send', { cause });\n\nconsole.log(symptom);\n// Prints:\n//   Error: The message failed to send\n//       at REPL2:1:17\n//       at Script.runInThisContext (node:vm:130:12)\n//       ... 7 lines matching cause stack trace ...\n//       at [_line] [as _line] (node:internal/readline/interface:886:18) {\n//     [cause]: Error: The remote HTTP server responded with a 500 status\n//         at REPL1:1:15\n//         at Script.runInThisContext (node:vm:130:12)\n//         at REPLServer.defaultEval (node:repl:574:29)\n//         at bound (node:domain:426:15)\n//         at REPLServer.runBound [as eval] (node:domain:437:12)\n//         at REPLServer.onLine (node:repl:902:10)\n//         at REPLServer.emit (node:events:549:35)\n//         at REPLServer.emit (node:domain:482:12)\n//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)\n//         at [_line] [as _line] (node:internal/readline/interface:886:18)\n</code></pre>"
        },
        {
          "textRaw": "`code` {string}",
          "type": "string",
          "name": "code",
          "desc": "<p>The <code>error.code</code> property is a string label that identifies the kind of error.\n<code>error.code</code> is the most stable way to identify an error. It will only change\nbetween major versions of Node.js. In contrast, <code>error.message</code> strings may\nchange between any versions of Node.js. See <a href=\"#nodejs-error-codes\">Node.js error codes</a> for details\nabout specific codes.</p>"
        },
        {
          "textRaw": "`message` {string}",
          "type": "string",
          "name": "message",
          "desc": "<p>The <code>error.message</code> property is the string description of the error as set by\ncalling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also\nappear in the first line of the stack trace of the <code>Error</code>, however changing\nthis property after the <code>Error</code> object is created <em>may not</em> change the first\nline of the stack trace (for example, when <code>error.stack</code> is read before this\nproperty is changed).</p>\n<pre><code class=\"language-js\">const err = new Error('The message');\nconsole.error(err.message);\n// Prints: The message\n</code></pre>"
        },
        {
          "textRaw": "`stack` {string}",
          "type": "string",
          "name": "stack",
          "desc": "<p>The <code>error.stack</code> property is a string describing the point in the code at which\nthe <code>Error</code> was instantiated.</p>\n<pre><code class=\"language-console\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&#x3C;anonymous> (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre>\n<p>The first line is formatted as <code>&#x3C;error class name>: &#x3C;error message></code>, and\nis followed by a series of stack frames (each line beginning with \"at \").\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>Frames are only generated for JavaScript functions. If, for example, execution\nsynchronously passes through a C++ addon function called <code>cheetahify</code> which\nitself calls a JavaScript function, the frame representing the <code>cheetahify</code> call\nwill not be present in the stack traces:</p>\n<pre><code class=\"language-js\">const cheetahify = require('./native-binding.node');\n\nfunction makeFaster() {\n  // `cheetahify()` *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error('oh no!');\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error('oh no!');\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.&#x3C;anonymous> (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\nto Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program (using CommonJS module system), or its dependencies.</li>\n<li><code>&#x3C;transport-protocol>:///url/to/module/file.mjs:line:column</code>, if the frame\nrepresents a call in a user program (using ES module system), or\nits dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>"
        }
      ],
      "signatures": [
        {
          "params": [
            {
              "textRaw": "`message` {string}",
              "name": "message",
              "type": "string"
            },
            {
              "textRaw": "`options` {Object}",
              "name": "options",
              "type": "Object",
              "options": [
                {
                  "textRaw": "`cause` {any} The error that caused the newly created error.",
                  "name": "cause",
                  "type": "any",
                  "desc": "The error that caused the newly created error."
                }
              ]
            }
          ],
          "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>String(message)</code>. If the <code>cause</code> option is provided,\nit is assigned to the <code>error.cause</code> property. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://v8.dev/docs/stack-trace-api\">V8's stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>"
        }
      ]
    },
    {
      "textRaw": "Class: `AssertionError`",
      "type": "class",
      "name": "AssertionError",
      "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates the failure of an assertion. For details, see\n<a href=\"assert.html#class-assertassertionerror\"><code>Class: assert.AssertionError</code></a>.</p>"
    },
    {
      "textRaw": "Class: `RangeError`",
      "type": "class",
      "name": "RangeError",
      "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that a provided argument was not within the set or range of\nacceptable values for a function; whether that is a numeric range, or\noutside the set of options for a given function parameter.</p>\n<pre><code class=\"language-js\">require('node:net').connect(-1);\n// Throws \"RangeError: \"port\" option should be >= 0 and &#x3C; 65536: -1\"\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>"
    },
    {
      "textRaw": "Class: `ReferenceError`",
      "type": "class",
      "name": "ReferenceError",
      "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that an attempt is being made to access a variable that is not\ndefined. Such errors commonly indicate typos in code, or an otherwise broken\nprogram.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"language-js\">doesNotExist;\n// Throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances indicate a bug in the code or its dependencies.</p>"
    },
    {
      "textRaw": "Class: `SyntaxError`",
      "type": "class",
      "name": "SyntaxError",
      "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that a program is not valid JavaScript. These errors may only be\ngenerated and propagated as a result of code evaluation. Code evaluation may\nhappen as a result of <code>eval</code>, <code>Function</code>, <code>require</code>, or <a href=\"vm.html\">vm</a>. These errors\nare almost always indicative of a broken program.</p>\n<pre><code class=\"language-js\">try {\n  require('node:vm').runInThisContext('binary ! isNotOk');\n} catch (err) {\n  // 'err' will be a SyntaxError.\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –\nthey may only be caught by other contexts.</p>"
    },
    {
      "textRaw": "Class: `SystemError`",
      "type": "class",
      "name": "SystemError",
      "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Node.js generates system errors when exceptions occur within its runtime\nenvironment. These usually occur when an application violates an operating\nsystem constraint. For example, a system error will occur if an application\nattempts to read a file that does not exist.</p>\n<ul>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If present, the address to which a network connection\nfailed</li>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The string error code</li>\n<li><code>dest</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If present, the file path destination when reporting a file\nsystem error</li>\n<li><code>errno</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The system-provided error number</li>\n<li><code>info</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> If present, extra details about the error condition</li>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A system-provided human-readable description of the error</li>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If present, the file path when reporting a file system error</li>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> If present, the network connection port that is not available</li>\n<li><code>syscall</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name of the system call that triggered the error</li>\n</ul>",
      "properties": [
        {
          "textRaw": "`address` {string}",
          "type": "string",
          "name": "address",
          "desc": "<p>If present, <code>error.address</code> is a string describing the address to which a\nnetwork connection failed.</p>"
        },
        {
          "textRaw": "`code` {string}",
          "type": "string",
          "name": "code",
          "desc": "<p>The <code>error.code</code> property is a string representing the error code.</p>"
        },
        {
          "textRaw": "`dest` {string}",
          "type": "string",
          "name": "dest",
          "desc": "<p>If present, <code>error.dest</code> is the file path destination when reporting a file\nsystem error.</p>"
        },
        {
          "textRaw": "`errno` {number}",
          "type": "number",
          "name": "errno",
          "desc": "<p>The <code>error.errno</code> property is a negative number which corresponds\nto the error code defined in <a href=\"https://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>.</p>\n<p>On Windows the error number provided by the system will be normalized by libuv.</p>\n<p>To get the string representation of the error code, use\n<a href=\"util.html#utilgetsystemerrornameerr\"><code>util.getSystemErrorName(error.errno)</code></a>.</p>"
        },
        {
          "textRaw": "`info` {Object}",
          "type": "Object",
          "name": "info",
          "desc": "<p>If present, <code>error.info</code> is an object with details about the error condition.</p>"
        },
        {
          "textRaw": "`message` {string}",
          "type": "string",
          "name": "message",
          "desc": "<p><code>error.message</code> is a system-provided human-readable description of the error.</p>"
        },
        {
          "textRaw": "`path` {string}",
          "type": "string",
          "name": "path",
          "desc": "<p>If present, <code>error.path</code> is a string containing a relevant invalid pathname.</p>"
        },
        {
          "textRaw": "`port` {number}",
          "type": "number",
          "name": "port",
          "desc": "<p>If present, <code>error.port</code> is the network connection port that is not available.</p>"
        },
        {
          "textRaw": "`syscall` {string}",
          "type": "string",
          "name": "syscall",
          "desc": "<p>The <code>error.syscall</code> property is a string describing the <a href=\"https://man7.org/linux/man-pages/man2/syscalls.2.html\">syscall</a> that failed.</p>"
        }
      ],
      "modules": [
        {
          "textRaw": "Common system errors",
          "name": "common_system_errors",
          "desc": "<p>This is a list of system errors commonly-encountered when writing a Node.js\nprogram. For a comprehensive list, see the <a href=\"https://man7.org/linux/man-pages/man3/errno.3.html\"><code>errno</code>(3) man page</a>.</p>\n<ul>\n<li>\n<p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way\nforbidden by its file access permissions.</p>\n</li>\n<li>\n<p><code>EADDRINUSE</code> (Address already in use): An attempt to bind a server\n(<a href=\"net.html\"><code>net</code></a>, <a href=\"http.html\"><code>http</code></a>, or <a href=\"https.html\"><code>https</code></a>) to a local address failed due to\nanother server on the local system already occupying that address.</p>\n</li>\n<li>\n<p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the\ntarget machine actively refused it. This usually results from trying to\nconnect to a service that is inactive on the foreign host.</p>\n</li>\n<li>\n<p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by\na peer. This normally results from a loss of the connection on the remote\nsocket due to a timeout or reboot. Commonly encountered via the <a href=\"http.html\"><code>http</code></a>\nand <a href=\"net.html\"><code>net</code></a> modules.</p>\n</li>\n<li>\n<p><code>EEXIST</code> (File exists): An existing file was the target of an operation that\nrequired that the target not exist.</p>\n</li>\n<li>\n<p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given\npathname was a directory.</p>\n</li>\n<li>\n<p><code>EMFILE</code> (Too many open files in system): Maximum number of\n<a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> allowable on the system has been reached, and\nrequests for another descriptor cannot be fulfilled until at least one\nhas been closed. This is encountered when opening many files at once in\nparallel, especially on systems (in particular, macOS) where there is a low\nfile descriptor limit for processes. To remedy a low limit, run\n<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>\n</li>\n<li>\n<p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href=\"fs.html\"><code>fs</code></a> operations\nto indicate that a component of the specified pathname does not exist. No\nentity (file or directory) could be found by the given path.</p>\n</li>\n<li>\n<p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but\nwas not a directory as expected. Commonly raised by <a href=\"fs.html#fsreaddirpath-options-callback\"><code>fs.readdir</code></a>.</p>\n</li>\n<li>\n<p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target\nof an operation that requires an empty directory, usually <a href=\"fs.html#fsunlinkpath-callback\"><code>fs.unlink</code></a>.</p>\n</li>\n<li>\n<p><code>ENOTFOUND</code> (DNS lookup failed): Indicates a DNS failure of either\n<code>EAI_NODATA</code> or <code>EAI_NONAME</code>. This is not a standard POSIX error.</p>\n</li>\n<li>\n<p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an\noperation that requires elevated privileges.</p>\n</li>\n<li>\n<p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is\nno process to read the data. Commonly encountered at the <a href=\"net.html\"><code>net</code></a> and\n<a href=\"http.html\"><code>http</code></a> layers, indicative that the remote side of the stream being\nwritten to has been closed.</p>\n</li>\n<li>\n<p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because\nthe connected party did not properly respond after a period of time. Usually\nencountered by <a href=\"http.html\"><code>http</code></a> or <a href=\"net.html\"><code>net</code></a>. Often a sign that a <code>socket.end()</code>\nwas not properly called.</p>\n</li>\n</ul>",
          "type": "module",
          "displayName": "Common system errors"
        }
      ]
    },
    {
      "textRaw": "Class: `TypeError`",
      "type": "class",
      "name": "TypeError",
      "desc": "<ul>\n<li>Extends <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that a provided argument is not an allowable type. For example,\npassing a function to a parameter which expects a string would be a <code>TypeError</code>.</p>\n<pre><code class=\"language-js\">require('node:url').parse(() => { });\n// Throws TypeError, since it expected a string.\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>"
    }
  ],
  "miscs": [
    {
      "textRaw": "Errors",
      "name": "Errors",
      "introduced_in": "v4.0.0",
      "type": "misc",
      "desc": "<p>Applications running in Node.js will generally experience four categories of\nerrors:</p>\n<ul>\n<li>Standard JavaScript errors such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\" class=\"type\">&lt;EvalError&gt;</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\" class=\"type\">&lt;SyntaxError&gt;</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\" class=\"type\">&lt;RangeError&gt;</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" class=\"type\">&lt;ReferenceError&gt;</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" class=\"type\">&lt;TypeError&gt;</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\" class=\"type\">&lt;URIError&gt;</a>.</li>\n<li>System errors triggered by underlying operating system constraints such\nas attempting to open a file that does not exist or attempting to send data\nover a closed socket.</li>\n<li>User-specified errors triggered by application code.</li>\n<li><code>AssertionError</code>s are a special class of error that can be triggered when\nNode.js detects an exceptional logic violation that should never occur. These\nare raised typically by the <code>node:assert</code> module.</li>\n</ul>\n<p>All JavaScript and system errors raised by Node.js inherit from, or are\ninstances of, the standard JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> class and are guaranteed\nto provide <em>at least</em> the properties available on that class.</p>",
      "miscs": [
        {
          "textRaw": "Error propagation and interception",
          "name": "Error propagation and interception",
          "type": "misc",
          "desc": "<p>Node.js supports several mechanisms for propagating and handling errors that\noccur while an application is running. How these errors are reported and\nhandled depends entirely on the type of <code>Error</code> and the style of the API that is\ncalled.</p>\n<p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate\nand throw an error using the standard JavaScript <code>throw</code> mechanism. These\nare handled using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try…catch</code> construct</a> provided by the\nJavaScript language.</p>\n<pre><code class=\"language-js\">// Throws with a ReferenceError because z is not defined.\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\n</code></pre>\n<p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that\n<em>must</em> be handled using <code>try…catch</code> or the Node.js process will exit\nimmediately.</p>\n<p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not\naccept a <code>callback</code> function, such as <a href=\"fs.html#fsreadfilesyncpath-options\"><code>fs.readFileSync</code></a>), will use <code>throw</code>\nto report errors.</p>\n<p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p>\n<ul>\n<li>\n<p>Most asynchronous methods that accept a <code>callback</code> function will accept an\n<code>Error</code> object passed as the first argument to that function. If that first\nargument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred\nthat should be handled.</p>\n<!-- eslint-disable no-useless-return -->\n<pre><code class=\"language-js\">const fs = require('node:fs');\nfs.readFile('a file that does not exist', (err, data) => {\n  if (err) {\n    console.error('There was an error reading the file!', err);\n    return;\n  }\n  // Otherwise handle the data\n});\n</code></pre>\n</li>\n<li>\n<p>When an asynchronous method is called on an object that is an\n<a href=\"events.html#class-eventemitter\"><code>EventEmitter</code></a>, errors can be routed to that object's <code>'error'</code> event.</p>\n<pre><code class=\"language-js\">const net = require('node:net');\nconst connection = net.connect('localhost');\n\n// Adding an 'error' event handler to a stream:\nconnection.on('error', (err) => {\n  // If the connection is reset by the server, or if it can't\n  // connect at all, or on any sort of error encountered by\n  // the connection, the error will be sent here.\n  console.error(err);\n});\n\nconnection.pipe(process.stdout);\n</code></pre>\n</li>\n<li>\n<p>A handful of typically asynchronous methods in the Node.js API may still\nuse the <code>throw</code> mechanism to raise exceptions that must be handled using\n<code>try…catch</code>. There is no comprehensive list of such methods; please\nrefer to the documentation of each method to determine the appropriate\nerror handling mechanism required.</p>\n</li>\n</ul>\n<p>The use of the <code>'error'</code> event mechanism is most common for <a href=\"stream.html\">stream-based</a>\nand <a href=\"events.html#class-eventemitter\">event emitter-based</a> APIs, which themselves represent a series of\nasynchronous operations over time (as opposed to a single operation that may\npass or fail).</p>\n<p>For <em>all</em> <a href=\"events.html#class-eventemitter\"><code>EventEmitter</code></a> objects, if an <code>'error'</code> event handler is not\nprovided, the error will be thrown, causing the Node.js process to report an\nuncaught exception and crash unless either: The <a href=\"domain.html\"><code>domain</code></a> module is\nused appropriately or a handler has been registered for the\n<a href=\"process.html#event-uncaughtexception\"><code>'uncaughtException'</code></a> event.</p>\n<pre><code class=\"language-js\">const EventEmitter = require('node:events');\nconst ee = new EventEmitter();\n\nsetImmediate(() => {\n  // This will crash the process because no 'error' event\n  // handler has been added.\n  ee.emit('error', new Error('This will crash'));\n});\n</code></pre>\n<p>Errors generated in this way <em>cannot</em> be intercepted using <code>try…catch</code> as\nthey are thrown <em>after</em> the calling code has already exited.</p>\n<p>Developers must refer to the documentation for each method to determine\nexactly how errors raised by those methods are propagated.</p>",
          "miscs": [
            {
              "textRaw": "Error-first callbacks",
              "name": "Error-first callbacks",
              "type": "misc",
              "desc": "<p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic\npattern referred to as an <em>error-first callback</em>. With this pattern, a callback\nfunction is passed to the method as an argument. When the operation either\ncompletes or an error is raised, the callback function is called with the\n<code>Error</code> object (if any) passed as the first argument. If no error was raised,\nthe first argument will be passed as <code>null</code>.</p>\n<pre><code class=\"language-js\">const fs = require('node:fs');\n\nfunction errorFirstCallback(err, data) {\n  if (err) {\n    console.error('There was an error', err);\n    return;\n  }\n  console.log(data);\n}\n\nfs.readFile('/some/file/that/does-not-exist', errorFirstCallback);\nfs.readFile('/some/file/that/does-exist', errorFirstCallback);\n</code></pre>\n<p>The JavaScript <code>try…catch</code> mechanism <strong>cannot</strong> be used to intercept errors\ngenerated by asynchronous APIs. A common mistake for beginners is to try to\nuse <code>throw</code> inside an error-first callback:</p>\n<pre><code class=\"language-js\">// THIS WILL NOT WORK:\nconst fs = require('node:fs');\n\ntry {\n  fs.readFile('/some/file/that/does-not-exist', (err, data) => {\n    // Mistaken assumption: throwing here...\n    if (err) {\n      throw err;\n    }\n  });\n} catch (err) {\n  // This will not catch the throw!\n  console.error(err);\n}\n</code></pre>\n<p>This will not work because the callback function passed to <code>fs.readFile()</code> is\ncalled asynchronously. By the time the callback has been called, the\nsurrounding code, including the <code>try…catch</code> block, will have already exited.\nThrowing an error inside the callback <strong>can crash the Node.js process</strong> in most\ncases. If <a href=\"domain.html\">domains</a> are enabled, or a handler has been registered with\n<code>process.on('uncaughtException')</code>, such errors can be intercepted.</p>"
            }
          ]
        },
        {
          "textRaw": "Exceptions vs. errors",
          "name": "Exceptions vs. errors",
          "type": "misc",
          "desc": "<p>A JavaScript exception is a value that is thrown as a result of an invalid\noperation or as the target of a <code>throw</code> statement. While it is not required\nthat these values are instances of <code>Error</code> or classes which inherit from\n<code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be\ninstances of <code>Error</code>.</p>\n<p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions\nwill <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code>\nchecks or <code>abort()</code> calls in the C++ layer.</p>"
        },
        {
          "textRaw": "OpenSSL errors",
          "name": "openssl_errors",
          "desc": "<p>Errors originating in <code>crypto</code> or <code>tls</code> are of class <code>Error</code>, and in addition to\nthe standard <code>.code</code> and <code>.message</code> properties, may have some additional\nOpenSSL-specific properties.</p>",
          "properties": [
            {
              "textRaw": "`error.opensslErrorStack`",
              "name": "opensslErrorStack",
              "desc": "<p>An array of errors that can give context to where in the OpenSSL library an\nerror originates from.</p>"
            },
            {
              "textRaw": "`error.function`",
              "name": "function",
              "desc": "<p>The OpenSSL function the error originates in.</p>"
            },
            {
              "textRaw": "`error.library`",
              "name": "library",
              "desc": "<p>The OpenSSL library the error originates in.</p>"
            },
            {
              "textRaw": "`error.reason`",
              "name": "reason",
              "desc": "<p>A human-readable string describing the reason for the error.</p>\n<p><a id=\"nodejs-error-codes\"></a></p>"
            }
          ],
          "type": "misc",
          "displayName": "OpenSSL errors"
        },
        {
          "textRaw": "Node.js error codes",
          "name": "node.js_error_codes",
          "desc": "<p><a id=\"ABORT_ERR\"></a></p>",
          "modules": [
            {
              "textRaw": "`ABORT_ERR`",
              "name": "`abort_err`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when an operation has been aborted (typically using an <code>AbortController</code>).</p>\n<p>APIs <em>not</em> using <code>AbortSignal</code>s typically do not raise an error with this code.</p>\n<p>This code does not use the regular <code>ERR_*</code> convention Node.js errors use in\norder to be compatible with the web platform's <code>AbortError</code>.</p>\n<p><a id=\"ERR_AMBIGUOUS_ARGUMENT\"></a></p>",
              "type": "module",
              "displayName": "`ABORT_ERR`"
            },
            {
              "textRaw": "`ERR_AMBIGUOUS_ARGUMENT`",
              "name": "`err_ambiguous_argument`",
              "desc": "<p>A function argument is being used in a way that suggests that the function\nsignature may be misunderstood. This is thrown by the <code>node:assert</code> module when\nthe <code>message</code> parameter in <code>assert.throws(block, message)</code> matches the error\nmessage thrown by <code>block</code> because that usage suggests that the user believes\n<code>message</code> is the expected message rather than the message the <code>AssertionError</code>\nwill display if <code>block</code> does not throw.</p>\n<p><a id=\"ERR_ARG_NOT_ITERABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_AMBIGUOUS_ARGUMENT`"
            },
            {
              "textRaw": "`ERR_ARG_NOT_ITERABLE`",
              "name": "`err_arg_not_iterable`",
              "desc": "<p>An iterable argument (i.e. a value that works with <code>for...of</code> loops) was\nrequired, but not provided to a Node.js API.</p>\n<p><a id=\"ERR_ASSERTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ARG_NOT_ITERABLE`"
            },
            {
              "textRaw": "`ERR_ASSERTION`",
              "name": "`err_assertion`",
              "desc": "<p>A special type of error that can be triggered whenever Node.js detects an\nexceptional logic violation that should never occur. These are raised typically\nby the <code>node:assert</code> module.</p>\n<p><a id=\"ERR_ASYNC_CALLBACK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ASSERTION`"
            },
            {
              "textRaw": "`ERR_ASYNC_CALLBACK`",
              "name": "`err_async_callback`",
              "desc": "<p>An attempt was made to register something that is not a function as an\n<code>AsyncHooks</code> callback.</p>\n<p><a id=\"ERR_ASYNC_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ASYNC_CALLBACK`"
            },
            {
              "textRaw": "`ERR_ASYNC_TYPE`",
              "name": "`err_async_type`",
              "desc": "<p>The type of an asynchronous resource was invalid. Users are also able\nto define their own types if using the public embedder API.</p>\n<p><a id=\"ERR_BROTLI_COMPRESSION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ASYNC_TYPE`"
            },
            {
              "textRaw": "`ERR_BROTLI_COMPRESSION_FAILED`",
              "name": "`err_brotli_compression_failed`",
              "desc": "<p>Data passed to a Brotli stream was not successfully compressed.</p>\n<p><a id=\"ERR_BROTLI_INVALID_PARAM\"></a></p>",
              "type": "module",
              "displayName": "`ERR_BROTLI_COMPRESSION_FAILED`"
            },
            {
              "textRaw": "`ERR_BROTLI_INVALID_PARAM`",
              "name": "`err_brotli_invalid_param`",
              "desc": "<p>An invalid parameter key was passed during construction of a Brotli stream.</p>\n<p><a id=\"ERR_BUFFER_CONTEXT_NOT_AVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_BROTLI_INVALID_PARAM`"
            },
            {
              "textRaw": "`ERR_BUFFER_CONTEXT_NOT_AVAILABLE`",
              "name": "`err_buffer_context_not_available`",
              "desc": "<p>An attempt was made to create a Node.js <code>Buffer</code> instance from addon or embedder\ncode, while in a JS engine Context that is not associated with a Node.js\ninstance. The data passed to the <code>Buffer</code> method will have been released\nby the time the method returns.</p>\n<p>When encountering this error, a possible alternative to creating a <code>Buffer</code>\ninstance is to create a normal <code>Uint8Array</code>, which only differs in the\nprototype of the resulting object. <code>Uint8Array</code>s are generally accepted in all\nNode.js core APIs where <code>Buffer</code>s are; they are available in all Contexts.</p>\n<p><a id=\"ERR_BUFFER_OUT_OF_BOUNDS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_BUFFER_CONTEXT_NOT_AVAILABLE`"
            },
            {
              "textRaw": "`ERR_BUFFER_OUT_OF_BOUNDS`",
              "name": "`err_buffer_out_of_bounds`",
              "desc": "<p>An operation outside the bounds of a <code>Buffer</code> was attempted.</p>\n<p><a id=\"ERR_BUFFER_TOO_LARGE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_BUFFER_OUT_OF_BOUNDS`"
            },
            {
              "textRaw": "`ERR_BUFFER_TOO_LARGE`",
              "name": "`err_buffer_too_large`",
              "desc": "<p>An attempt has been made to create a <code>Buffer</code> larger than the maximum allowed\nsize.</p>\n<p><a id=\"ERR_CANNOT_WATCH_SIGINT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_BUFFER_TOO_LARGE`"
            },
            {
              "textRaw": "`ERR_CANNOT_WATCH_SIGINT`",
              "name": "`err_cannot_watch_sigint`",
              "desc": "<p>Node.js was unable to watch for the <code>SIGINT</code> signal.</p>\n<p><a id=\"ERR_CHILD_CLOSED_BEFORE_REPLY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CANNOT_WATCH_SIGINT`"
            },
            {
              "textRaw": "`ERR_CHILD_CLOSED_BEFORE_REPLY`",
              "name": "`err_child_closed_before_reply`",
              "desc": "<p>A child process was closed before the parent received a reply.</p>\n<p><a id=\"ERR_CHILD_PROCESS_IPC_REQUIRED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CHILD_CLOSED_BEFORE_REPLY`"
            },
            {
              "textRaw": "`ERR_CHILD_PROCESS_IPC_REQUIRED`",
              "name": "`err_child_process_ipc_required`",
              "desc": "<p>Used when a child process is being forked without specifying an IPC channel.</p>\n<p><a id=\"ERR_CHILD_PROCESS_STDIO_MAXBUFFER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CHILD_PROCESS_IPC_REQUIRED`"
            },
            {
              "textRaw": "`ERR_CHILD_PROCESS_STDIO_MAXBUFFER`",
              "name": "`err_child_process_stdio_maxbuffer`",
              "desc": "<p>Used when the main process is trying to read data from the child process's\nSTDERR/STDOUT, and the data's length is longer than the <code>maxBuffer</code> option.</p>\n<p><a id=\"ERR_CLOSED_MESSAGE_PORT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CHILD_PROCESS_STDIO_MAXBUFFER`"
            },
            {
              "textRaw": "`ERR_CLOSED_MESSAGE_PORT`",
              "name": "`err_closed_message_port`",
              "desc": "<!--\nadded:\n  - v16.2.0\n  - v14.17.1\nchanges:\n  - version: 11.12.0\n    pr-url: https://github.com/nodejs/node/pull/26487\n    description: The error message was removed.\n  - version:\n      - v16.2.0\n      - v14.17.1\n    pr-url: https://github.com/nodejs/node/pull/38510\n    description: The error message was reintroduced.\n-->\n<p>There was an attempt to use a <code>MessagePort</code> instance in a closed\nstate, usually after <code>.close()</code> has been called.</p>\n<p><a id=\"ERR_CONSOLE_WRITABLE_STREAM\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CLOSED_MESSAGE_PORT`"
            },
            {
              "textRaw": "`ERR_CONSOLE_WRITABLE_STREAM`",
              "name": "`err_console_writable_stream`",
              "desc": "<p><code>Console</code> was instantiated without <code>stdout</code> stream, or <code>Console</code> has a\nnon-writable <code>stdout</code> or <code>stderr</code> stream.</p>\n<p><a id=\"ERR_CONSTRUCT_CALL_INVALID\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CONSOLE_WRITABLE_STREAM`"
            },
            {
              "textRaw": "`ERR_CONSTRUCT_CALL_INVALID`",
              "name": "`err_construct_call_invalid`",
              "desc": "<!--\nadded: v12.5.0\n-->\n<p>A class constructor was called that is not callable.</p>\n<p><a id=\"ERR_CONSTRUCT_CALL_REQUIRED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CONSTRUCT_CALL_INVALID`"
            },
            {
              "textRaw": "`ERR_CONSTRUCT_CALL_REQUIRED`",
              "name": "`err_construct_call_required`",
              "desc": "<p>A constructor for a class was called without <code>new</code>.</p>\n<p><a id=\"ERR_CONTEXT_NOT_INITIALIZED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CONSTRUCT_CALL_REQUIRED`"
            },
            {
              "textRaw": "`ERR_CONTEXT_NOT_INITIALIZED`",
              "name": "`err_context_not_initialized`",
              "desc": "<p>The vm context passed into the API is not yet initialized. This could happen\nwhen an error occurs (and is caught) during the creation of the\ncontext, for example, when the allocation fails or the maximum call stack\nsize is reached when the context is created.</p>\n<p><a id=\"ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CONTEXT_NOT_INITIALIZED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED`",
              "name": "`err_crypto_custom_engine_not_supported`",
              "desc": "<p>A client certificate engine was requested that is not supported by the version\nof OpenSSL being used.</p>\n<p><a id=\"ERR_CRYPTO_ECDH_INVALID_FORMAT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_ECDH_INVALID_FORMAT`",
              "name": "`err_crypto_ecdh_invalid_format`",
              "desc": "<p>An invalid value for the <code>format</code> argument was passed to the <code>crypto.ECDH()</code>\nclass <code>getPublicKey()</code> method.</p>\n<p><a id=\"ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_ECDH_INVALID_FORMAT`"
            },
            {
              "textRaw": "`ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY`",
              "name": "`err_crypto_ecdh_invalid_public_key`",
              "desc": "<p>An invalid value for the <code>key</code> argument has been passed to the\n<code>crypto.ECDH()</code> class <code>computeSecret()</code> method. It means that the public\nkey lies outside of the elliptic curve.</p>\n<p><a id=\"ERR_CRYPTO_ENGINE_UNKNOWN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY`"
            },
            {
              "textRaw": "`ERR_CRYPTO_ENGINE_UNKNOWN`",
              "name": "`err_crypto_engine_unknown`",
              "desc": "<p>An invalid crypto engine identifier was passed to\n<a href=\"crypto.html#cryptosetengineengine-flags\"><code>require('node:crypto').setEngine()</code></a>.</p>\n<p><a id=\"ERR_CRYPTO_FIPS_FORCED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_ENGINE_UNKNOWN`"
            },
            {
              "textRaw": "`ERR_CRYPTO_FIPS_FORCED`",
              "name": "`err_crypto_fips_forced`",
              "desc": "<p>The <a href=\"cli.html#--force-fips\"><code>--force-fips</code></a> command-line argument was used but there was an attempt\nto enable or disable FIPS mode in the <code>node:crypto</code> module.</p>\n<p><a id=\"ERR_CRYPTO_FIPS_UNAVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_FIPS_FORCED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_FIPS_UNAVAILABLE`",
              "name": "`err_crypto_fips_unavailable`",
              "desc": "<p>An attempt was made to enable or disable FIPS mode, but FIPS mode was not\navailable.</p>\n<p><a id=\"ERR_CRYPTO_HASH_FINALIZED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_FIPS_UNAVAILABLE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_HASH_FINALIZED`",
              "name": "`err_crypto_hash_finalized`",
              "desc": "<p><a href=\"crypto.html#hashdigestencoding\"><code>hash.digest()</code></a> was called multiple times. The <code>hash.digest()</code> method must\nbe called no more than one time per instance of a <code>Hash</code> object.</p>\n<p><a id=\"ERR_CRYPTO_HASH_UPDATE_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_HASH_FINALIZED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_HASH_UPDATE_FAILED`",
              "name": "`err_crypto_hash_update_failed`",
              "desc": "<p><a href=\"crypto.html#hashupdatedata-inputencoding\"><code>hash.update()</code></a> failed for any reason. This should rarely, if ever, happen.</p>\n<p><a id=\"ERR_CRYPTO_INCOMPATIBLE_KEY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_HASH_UPDATE_FAILED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INCOMPATIBLE_KEY`",
              "name": "`err_crypto_incompatible_key`",
              "desc": "<p>The given crypto keys are incompatible with the attempted operation.</p>\n<p><a id=\"ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INCOMPATIBLE_KEY`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS`",
              "name": "`err_crypto_incompatible_key_options`",
              "desc": "<p>The selected public or private key encoding is incompatible with other options.</p>\n<p><a id=\"ERR_CRYPTO_INITIALIZATION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INITIALIZATION_FAILED`",
              "name": "`err_crypto_initialization_failed`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Initialization of the crypto subsystem failed.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_AUTH_TAG\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INITIALIZATION_FAILED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_AUTH_TAG`",
              "name": "`err_crypto_invalid_auth_tag`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid authentication tag was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_COUNTER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_AUTH_TAG`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_COUNTER`",
              "name": "`err_crypto_invalid_counter`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid counter was provided for a counter-mode cipher.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_CURVE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_COUNTER`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_CURVE`",
              "name": "`err_crypto_invalid_curve`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid elliptic-curve was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_DIGEST\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_CURVE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_DIGEST`",
              "name": "`err_crypto_invalid_digest`",
              "desc": "<p>An invalid <a href=\"crypto.html#cryptogethashes\">crypto digest algorithm</a> was specified.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_IV\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_DIGEST`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_IV`",
              "name": "`err_crypto_invalid_iv`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid initialization vector was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_JWK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_IV`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_JWK`",
              "name": "`err_crypto_invalid_jwk`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid JSON Web Key was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_JWK`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE`",
              "name": "`err_crypto_invalid_key_object_type`",
              "desc": "<p>The given crypto key object's type is invalid for the attempted operation.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_KEYLEN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_KEYLEN`",
              "name": "`err_crypto_invalid_keylen`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid key length was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_KEYPAIR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_KEYLEN`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_KEYPAIR`",
              "name": "`err_crypto_invalid_keypair`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid key pair was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_KEYTYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_KEYPAIR`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_KEYTYPE`",
              "name": "`err_crypto_invalid_keytype`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid key type was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_MESSAGELEN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_KEYTYPE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_MESSAGELEN`",
              "name": "`err_crypto_invalid_messagelen`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid message length was provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_SCRYPT_PARAMS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_MESSAGELEN`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_SCRYPT_PARAMS`",
              "name": "`err_crypto_invalid_scrypt_params`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Invalid scrypt algorithm parameters were provided.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_STATE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_SCRYPT_PARAMS`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_STATE`",
              "name": "`err_crypto_invalid_state`",
              "desc": "<p>A crypto method was used on an object that was in an invalid state. For\ninstance, calling <a href=\"crypto.html#ciphergetauthtag\"><code>cipher.getAuthTag()</code></a> before calling <code>cipher.final()</code>.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_TAG_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_STATE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_INVALID_TAG_LENGTH`",
              "name": "`err_crypto_invalid_tag_length`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid authentication tag length was provided.</p>\n<p><a id=\"ERR_CRYPTO_JOB_INIT_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_INVALID_TAG_LENGTH`"
            },
            {
              "textRaw": "`ERR_CRYPTO_JOB_INIT_FAILED`",
              "name": "`err_crypto_job_init_failed`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Initialization of an asynchronous crypto operation failed.</p>\n<p><a id=\"ERR_CRYPTO_JWK_UNSUPPORTED_CURVE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_JOB_INIT_FAILED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_JWK_UNSUPPORTED_CURVE`",
              "name": "`err_crypto_jwk_unsupported_curve`",
              "desc": "<p>Key's Elliptic Curve is not registered for use in the\n<a href=\"https://www.iana.org/assignments/jose/jose.xhtml#web-key-elliptic-curve\">JSON Web Key Elliptic Curve Registry</a>.</p>\n<p><a id=\"ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_JWK_UNSUPPORTED_CURVE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE`",
              "name": "`err_crypto_jwk_unsupported_key_type`",
              "desc": "<p>Key's Asymmetric Key Type is not registered for use in the\n<a href=\"https://www.iana.org/assignments/jose/jose.xhtml#web-key-types\">JSON Web Key Types Registry</a>.</p>\n<p><a id=\"ERR_CRYPTO_OPERATION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE`"
            },
            {
              "textRaw": "`ERR_CRYPTO_OPERATION_FAILED`",
              "name": "`err_crypto_operation_failed`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A crypto operation failed for an otherwise unspecified reason.</p>\n<p><a id=\"ERR_CRYPTO_PBKDF2_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_OPERATION_FAILED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_PBKDF2_ERROR`",
              "name": "`err_crypto_pbkdf2_error`",
              "desc": "<p>The PBKDF2 algorithm failed for unspecified reasons. OpenSSL does not provide\nmore details and therefore neither does Node.js.</p>\n<p><a id=\"ERR_CRYPTO_SCRYPT_INVALID_PARAMETER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_PBKDF2_ERROR`"
            },
            {
              "textRaw": "`ERR_CRYPTO_SCRYPT_INVALID_PARAMETER`",
              "name": "`err_crypto_scrypt_invalid_parameter`",
              "desc": "<p>One or more <a href=\"crypto.html#cryptoscryptpassword-salt-keylen-options-callback\"><code>crypto.scrypt()</code></a> or <a href=\"crypto.html#cryptoscryptsyncpassword-salt-keylen-options\"><code>crypto.scryptSync()</code></a> parameters are\noutside their legal range.</p>\n<p><a id=\"ERR_CRYPTO_SCRYPT_NOT_SUPPORTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_SCRYPT_INVALID_PARAMETER`"
            },
            {
              "textRaw": "`ERR_CRYPTO_SCRYPT_NOT_SUPPORTED`",
              "name": "`err_crypto_scrypt_not_supported`",
              "desc": "<p>Node.js was compiled without <code>scrypt</code> support. Not possible with the official\nrelease binaries but can happen with custom builds, including distro builds.</p>\n<p><a id=\"ERR_CRYPTO_SIGN_KEY_REQUIRED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_SCRYPT_NOT_SUPPORTED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_SIGN_KEY_REQUIRED`",
              "name": "`err_crypto_sign_key_required`",
              "desc": "<p>A signing <code>key</code> was not provided to the <a href=\"crypto.html#signsignprivatekey-outputencoding\"><code>sign.sign()</code></a> method.</p>\n<p><a id=\"ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_SIGN_KEY_REQUIRED`"
            },
            {
              "textRaw": "`ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH`",
              "name": "`err_crypto_timing_safe_equal_length`",
              "desc": "<p><a href=\"crypto.html#cryptotimingsafeequala-b\"><code>crypto.timingSafeEqual()</code></a> was called with <code>Buffer</code>, <code>TypedArray</code>, or\n<code>DataView</code> arguments of different lengths.</p>\n<p><a id=\"ERR_CRYPTO_UNKNOWN_CIPHER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH`"
            },
            {
              "textRaw": "`ERR_CRYPTO_UNKNOWN_CIPHER`",
              "name": "`err_crypto_unknown_cipher`",
              "desc": "<p>An unknown cipher was specified.</p>\n<p><a id=\"ERR_CRYPTO_UNKNOWN_DH_GROUP\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_UNKNOWN_CIPHER`"
            },
            {
              "textRaw": "`ERR_CRYPTO_UNKNOWN_DH_GROUP`",
              "name": "`err_crypto_unknown_dh_group`",
              "desc": "<p>An unknown Diffie-Hellman group name was given. See\n<a href=\"crypto.html#cryptogetdiffiehellmangroupname\"><code>crypto.getDiffieHellman()</code></a> for a list of valid group names.</p>\n<p><a id=\"ERR_CRYPTO_UNSUPPORTED_OPERATION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_UNKNOWN_DH_GROUP`"
            },
            {
              "textRaw": "`ERR_CRYPTO_UNSUPPORTED_OPERATION`",
              "name": "`err_crypto_unsupported_operation`",
              "meta": {
                "added": [
                  "v15.0.0",
                  "v14.18.0"
                ],
                "changes": []
              },
              "desc": "<p>An attempt to invoke an unsupported crypto operation was made.</p>\n<p><a id=\"ERR_DEBUGGER_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_UNSUPPORTED_OPERATION`"
            },
            {
              "textRaw": "`ERR_DEBUGGER_ERROR`",
              "name": "`err_debugger_error`",
              "meta": {
                "added": [
                  "v16.4.0",
                  "v14.17.4"
                ],
                "changes": []
              },
              "desc": "<p>An error occurred with the <a href=\"debugger.html\">debugger</a>.</p>\n<p><a id=\"ERR_DEBUGGER_STARTUP_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DEBUGGER_ERROR`"
            },
            {
              "textRaw": "`ERR_DEBUGGER_STARTUP_ERROR`",
              "name": "`err_debugger_startup_error`",
              "meta": {
                "added": [
                  "v16.4.0",
                  "v14.17.4"
                ],
                "changes": []
              },
              "desc": "<p>The <a href=\"debugger.html\">debugger</a> timed out waiting for the required host/port to be free.</p>\n<p><a id=\"ERR_DLOPEN_DISABLED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DEBUGGER_STARTUP_ERROR`"
            },
            {
              "textRaw": "`ERR_DLOPEN_DISABLED`",
              "name": "`err_dlopen_disabled`",
              "meta": {
                "added": [
                  "v16.10.0",
                  "v14.19.0"
                ],
                "changes": []
              },
              "desc": "<p>Loading native addons has been disabled using <a href=\"cli.html#--no-addons\"><code>--no-addons</code></a>.</p>\n<p><a id=\"ERR_DLOPEN_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DLOPEN_DISABLED`"
            },
            {
              "textRaw": "`ERR_DLOPEN_FAILED`",
              "name": "`err_dlopen_failed`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A call to <code>process.dlopen()</code> failed.</p>\n<p><a id=\"ERR_DIR_CLOSED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DLOPEN_FAILED`"
            },
            {
              "textRaw": "`ERR_DIR_CLOSED`",
              "name": "`err_dir_closed`",
              "desc": "<p>The <a href=\"fs.html#class-fsdir\"><code>fs.Dir</code></a> was previously closed.</p>\n<p><a id=\"ERR_DIR_CONCURRENT_OPERATION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DIR_CLOSED`"
            },
            {
              "textRaw": "`ERR_DIR_CONCURRENT_OPERATION`",
              "name": "`err_dir_concurrent_operation`",
              "meta": {
                "added": [
                  "v14.3.0"
                ],
                "changes": []
              },
              "desc": "<p>A synchronous read or close call was attempted on an <a href=\"fs.html#class-fsdir\"><code>fs.Dir</code></a> which has\nongoing asynchronous operations.</p>\n<p><a id=\"ERR_DNS_SET_SERVERS_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DIR_CONCURRENT_OPERATION`"
            },
            {
              "textRaw": "`ERR_DNS_SET_SERVERS_FAILED`",
              "name": "`err_dns_set_servers_failed`",
              "desc": "<p><code>c-ares</code> failed to set the DNS server.</p>\n<p><a id=\"ERR_DOMAIN_CALLBACK_NOT_AVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DNS_SET_SERVERS_FAILED`"
            },
            {
              "textRaw": "`ERR_DOMAIN_CALLBACK_NOT_AVAILABLE`",
              "name": "`err_domain_callback_not_available`",
              "desc": "<p>The <code>node:domain</code> module was not usable since it could not establish the\nrequired error handling hooks, because\n<a href=\"process.html#processsetuncaughtexceptioncapturecallbackfn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> had been called at an\nearlier point in time.</p>\n<p><a id=\"ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DOMAIN_CALLBACK_NOT_AVAILABLE`"
            },
            {
              "textRaw": "`ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE`",
              "name": "`err_domain_cannot_set_uncaught_exception_capture`",
              "desc": "<p><a href=\"process.html#processsetuncaughtexceptioncapturecallbackfn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> could not be called\nbecause the <code>node:domain</code> module has been loaded at an earlier point in time.</p>\n<p>The stack trace is extended to include the point in time at which the\n<code>node:domain</code> module had been loaded.</p>\n<p><a id=\"ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE`"
            },
            {
              "textRaw": "`ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION`",
              "name": "`err_duplicate_startup_snapshot_main_function`",
              "desc": "<p><a href=\"v8.html#v8startupsnapshotsetdeserializemainfunctioncallback-data\"><code>v8.startupSnapshot.setDeserializeMainFunction()</code></a> could not be called\nbecause it had already been called before.</p>\n<p><a id=\"ERR_ENCODING_INVALID_ENCODED_DATA\"></a></p>",
              "type": "module",
              "displayName": "`ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION`"
            },
            {
              "textRaw": "`ERR_ENCODING_INVALID_ENCODED_DATA`",
              "name": "`err_encoding_invalid_encoded_data`",
              "desc": "<p>Data provided to <code>TextDecoder()</code> API was invalid according to the encoding\nprovided.</p>\n<p><a id=\"ERR_ENCODING_NOT_SUPPORTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ENCODING_INVALID_ENCODED_DATA`"
            },
            {
              "textRaw": "`ERR_ENCODING_NOT_SUPPORTED`",
              "name": "`err_encoding_not_supported`",
              "desc": "<p>Encoding provided to <code>TextDecoder()</code> API was not one of the\n<a href=\"util.html#whatwg-supported-encodings\">WHATWG Supported Encodings</a>.</p>\n<p><a id=\"ERR_EVAL_ESM_CANNOT_PRINT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ENCODING_NOT_SUPPORTED`"
            },
            {
              "textRaw": "`ERR_EVAL_ESM_CANNOT_PRINT`",
              "name": "`err_eval_esm_cannot_print`",
              "desc": "<p><code>--print</code> cannot be used with ESM input.</p>\n<p><a id=\"ERR_EVENT_RECURSION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_EVAL_ESM_CANNOT_PRINT`"
            },
            {
              "textRaw": "`ERR_EVENT_RECURSION`",
              "name": "`err_event_recursion`",
              "desc": "<p>Thrown when an attempt is made to recursively dispatch an event on <code>EventTarget</code>.</p>\n<p><a id=\"ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_EVENT_RECURSION`"
            },
            {
              "textRaw": "`ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE`",
              "name": "`err_execution_environment_not_available`",
              "desc": "<p>The JS execution context is not associated with a Node.js environment.\nThis may occur when Node.js is used as an embedded library and some hooks\nfor the JS engine are not set up properly.</p>\n<p><a id=\"ERR_FALSY_VALUE_REJECTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE`"
            },
            {
              "textRaw": "`ERR_FALSY_VALUE_REJECTION`",
              "name": "`err_falsy_value_rejection`",
              "desc": "<p>A <code>Promise</code> that was callbackified via <code>util.callbackify()</code> was rejected with a\nfalsy value.</p>\n<p><a id=\"ERR_FEATURE_UNAVAILABLE_ON_PLATFORM\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FALSY_VALUE_REJECTION`"
            },
            {
              "textRaw": "`ERR_FEATURE_UNAVAILABLE_ON_PLATFORM`",
              "name": "`err_feature_unavailable_on_platform`",
              "meta": {
                "added": [
                  "v14.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when a feature that is not available\nto the current platform which is running Node.js is used.</p>\n<p><a id=\"ERR_FS_CP_DIR_TO_NON_DIR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FEATURE_UNAVAILABLE_ON_PLATFORM`"
            },
            {
              "textRaw": "`ERR_FS_CP_DIR_TO_NON_DIR`",
              "name": "`err_fs_cp_dir_to_non_dir`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>An attempt was made to copy a directory to a non-directory (file, symlink,\netc.) using <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>.</p>\n<p><a id=\"ERR_FS_CP_EEXIST\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_DIR_TO_NON_DIR`"
            },
            {
              "textRaw": "`ERR_FS_CP_EEXIST`",
              "name": "`err_fs_cp_eexist`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>An attempt was made to copy over a file that already existed with\n<a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>, with the <code>force</code> and <code>errorOnExist</code> set to <code>true</code>.</p>\n<p><a id=\"ERR_FS_CP_EINVAL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_EEXIST`"
            },
            {
              "textRaw": "`ERR_FS_CP_EINVAL`",
              "name": "`err_fs_cp_einval`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>When using <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>, <code>src</code> or <code>dest</code> pointed to an invalid path.</p>\n<p><a id=\"ERR_FS_CP_FIFO_PIPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_EINVAL`"
            },
            {
              "textRaw": "`ERR_HTTP_CONTENT_LENGTH_MISMATCH`",
              "name": "`err_http_content_length_mismatch`",
              "desc": "<p>Response body size doesn't match with the specified content-length header value.</p>\n<p><a id=\"ERR_HTTP_CONTENT_LENGTH_MISMATCH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_CONTENT_LENGTH_MISMATCH`"
            },
            {
              "textRaw": "`ERR_FS_CP_FIFO_PIPE`",
              "name": "`err_fs_cp_fifo_pipe`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>An attempt was made to copy a named pipe with <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>.</p>\n<p><a id=\"ERR_FS_CP_NON_DIR_TO_DIR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_FIFO_PIPE`"
            },
            {
              "textRaw": "`ERR_FS_CP_NON_DIR_TO_DIR`",
              "name": "`err_fs_cp_non_dir_to_dir`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>An attempt was made to copy a non-directory (file, symlink, etc.) to a directory\nusing <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>.</p>\n<p><a id=\"ERR_FS_CP_SOCKET\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_NON_DIR_TO_DIR`"
            },
            {
              "textRaw": "`ERR_FS_CP_SOCKET`",
              "name": "`err_fs_cp_socket`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>An attempt was made to copy to a socket with <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>.</p>\n<p><a id=\"ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_SOCKET`"
            },
            {
              "textRaw": "`ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY`",
              "name": "`err_fs_cp_symlink_to_subdirectory`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>When using <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>, a symlink in <code>dest</code> pointed to a subdirectory\nof <code>src</code>.</p>\n<p><a id=\"ERR_FS_CP_UNKNOWN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY`"
            },
            {
              "textRaw": "`ERR_FS_CP_UNKNOWN`",
              "name": "`err_fs_cp_unknown`",
              "desc": "<!--\nadded: v16.7.0\n-->\n<p>An attempt was made to copy to an unknown file type with <a href=\"fs.html#fscpsrc-dest-options-callback\"><code>fs.cp()</code></a>.</p>\n<p><a id=\"ERR_FS_EISDIR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_CP_UNKNOWN`"
            },
            {
              "textRaw": "`ERR_FS_EISDIR`",
              "name": "`err_fs_eisdir`",
              "desc": "<p>Path is a directory.</p>\n<p><a id=\"ERR_FS_FILE_TOO_LARGE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_EISDIR`"
            },
            {
              "textRaw": "`ERR_FS_FILE_TOO_LARGE`",
              "name": "`err_fs_file_too_large`",
              "desc": "<p>An attempt has been made to read a file whose size is larger than the maximum\nallowed size for a <code>Buffer</code>.</p>\n<p><a id=\"ERR_FS_INVALID_SYMLINK_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_FILE_TOO_LARGE`"
            },
            {
              "textRaw": "`ERR_FS_INVALID_SYMLINK_TYPE`",
              "name": "`err_fs_invalid_symlink_type`",
              "desc": "<p>An invalid symlink type was passed to the <a href=\"fs.html#fssymlinktarget-path-type-callback\"><code>fs.symlink()</code></a> or\n<a href=\"fs.html#fssymlinksynctarget-path-type\"><code>fs.symlinkSync()</code></a> methods.</p>\n<p><a id=\"ERR_HTTP_HEADERS_SENT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_FS_INVALID_SYMLINK_TYPE`"
            },
            {
              "textRaw": "`ERR_HTTP_HEADERS_SENT`",
              "name": "`err_http_headers_sent`",
              "desc": "<p>An attempt was made to add more headers after the headers had already been sent.</p>\n<p><a id=\"ERR_HTTP_INVALID_HEADER_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_HEADERS_SENT`"
            },
            {
              "textRaw": "`ERR_HTTP_INVALID_HEADER_VALUE`",
              "name": "`err_http_invalid_header_value`",
              "desc": "<p>An invalid HTTP header value was specified.</p>\n<p><a id=\"ERR_HTTP_INVALID_STATUS_CODE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_INVALID_HEADER_VALUE`"
            },
            {
              "textRaw": "`ERR_HTTP_INVALID_STATUS_CODE`",
              "name": "`err_http_invalid_status_code`",
              "desc": "<p>Status code was outside the regular status code range (100-999).</p>\n<p><a id=\"ERR_HTTP_REQUEST_TIMEOUT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_INVALID_STATUS_CODE`"
            },
            {
              "textRaw": "`ERR_HTTP_REQUEST_TIMEOUT`",
              "name": "`err_http_request_timeout`",
              "desc": "<p>The client has not sent the entire request within the allowed time.</p>\n<p><a id=\"ERR_HTTP_SOCKET_ENCODING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_REQUEST_TIMEOUT`"
            },
            {
              "textRaw": "`ERR_HTTP_SOCKET_ENCODING`",
              "name": "`err_http_socket_encoding`",
              "desc": "<p>Changing the socket encoding is not allowed per <a href=\"https://tools.ietf.org/html/rfc7230#section-3\">RFC 7230 Section 3</a>.</p>\n<p><a id=\"ERR_HTTP_TRAILER_INVALID\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_SOCKET_ENCODING`"
            },
            {
              "textRaw": "`ERR_HTTP_TRAILER_INVALID`",
              "name": "`err_http_trailer_invalid`",
              "desc": "<p>The <code>Trailer</code> header was set even though the transfer encoding does not support\nthat.</p>\n<p><a id=\"ERR_HTTP2_ALTSVC_INVALID_ORIGIN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_TRAILER_INVALID`"
            },
            {
              "textRaw": "`ERR_HTTP2_ALTSVC_INVALID_ORIGIN`",
              "name": "`err_http2_altsvc_invalid_origin`",
              "desc": "<p>HTTP/2 ALTSVC frames require a valid origin.</p>\n<p><a id=\"ERR_HTTP2_ALTSVC_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_ALTSVC_INVALID_ORIGIN`"
            },
            {
              "textRaw": "`ERR_HTTP2_ALTSVC_LENGTH`",
              "name": "`err_http2_altsvc_length`",
              "desc": "<p>HTTP/2 ALTSVC frames are limited to a maximum of 16,382 payload bytes.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_AUTHORITY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_ALTSVC_LENGTH`"
            },
            {
              "textRaw": "`ERR_HTTP2_CONNECT_AUTHORITY`",
              "name": "`err_http2_connect_authority`",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:authority</code> pseudo-header\nis required.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_PATH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_CONNECT_AUTHORITY`"
            },
            {
              "textRaw": "`ERR_HTTP2_CONNECT_PATH`",
              "name": "`err_http2_connect_path`",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:path</code> pseudo-header is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_SCHEME\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_CONNECT_PATH`"
            },
            {
              "textRaw": "`ERR_HTTP2_CONNECT_SCHEME`",
              "name": "`err_http2_connect_scheme`",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:scheme</code> pseudo-header is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_CONNECT_SCHEME`"
            },
            {
              "textRaw": "`ERR_HTTP2_ERROR`",
              "name": "`err_http2_error`",
              "desc": "<p>A non-specific HTTP/2 error has occurred.</p>\n<p><a id=\"ERR_HTTP2_GOAWAY_SESSION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_ERROR`"
            },
            {
              "textRaw": "`ERR_HTTP2_GOAWAY_SESSION`",
              "name": "`err_http2_goaway_session`",
              "desc": "<p>New HTTP/2 Streams may not be opened after the <code>Http2Session</code> has received a\n<code>GOAWAY</code> frame from the connected peer.</p>\n<p><a id=\"ERR_HTTP2_HEADER_SINGLE_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_GOAWAY_SESSION`"
            },
            {
              "textRaw": "`ERR_HTTP2_HEADER_SINGLE_VALUE`",
              "name": "`err_http2_header_single_value`",
              "desc": "<p>Multiple values were provided for an HTTP/2 header field that was required to\nhave only a single value.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_AFTER_RESPOND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_HEADER_SINGLE_VALUE`"
            },
            {
              "textRaw": "`ERR_HTTP2_HEADERS_AFTER_RESPOND`",
              "name": "`err_http2_headers_after_respond`",
              "desc": "<p>An additional headers was specified after an HTTP/2 response was initiated.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_SENT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_HEADERS_AFTER_RESPOND`"
            },
            {
              "textRaw": "`ERR_HTTP2_HEADERS_SENT`",
              "name": "`err_http2_headers_sent`",
              "desc": "<p>An attempt was made to send multiple response headers.</p>\n<p><a id=\"ERR_HTTP2_INFO_STATUS_NOT_ALLOWED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_HEADERS_SENT`"
            },
            {
              "textRaw": "`ERR_HTTP2_INFO_STATUS_NOT_ALLOWED`",
              "name": "`err_http2_info_status_not_allowed`",
              "desc": "<p>Informational HTTP status codes (<code>1xx</code>) may not be set as the response status\ncode on HTTP/2 responses.</p>\n<p><a id=\"ERR_HTTP2_INVALID_CONNECTION_HEADERS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INFO_STATUS_NOT_ALLOWED`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_CONNECTION_HEADERS`",
              "name": "`err_http2_invalid_connection_headers`",
              "desc": "<p>HTTP/1 connection specific headers are forbidden to be used in HTTP/2\nrequests and responses.</p>\n<p><a id=\"ERR_HTTP2_INVALID_HEADER_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_CONNECTION_HEADERS`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_HEADER_VALUE`",
              "name": "`err_http2_invalid_header_value`",
              "desc": "<p>An invalid HTTP/2 header value was specified.</p>\n<p><a id=\"ERR_HTTP2_INVALID_INFO_STATUS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_HEADER_VALUE`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_INFO_STATUS`",
              "name": "`err_http2_invalid_info_status`",
              "desc": "<p>An invalid HTTP informational status code has been specified. Informational\nstatus codes must be an integer between <code>100</code> and <code>199</code> (inclusive).</p>\n<p><a id=\"ERR_HTTP2_INVALID_ORIGIN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_INFO_STATUS`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_ORIGIN`",
              "name": "`err_http2_invalid_origin`",
              "desc": "<p>HTTP/2 <code>ORIGIN</code> frames require a valid origin.</p>\n<p><a id=\"ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_ORIGIN`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH`",
              "name": "`err_http2_invalid_packed_settings_length`",
              "desc": "<p>Input <code>Buffer</code> and <code>Uint8Array</code> instances passed to the\n<code>http2.getUnpackedSettings()</code> API must have a length that is a multiple of\nsix.</p>\n<p><a id=\"ERR_HTTP2_INVALID_PSEUDOHEADER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_PSEUDOHEADER`",
              "name": "`err_http2_invalid_pseudoheader`",
              "desc": "<p>Only valid HTTP/2 pseudoheaders (<code>:status</code>, <code>:path</code>, <code>:authority</code>, <code>:scheme</code>,\nand <code>:method</code>) may be used.</p>\n<p><a id=\"ERR_HTTP2_INVALID_SESSION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_PSEUDOHEADER`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_SESSION`",
              "name": "`err_http2_invalid_session`",
              "desc": "<p>An action was performed on an <code>Http2Session</code> object that had already been\ndestroyed.</p>\n<p><a id=\"ERR_HTTP2_INVALID_SETTING_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_SESSION`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_SETTING_VALUE`",
              "name": "`err_http2_invalid_setting_value`",
              "desc": "<p>An invalid value has been specified for an HTTP/2 setting.</p>\n<p><a id=\"ERR_HTTP2_INVALID_STREAM\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_SETTING_VALUE`"
            },
            {
              "textRaw": "`ERR_HTTP2_INVALID_STREAM`",
              "name": "`err_http2_invalid_stream`",
              "desc": "<p>An operation was performed on a stream that had already been destroyed.</p>\n<p><a id=\"ERR_HTTP2_MAX_PENDING_SETTINGS_ACK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INVALID_STREAM`"
            },
            {
              "textRaw": "`ERR_HTTP2_MAX_PENDING_SETTINGS_ACK`",
              "name": "`err_http2_max_pending_settings_ack`",
              "desc": "<p>Whenever an HTTP/2 <code>SETTINGS</code> frame is sent to a connected peer, the peer is\nrequired to send an acknowledgment that it has received and applied the new\n<code>SETTINGS</code>. By default, a maximum number of unacknowledged <code>SETTINGS</code> frames may\nbe sent at any given time. This error code is used when that limit has been\nreached.</p>\n<p><a id=\"ERR_HTTP2_NESTED_PUSH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_MAX_PENDING_SETTINGS_ACK`"
            },
            {
              "textRaw": "`ERR_HTTP2_NESTED_PUSH`",
              "name": "`err_http2_nested_push`",
              "desc": "<p>An attempt was made to initiate a new push stream from within a push stream.\nNested push streams are not permitted.</p>\n<p><a id=\"ERR_HTTP2_NO_MEM\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_NESTED_PUSH`"
            },
            {
              "textRaw": "`ERR_HTTP2_NO_MEM`",
              "name": "`err_http2_no_mem`",
              "desc": "<p>Out of memory when using the <code>http2session.setLocalWindowSize(windowSize)</code> API.</p>\n<p><a id=\"ERR_HTTP2_NO_SOCKET_MANIPULATION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_NO_MEM`"
            },
            {
              "textRaw": "`ERR_HTTP2_NO_SOCKET_MANIPULATION`",
              "name": "`err_http2_no_socket_manipulation`",
              "desc": "<p>An attempt was made to directly manipulate (read, write, pause, resume, etc.) a\nsocket attached to an <code>Http2Session</code>.</p>\n<p><a id=\"ERR_HTTP2_ORIGIN_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_NO_SOCKET_MANIPULATION`"
            },
            {
              "textRaw": "`ERR_HTTP2_ORIGIN_LENGTH`",
              "name": "`err_http2_origin_length`",
              "desc": "<p>HTTP/2 <code>ORIGIN</code> frames are limited to a length of 16382 bytes.</p>\n<p><a id=\"ERR_HTTP2_OUT_OF_STREAMS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_ORIGIN_LENGTH`"
            },
            {
              "textRaw": "`ERR_HTTP2_OUT_OF_STREAMS`",
              "name": "`err_http2_out_of_streams`",
              "desc": "<p>The number of streams created on a single HTTP/2 session reached the maximum\nlimit.</p>\n<p><a id=\"ERR_HTTP2_PAYLOAD_FORBIDDEN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_OUT_OF_STREAMS`"
            },
            {
              "textRaw": "`ERR_HTTP2_PAYLOAD_FORBIDDEN`",
              "name": "`err_http2_payload_forbidden`",
              "desc": "<p>A message payload was specified for an HTTP response code for which a payload is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_PING_CANCEL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_PAYLOAD_FORBIDDEN`"
            },
            {
              "textRaw": "`ERR_HTTP2_PING_CANCEL`",
              "name": "`err_http2_ping_cancel`",
              "desc": "<p>An HTTP/2 ping was canceled.</p>\n<p><a id=\"ERR_HTTP2_PING_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_PING_CANCEL`"
            },
            {
              "textRaw": "`ERR_HTTP2_PING_LENGTH`",
              "name": "`err_http2_ping_length`",
              "desc": "<p>HTTP/2 ping payloads must be exactly 8 bytes in length.</p>\n<p><a id=\"ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_PING_LENGTH`"
            },
            {
              "textRaw": "`ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED`",
              "name": "`err_http2_pseudoheader_not_allowed`",
              "desc": "<p>An HTTP/2 pseudo-header has been used inappropriately. Pseudo-headers are header\nkey names that begin with the <code>:</code> prefix.</p>\n<p><a id=\"ERR_HTTP2_PUSH_DISABLED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED`"
            },
            {
              "textRaw": "`ERR_HTTP2_PUSH_DISABLED`",
              "name": "`err_http2_push_disabled`",
              "desc": "<p>An attempt was made to create a push stream, which had been disabled by the\nclient.</p>\n<p><a id=\"ERR_HTTP2_SEND_FILE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_PUSH_DISABLED`"
            },
            {
              "textRaw": "`ERR_HTTP2_SEND_FILE`",
              "name": "`err_http2_send_file`",
              "desc": "<p>An attempt was made to use the <code>Http2Stream.prototype.responseWithFile()</code> API to\nsend a directory.</p>\n<p><a id=\"ERR_HTTP2_SEND_FILE_NOSEEK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_SEND_FILE`"
            },
            {
              "textRaw": "`ERR_HTTP2_SEND_FILE_NOSEEK`",
              "name": "`err_http2_send_file_noseek`",
              "desc": "<p>An attempt was made to use the <code>Http2Stream.prototype.responseWithFile()</code> API to\nsend something other than a regular file, but <code>offset</code> or <code>length</code> options were\nprovided.</p>\n<p><a id=\"ERR_HTTP2_SESSION_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_SEND_FILE_NOSEEK`"
            },
            {
              "textRaw": "`ERR_HTTP2_SESSION_ERROR`",
              "name": "`err_http2_session_error`",
              "desc": "<p>The <code>Http2Session</code> closed with a non-zero error code.</p>\n<p><a id=\"ERR_HTTP2_SETTINGS_CANCEL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_SESSION_ERROR`"
            },
            {
              "textRaw": "`ERR_HTTP2_SETTINGS_CANCEL`",
              "name": "`err_http2_settings_cancel`",
              "desc": "<p>The <code>Http2Session</code> settings canceled.</p>\n<p><a id=\"ERR_HTTP2_SOCKET_BOUND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_SETTINGS_CANCEL`"
            },
            {
              "textRaw": "`ERR_HTTP2_SOCKET_BOUND`",
              "name": "`err_http2_socket_bound`",
              "desc": "<p>An attempt was made to connect a <code>Http2Session</code> object to a <code>net.Socket</code> or\n<code>tls.TLSSocket</code> that had already been bound to another <code>Http2Session</code> object.</p>\n<p><a id=\"ERR_HTTP2_SOCKET_UNBOUND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_SOCKET_BOUND`"
            },
            {
              "textRaw": "`ERR_HTTP2_SOCKET_UNBOUND`",
              "name": "`err_http2_socket_unbound`",
              "desc": "<p>An attempt was made to use the <code>socket</code> property of an <code>Http2Session</code> that\nhas already been closed.</p>\n<p><a id=\"ERR_HTTP2_STATUS_101\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_SOCKET_UNBOUND`"
            },
            {
              "textRaw": "`ERR_HTTP2_STATUS_101`",
              "name": "`err_http2_status_101`",
              "desc": "<p>Use of the <code>101</code> Informational status code is forbidden in HTTP/2.</p>\n<p><a id=\"ERR_HTTP2_STATUS_INVALID\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_STATUS_101`"
            },
            {
              "textRaw": "`ERR_HTTP2_STATUS_INVALID`",
              "name": "`err_http2_status_invalid`",
              "desc": "<p>An invalid HTTP status code has been specified. Status codes must be an integer\nbetween <code>100</code> and <code>599</code> (inclusive).</p>\n<p><a id=\"ERR_HTTP2_STREAM_CANCEL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_STATUS_INVALID`"
            },
            {
              "textRaw": "`ERR_HTTP2_STREAM_CANCEL`",
              "name": "`err_http2_stream_cancel`",
              "desc": "<p>An <code>Http2Stream</code> was destroyed before any data was transmitted to the connected\npeer.</p>\n<p><a id=\"ERR_HTTP2_STREAM_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_STREAM_CANCEL`"
            },
            {
              "textRaw": "`ERR_HTTP2_STREAM_ERROR`",
              "name": "`err_http2_stream_error`",
              "desc": "<p>A non-zero error code was been specified in an <code>RST_STREAM</code> frame.</p>\n<p><a id=\"ERR_HTTP2_STREAM_SELF_DEPENDENCY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_STREAM_ERROR`"
            },
            {
              "textRaw": "`ERR_HTTP2_STREAM_SELF_DEPENDENCY`",
              "name": "`err_http2_stream_self_dependency`",
              "desc": "<p>When setting the priority for an HTTP/2 stream, the stream may be marked as\na dependency for a parent stream. This error code is used when an attempt is\nmade to mark a stream and dependent of itself.</p>\n<p><a id=\"ERR_HTTP2_TOO_MANY_INVALID_FRAMES\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_STREAM_SELF_DEPENDENCY`"
            },
            {
              "textRaw": "`ERR_HTTP2_TOO_MANY_INVALID_FRAMES`",
              "name": "`err_http2_too_many_invalid_frames`",
              "desc": "<!--\nadded: v15.14.0\n-->\n<p>The limit of acceptable invalid HTTP/2 protocol frames sent by the peer,\nas specified through the <code>maxSessionInvalidFrames</code> option, has been exceeded.</p>\n<p><a id=\"ERR_HTTP2_TRAILERS_ALREADY_SENT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_TOO_MANY_INVALID_FRAMES`"
            },
            {
              "textRaw": "`ERR_HTTP2_TRAILERS_ALREADY_SENT`",
              "name": "`err_http2_trailers_already_sent`",
              "desc": "<p>Trailing headers have already been sent on the <code>Http2Stream</code>.</p>\n<p><a id=\"ERR_HTTP2_TRAILERS_NOT_READY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_TRAILERS_ALREADY_SENT`"
            },
            {
              "textRaw": "`ERR_HTTP2_TRAILERS_NOT_READY`",
              "name": "`err_http2_trailers_not_ready`",
              "desc": "<p>The <code>http2stream.sendTrailers()</code> method cannot be called until after the\n<code>'wantTrailers'</code> event is emitted on an <code>Http2Stream</code> object. The\n<code>'wantTrailers'</code> event will only be emitted if the <code>waitForTrailers</code> option\nis set for the <code>Http2Stream</code>.</p>\n<p><a id=\"ERR_HTTP2_UNSUPPORTED_PROTOCOL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_TRAILERS_NOT_READY`"
            },
            {
              "textRaw": "`ERR_HTTP2_UNSUPPORTED_PROTOCOL`",
              "name": "`err_http2_unsupported_protocol`",
              "desc": "<p><code>http2.connect()</code> was passed a URL that uses any protocol other than <code>http:</code> or\n<code>https:</code>.</p>\n<p><a id=\"ERR_ILLEGAL_CONSTRUCTOR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_UNSUPPORTED_PROTOCOL`"
            },
            {
              "textRaw": "`ERR_ILLEGAL_CONSTRUCTOR`",
              "name": "`err_illegal_constructor`",
              "desc": "<p>An attempt was made to construct an object using a non-public constructor.</p>\n<p><a id=\"ERR_IMPORT_ASSERTION_TYPE_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ILLEGAL_CONSTRUCTOR`"
            },
            {
              "textRaw": "`ERR_IMPORT_ASSERTION_TYPE_FAILED`",
              "name": "`err_import_assertion_type_failed`",
              "meta": {
                "added": [
                  "v17.1.0",
                  "v16.14.0"
                ],
                "changes": []
              },
              "desc": "<p>An import assertion has failed, preventing the specified module to be imported.</p>\n<p><a id=\"ERR_IMPORT_ASSERTION_TYPE_MISSING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IMPORT_ASSERTION_TYPE_FAILED`"
            },
            {
              "textRaw": "`ERR_IMPORT_ASSERTION_TYPE_MISSING`",
              "name": "`err_import_assertion_type_missing`",
              "meta": {
                "added": [
                  "v17.1.0",
                  "v16.14.0"
                ],
                "changes": []
              },
              "desc": "<p>An import assertion is missing, preventing the specified module to be imported.</p>\n<p><a id=\"ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IMPORT_ASSERTION_TYPE_MISSING`"
            },
            {
              "textRaw": "`ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED`",
              "name": "`err_import_assertion_type_unsupported`",
              "meta": {
                "added": [
                  "v17.1.0",
                  "v16.14.0"
                ],
                "changes": []
              },
              "desc": "<p>An import assertion is not supported by this version of Node.js.</p>\n<p><a id=\"ERR_INCOMPATIBLE_OPTION_PAIR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED`"
            },
            {
              "textRaw": "`ERR_INCOMPATIBLE_OPTION_PAIR`",
              "name": "`err_incompatible_option_pair`",
              "desc": "<p>An option pair is incompatible with each other and cannot be used at the same\ntime.</p>\n<p><a id=\"ERR_INPUT_TYPE_NOT_ALLOWED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INCOMPATIBLE_OPTION_PAIR`"
            },
            {
              "textRaw": "`ERR_INPUT_TYPE_NOT_ALLOWED`",
              "name": "`err_input_type_not_allowed`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>The <code>--input-type</code> flag was used to attempt to execute a file. This flag can\nonly be used with input via <code>--eval</code>, <code>--print</code>, or <code>STDIN</code>.</p>\n<p><a id=\"ERR_INSPECTOR_ALREADY_ACTIVATED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INPUT_TYPE_NOT_ALLOWED`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_ALREADY_ACTIVATED`",
              "name": "`err_inspector_already_activated`",
              "desc": "<p>While using the <code>node:inspector</code> module, an attempt was made to activate the\ninspector when it already started to listen on a port. Use <code>inspector.close()</code>\nbefore activating it on a different address.</p>\n<p><a id=\"ERR_INSPECTOR_ALREADY_CONNECTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_ALREADY_ACTIVATED`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_ALREADY_CONNECTED`",
              "name": "`err_inspector_already_connected`",
              "desc": "<p>While using the <code>node:inspector</code> module, an attempt was made to connect when the\ninspector was already connected.</p>\n<p><a id=\"ERR_INSPECTOR_CLOSED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_ALREADY_CONNECTED`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_CLOSED`",
              "name": "`err_inspector_closed`",
              "desc": "<p>While using the <code>node:inspector</code> module, an attempt was made to use the\ninspector after the session had already closed.</p>\n<p><a id=\"ERR_INSPECTOR_COMMAND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_CLOSED`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_COMMAND`",
              "name": "`err_inspector_command`",
              "desc": "<p>An error occurred while issuing a command via the <code>node:inspector</code> module.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_ACTIVE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_COMMAND`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_NOT_ACTIVE`",
              "name": "`err_inspector_not_active`",
              "desc": "<p>The <code>inspector</code> is not active when <code>inspector.waitForDebugger()</code> is called.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_AVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_NOT_ACTIVE`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_NOT_AVAILABLE`",
              "name": "`err_inspector_not_available`",
              "desc": "<p>The <code>node:inspector</code> module is not available for use.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_CONNECTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_NOT_AVAILABLE`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_NOT_CONNECTED`",
              "name": "`err_inspector_not_connected`",
              "desc": "<p>While using the <code>node:inspector</code> module, an attempt was made to use the\ninspector before it was connected.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_WORKER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_NOT_CONNECTED`"
            },
            {
              "textRaw": "`ERR_INSPECTOR_NOT_WORKER`",
              "name": "`err_inspector_not_worker`",
              "desc": "<p>An API was called on the main thread that can only be used from\nthe worker thread.</p>\n<p><a id=\"ERR_INTERNAL_ASSERTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INSPECTOR_NOT_WORKER`"
            },
            {
              "textRaw": "`ERR_INTERNAL_ASSERTION`",
              "name": "`err_internal_assertion`",
              "desc": "<p>There was a bug in Node.js or incorrect usage of Node.js internals.\nTo fix the error, open an issue at <a href=\"https://github.com/nodejs/node/issues\">https://github.com/nodejs/node/issues</a>.</p>\n<p><a id=\"ERR_INVALID_ADDRESS_FAMILY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INTERNAL_ASSERTION`"
            },
            {
              "textRaw": "`ERR_INVALID_ADDRESS_FAMILY`",
              "name": "`err_invalid_address_family`",
              "desc": "<p>The provided address family is not understood by the Node.js API.</p>\n<p><a id=\"ERR_INVALID_ARG_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_ADDRESS_FAMILY`"
            },
            {
              "textRaw": "`ERR_INVALID_ARG_TYPE`",
              "name": "`err_invalid_arg_type`",
              "desc": "<p>An argument of the wrong type was passed to a Node.js API.</p>\n<p><a id=\"ERR_INVALID_ARG_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_ARG_TYPE`"
            },
            {
              "textRaw": "`ERR_INVALID_ARG_VALUE`",
              "name": "`err_invalid_arg_value`",
              "desc": "<p>An invalid or unsupported value was passed for a given argument.</p>\n<p><a id=\"ERR_INVALID_ASYNC_ID\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_ARG_VALUE`"
            },
            {
              "textRaw": "`ERR_INVALID_ASYNC_ID`",
              "name": "`err_invalid_async_id`",
              "desc": "<p>An invalid <code>asyncId</code> or <code>triggerAsyncId</code> was passed using <code>AsyncHooks</code>. An id\nless than -1 should never happen.</p>\n<p><a id=\"ERR_INVALID_BUFFER_SIZE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_ASYNC_ID`"
            },
            {
              "textRaw": "`ERR_INVALID_BUFFER_SIZE`",
              "name": "`err_invalid_buffer_size`",
              "desc": "<p>A swap was performed on a <code>Buffer</code> but its size was not compatible with the\noperation.</p>\n<p><a id=\"ERR_INVALID_CHAR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_BUFFER_SIZE`"
            },
            {
              "textRaw": "`ERR_INVALID_CHAR`",
              "name": "`err_invalid_char`",
              "desc": "<p>Invalid characters were detected in headers.</p>\n<p><a id=\"ERR_INVALID_CURSOR_POS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_CHAR`"
            },
            {
              "textRaw": "`ERR_INVALID_CURSOR_POS`",
              "name": "`err_invalid_cursor_pos`",
              "desc": "<p>A cursor on a given stream cannot be moved to a specified row without a\nspecified column.</p>\n<p><a id=\"ERR_INVALID_FD\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_CURSOR_POS`"
            },
            {
              "textRaw": "`ERR_INVALID_FD`",
              "name": "`err_invalid_fd`",
              "desc": "<p>A file descriptor ('fd') was not valid (e.g. it was a negative value).</p>\n<p><a id=\"ERR_INVALID_FD_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_FD`"
            },
            {
              "textRaw": "`ERR_INVALID_FD_TYPE`",
              "name": "`err_invalid_fd_type`",
              "desc": "<p>A file descriptor ('fd') type was not valid.</p>\n<p><a id=\"ERR_INVALID_FILE_URL_HOST\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_FD_TYPE`"
            },
            {
              "textRaw": "`ERR_INVALID_FILE_URL_HOST`",
              "name": "`err_invalid_file_url_host`",
              "desc": "<p>A Node.js API that consumes <code>file:</code> URLs (such as certain functions in the\n<a href=\"fs.html\"><code>fs</code></a> module) encountered a file URL with an incompatible host. This\nsituation can only occur on Unix-like systems where only <code>localhost</code> or an empty\nhost is supported.</p>\n<p><a id=\"ERR_INVALID_FILE_URL_PATH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_FILE_URL_HOST`"
            },
            {
              "textRaw": "`ERR_INVALID_FILE_URL_PATH`",
              "name": "`err_invalid_file_url_path`",
              "desc": "<p>A Node.js API that consumes <code>file:</code> URLs (such as certain functions in the\n<a href=\"fs.html\"><code>fs</code></a> module) encountered a file URL with an incompatible path. The exact\nsemantics for determining whether a path can be used is platform-dependent.</p>\n<p><a id=\"ERR_INVALID_HANDLE_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_FILE_URL_PATH`"
            },
            {
              "textRaw": "`ERR_INVALID_HANDLE_TYPE`",
              "name": "`err_invalid_handle_type`",
              "desc": "<p>An attempt was made to send an unsupported \"handle\" over an IPC communication\nchannel to a child process. See <a href=\"child_process.html#subprocesssendmessage-sendhandle-options-callback\"><code>subprocess.send()</code></a> and <a href=\"process.html#processsendmessage-sendhandle-options-callback\"><code>process.send()</code></a>\nfor more information.</p>\n<p><a id=\"ERR_INVALID_HTTP_TOKEN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_HANDLE_TYPE`"
            },
            {
              "textRaw": "`ERR_INVALID_HTTP_TOKEN`",
              "name": "`err_invalid_http_token`",
              "desc": "<p>An invalid HTTP token was supplied.</p>\n<p><a id=\"ERR_INVALID_IP_ADDRESS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_HTTP_TOKEN`"
            },
            {
              "textRaw": "`ERR_INVALID_IP_ADDRESS`",
              "name": "`err_invalid_ip_address`",
              "desc": "<p>An IP address is not valid.</p>\n<p><a id=\"ERR_INVALID_MIME_SYNTAX\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_IP_ADDRESS`"
            },
            {
              "textRaw": "`ERR_INVALID_MIME_SYNTAX`",
              "name": "`err_invalid_mime_syntax`",
              "desc": "<p>The syntax of a MIME is not valid.</p>\n<p><a id=\"ERR_INVALID_MODULE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_MIME_SYNTAX`"
            },
            {
              "textRaw": "`ERR_INVALID_MODULE`",
              "name": "`err_invalid_module`",
              "meta": {
                "added": [
                  "v15.0.0",
                  "v14.18.0"
                ],
                "changes": []
              },
              "desc": "<p>An attempt was made to load a module that does not exist or was otherwise not\nvalid.</p>\n<p><a id=\"ERR_INVALID_MODULE_SPECIFIER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_MODULE`"
            },
            {
              "textRaw": "`ERR_INVALID_MODULE_SPECIFIER`",
              "name": "`err_invalid_module_specifier`",
              "desc": "<p>The imported module string is an invalid URL, package name, or package subpath\nspecifier.</p>\n<p><a id=\"ERR_INVALID_OBJECT_DEFINE_PROPERTY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_MODULE_SPECIFIER`"
            },
            {
              "textRaw": "`ERR_INVALID_OBJECT_DEFINE_PROPERTY`",
              "name": "`err_invalid_object_define_property`",
              "desc": "<p>An error occurred while setting an invalid attribute on the property of\nan object.</p>\n<p><a id=\"ERR_INVALID_PACKAGE_CONFIG\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_OBJECT_DEFINE_PROPERTY`"
            },
            {
              "textRaw": "`ERR_INVALID_PACKAGE_CONFIG`",
              "name": "`err_invalid_package_config`",
              "desc": "<p>An invalid <a href=\"packages.html#nodejs-packagejson-field-definitions\"><code>package.json</code></a> file failed parsing.</p>\n<p><a id=\"ERR_INVALID_PACKAGE_TARGET\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_PACKAGE_CONFIG`"
            },
            {
              "textRaw": "`ERR_INVALID_PACKAGE_TARGET`",
              "name": "`err_invalid_package_target`",
              "desc": "<p>The <code>package.json</code> <a href=\"packages.html#exports\"><code>\"exports\"</code></a> field contains an invalid target mapping\nvalue for the attempted module resolution.</p>\n<p><a id=\"ERR_INVALID_PERFORMANCE_MARK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_PACKAGE_TARGET`"
            },
            {
              "textRaw": "`ERR_INVALID_PERFORMANCE_MARK`",
              "name": "`err_invalid_performance_mark`",
              "desc": "<p>While using the Performance Timing API (<code>perf_hooks</code>), a performance mark is\ninvalid.</p>\n<p><a id=\"ERR_INVALID_PROTOCOL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_PERFORMANCE_MARK`"
            },
            {
              "textRaw": "`ERR_INVALID_PROTOCOL`",
              "name": "`err_invalid_protocol`",
              "desc": "<p>An invalid <code>options.protocol</code> was passed to <code>http.request()</code>.</p>\n<p><a id=\"ERR_INVALID_REPL_EVAL_CONFIG\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_PROTOCOL`"
            },
            {
              "textRaw": "`ERR_INVALID_REPL_EVAL_CONFIG`",
              "name": "`err_invalid_repl_eval_config`",
              "desc": "<p>Both <code>breakEvalOnSigint</code> and <code>eval</code> options were set in the <a href=\"repl.html\"><code>REPL</code></a> config,\nwhich is not supported.</p>\n<p><a id=\"ERR_INVALID_REPL_INPUT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_REPL_EVAL_CONFIG`"
            },
            {
              "textRaw": "`ERR_INVALID_REPL_INPUT`",
              "name": "`err_invalid_repl_input`",
              "desc": "<p>The input may not be used in the <a href=\"repl.html\"><code>REPL</code></a>. The conditions under which this\nerror is used are described in the <a href=\"repl.html\"><code>REPL</code></a> documentation.</p>\n<p><a id=\"ERR_INVALID_RETURN_PROPERTY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_REPL_INPUT`"
            },
            {
              "textRaw": "`ERR_INVALID_RETURN_PROPERTY`",
              "name": "`err_invalid_return_property`",
              "desc": "<p>Thrown in case a function option does not provide a valid value for one of its\nreturned object properties on execution.</p>\n<p><a id=\"ERR_INVALID_RETURN_PROPERTY_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_RETURN_PROPERTY`"
            },
            {
              "textRaw": "`ERR_INVALID_RETURN_PROPERTY_VALUE`",
              "name": "`err_invalid_return_property_value`",
              "desc": "<p>Thrown in case a function option does not provide an expected value\ntype for one of its returned object properties on execution.</p>\n<p><a id=\"ERR_INVALID_RETURN_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_RETURN_PROPERTY_VALUE`"
            },
            {
              "textRaw": "`ERR_INVALID_RETURN_VALUE`",
              "name": "`err_invalid_return_value`",
              "desc": "<p>Thrown in case a function option does not return an expected value\ntype on execution, such as when a function is expected to return a promise.</p>\n<p><a id=\"ERR_INVALID_STATE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_RETURN_VALUE`"
            },
            {
              "textRaw": "`ERR_INVALID_STATE`",
              "name": "`err_invalid_state`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Indicates that an operation cannot be completed due to an invalid state.\nFor instance, an object may have already been destroyed, or may be\nperforming another operation.</p>\n<p><a id=\"ERR_INVALID_SYNC_FORK_INPUT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_STATE`"
            },
            {
              "textRaw": "`ERR_INVALID_SYNC_FORK_INPUT`",
              "name": "`err_invalid_sync_fork_input`",
              "desc": "<p>A <code>Buffer</code>, <code>TypedArray</code>, <code>DataView</code>, or <code>string</code> was provided as stdio input to\nan asynchronous fork. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_INVALID_THIS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_SYNC_FORK_INPUT`"
            },
            {
              "textRaw": "`ERR_INVALID_THIS`",
              "name": "`err_invalid_this`",
              "desc": "<p>A Node.js API function was called with an incompatible <code>this</code> value.</p>\n<pre><code class=\"language-js\">const urlSearchParams = new URLSearchParams('foo=bar&#x26;baz=new');\n\nconst buf = Buffer.alloc(1);\nurlSearchParams.has.call(buf, 'foo');\n// Throws a TypeError with code 'ERR_INVALID_THIS'\n</code></pre>\n<p><a id=\"ERR_INVALID_TRANSFER_OBJECT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_THIS`"
            },
            {
              "textRaw": "`ERR_INVALID_TRANSFER_OBJECT`",
              "name": "`err_invalid_transfer_object`",
              "desc": "<p>An invalid transfer object was passed to <code>postMessage()</code>.</p>\n<p><a id=\"ERR_INVALID_TUPLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_TRANSFER_OBJECT`"
            },
            {
              "textRaw": "`ERR_INVALID_TUPLE`",
              "name": "`err_invalid_tuple`",
              "desc": "<p>An element in the <code>iterable</code> provided to the <a href=\"url.html#the-whatwg-url-api\">WHATWG</a>\n<a href=\"url.html#new-urlsearchparamsiterable\"><code>URLSearchParams</code> constructor</a> did not\nrepresent a <code>[name, value]</code> tuple – that is, if an element is not iterable, or\ndoes not consist of exactly two elements.</p>\n<p><a id=\"ERR_INVALID_URI\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_TUPLE`"
            },
            {
              "textRaw": "`ERR_INVALID_URI`",
              "name": "`err_invalid_uri`",
              "desc": "<p>An invalid URI was passed.</p>\n<p><a id=\"ERR_INVALID_URL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_URI`"
            },
            {
              "textRaw": "`ERR_INVALID_URL`",
              "name": "`err_invalid_url`",
              "desc": "<p>An invalid URL was passed to the <a href=\"url.html#the-whatwg-url-api\">WHATWG</a> <a href=\"url.html#new-urlinput-base\"><code>URL</code>\nconstructor</a> or the legacy <a href=\"url.html#urlparseurlstring-parsequerystring-slashesdenotehost\"><code>url.parse()</code></a> to be parsed.\nThe thrown error object typically has an additional property <code>'input'</code> that\ncontains the URL that failed to parse.</p>\n<p><a id=\"ERR_INVALID_URL_SCHEME\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_URL`"
            },
            {
              "textRaw": "`ERR_INVALID_URL_SCHEME`",
              "name": "`err_invalid_url_scheme`",
              "desc": "<p>An attempt was made to use a URL of an incompatible scheme (protocol) for a\nspecific purpose. It is only used in the <a href=\"url.html#the-whatwg-url-api\">WHATWG URL API</a> support in the\n<a href=\"fs.html\"><code>fs</code></a> module (which only accepts URLs with <code>'file'</code> scheme), but may be used\nin other Node.js APIs as well in the future.</p>\n<p><a id=\"ERR_IPC_CHANNEL_CLOSED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_URL_SCHEME`"
            },
            {
              "textRaw": "`ERR_IPC_CHANNEL_CLOSED`",
              "name": "`err_ipc_channel_closed`",
              "desc": "<p>An attempt was made to use an IPC communication channel that was already closed.</p>\n<p><a id=\"ERR_IPC_DISCONNECTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IPC_CHANNEL_CLOSED`"
            },
            {
              "textRaw": "`ERR_IPC_DISCONNECTED`",
              "name": "`err_ipc_disconnected`",
              "desc": "<p>An attempt was made to disconnect an IPC communication channel that was already\ndisconnected. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_IPC_ONE_PIPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IPC_DISCONNECTED`"
            },
            {
              "textRaw": "`ERR_IPC_ONE_PIPE`",
              "name": "`err_ipc_one_pipe`",
              "desc": "<p>An attempt was made to create a child Node.js process using more than one IPC\ncommunication channel. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_IPC_SYNC_FORK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IPC_ONE_PIPE`"
            },
            {
              "textRaw": "`ERR_IPC_SYNC_FORK`",
              "name": "`err_ipc_sync_fork`",
              "desc": "<p>An attempt was made to open an IPC communication channel with a synchronously\nforked Node.js process. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_LOADER_CHAIN_INCOMPLETE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_IPC_SYNC_FORK`"
            },
            {
              "textRaw": "`ERR_LOADER_CHAIN_INCOMPLETE`",
              "name": "`err_loader_chain_incomplete`",
              "meta": {
                "added": [
                  "v18.6.0",
                  "v16.17.0"
                ],
                "changes": []
              },
              "desc": "<p>An ESM loader hook returned without calling <code>next()</code> and without explicitly\nsignaling a short circuit.</p>\n<p><a id=\"ERR_MANIFEST_ASSERT_INTEGRITY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_LOADER_CHAIN_INCOMPLETE`"
            },
            {
              "textRaw": "`ERR_MANIFEST_ASSERT_INTEGRITY`",
              "name": "`err_manifest_assert_integrity`",
              "desc": "<p>An attempt was made to load a resource, but the resource did not match the\nintegrity defined by the policy manifest. See the documentation for <a href=\"permissions.html#policies\">policy</a>\nmanifests for more information.</p>\n<p><a id=\"ERR_MANIFEST_DEPENDENCY_MISSING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_ASSERT_INTEGRITY`"
            },
            {
              "textRaw": "`ERR_MANIFEST_DEPENDENCY_MISSING`",
              "name": "`err_manifest_dependency_missing`",
              "desc": "<p>An attempt was made to load a resource, but the resource was not listed as a\ndependency from the location that attempted to load it. See the documentation\nfor <a href=\"permissions.html#policies\">policy</a> manifests for more information.</p>\n<p><a id=\"ERR_MANIFEST_INTEGRITY_MISMATCH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_DEPENDENCY_MISSING`"
            },
            {
              "textRaw": "`ERR_MANIFEST_INTEGRITY_MISMATCH`",
              "name": "`err_manifest_integrity_mismatch`",
              "desc": "<p>An attempt was made to load a policy manifest, but the manifest had multiple\nentries for a resource which did not match each other. Update the manifest\nentries to match in order to resolve this error. See the documentation for\n<a href=\"permissions.html#policies\">policy</a> manifests for more information.</p>\n<p><a id=\"ERR_MANIFEST_INVALID_RESOURCE_FIELD\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_INTEGRITY_MISMATCH`"
            },
            {
              "textRaw": "`ERR_MANIFEST_INVALID_RESOURCE_FIELD`",
              "name": "`err_manifest_invalid_resource_field`",
              "desc": "<p>A policy manifest resource had an invalid value for one of its fields. Update\nthe manifest entry to match in order to resolve this error. See the\ndocumentation for <a href=\"permissions.html#policies\">policy</a> manifests for more information.</p>\n<p><a id=\"ERR_MANIFEST_INVALID_SPECIFIER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_INVALID_RESOURCE_FIELD`"
            },
            {
              "textRaw": "`ERR_MANIFEST_INVALID_SPECIFIER`",
              "name": "`err_manifest_invalid_specifier`",
              "desc": "<p>A policy manifest resource had an invalid value for one of its dependency\nmappings. Update the manifest entry to match to resolve this error. See the\ndocumentation for <a href=\"permissions.html#policies\">policy</a> manifests for more information.</p>\n<p><a id=\"ERR_MANIFEST_PARSE_POLICY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_INVALID_SPECIFIER`"
            },
            {
              "textRaw": "`ERR_MANIFEST_PARSE_POLICY`",
              "name": "`err_manifest_parse_policy`",
              "desc": "<p>An attempt was made to load a policy manifest, but the manifest was unable to\nbe parsed. See the documentation for <a href=\"permissions.html#policies\">policy</a> manifests for more information.</p>\n<p><a id=\"ERR_MANIFEST_TDZ\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_PARSE_POLICY`"
            },
            {
              "textRaw": "`ERR_MANIFEST_TDZ`",
              "name": "`err_manifest_tdz`",
              "desc": "<p>An attempt was made to read from a policy manifest, but the manifest\ninitialization has not yet taken place. This is likely a bug in Node.js.</p>\n<p><a id=\"ERR_MANIFEST_UNKNOWN_ONERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_TDZ`"
            },
            {
              "textRaw": "`ERR_MANIFEST_UNKNOWN_ONERROR`",
              "name": "`err_manifest_unknown_onerror`",
              "desc": "<p>A policy manifest was loaded, but had an unknown value for its \"onerror\"\nbehavior. See the documentation for <a href=\"permissions.html#policies\">policy</a> manifests for more information.</p>\n<p><a id=\"ERR_MEMORY_ALLOCATION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MANIFEST_UNKNOWN_ONERROR`"
            },
            {
              "textRaw": "`ERR_MEMORY_ALLOCATION_FAILED`",
              "name": "`err_memory_allocation_failed`",
              "desc": "<p>An attempt was made to allocate memory (usually in the C++ layer) but it\nfailed.</p>\n<p><a id=\"ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MEMORY_ALLOCATION_FAILED`"
            },
            {
              "textRaw": "`ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE`",
              "name": "`err_message_target_context_unavailable`",
              "meta": {
                "added": [
                  "v14.5.0",
                  "v12.19.0"
                ],
                "changes": []
              },
              "desc": "<p>A message posted to a <a href=\"worker_threads.html#class-messageport\"><code>MessagePort</code></a> could not be deserialized in the target\n<a href=\"vm.html\">vm</a> <code>Context</code>. Not all Node.js objects can be successfully instantiated in\nany context at this time, and attempting to transfer them using <code>postMessage()</code>\ncan fail on the receiving side in that case.</p>\n<p><a id=\"ERR_METHOD_NOT_IMPLEMENTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE`"
            },
            {
              "textRaw": "`ERR_METHOD_NOT_IMPLEMENTED`",
              "name": "`err_method_not_implemented`",
              "desc": "<p>A method is required but not implemented.</p>\n<p><a id=\"ERR_MISSING_ARGS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_METHOD_NOT_IMPLEMENTED`"
            },
            {
              "textRaw": "`ERR_MISSING_ARGS`",
              "name": "`err_missing_args`",
              "desc": "<p>A required argument of a Node.js API was not passed. This is only used for\nstrict compliance with the API specification (which in some cases may accept\n<code>func(undefined)</code> but not <code>func()</code>). In most native Node.js APIs,\n<code>func(undefined)</code> and <code>func()</code> are treated identically, and the\n<a href=\"#err_invalid_arg_type\"><code>ERR_INVALID_ARG_TYPE</code></a> error code may be used instead.</p>\n<p><a id=\"ERR_MISSING_OPTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MISSING_ARGS`"
            },
            {
              "textRaw": "`ERR_MISSING_OPTION`",
              "name": "`err_missing_option`",
              "desc": "<p>For APIs that accept options objects, some options might be mandatory. This code\nis thrown if a required option is missing.</p>\n<p><a id=\"ERR_MISSING_PASSPHRASE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MISSING_OPTION`"
            },
            {
              "textRaw": "`ERR_MISSING_PASSPHRASE`",
              "name": "`err_missing_passphrase`",
              "desc": "<p>An attempt was made to read an encrypted key without specifying a passphrase.</p>\n<p><a id=\"ERR_MISSING_PLATFORM_FOR_WORKER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MISSING_PASSPHRASE`"
            },
            {
              "textRaw": "`ERR_MISSING_PLATFORM_FOR_WORKER`",
              "name": "`err_missing_platform_for_worker`",
              "desc": "<p>The V8 platform used by this instance of Node.js does not support creating\nWorkers. This is caused by lack of embedder support for Workers. In particular,\nthis error will not occur with standard builds of Node.js.</p>\n<p><a id=\"ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MISSING_PLATFORM_FOR_WORKER`"
            },
            {
              "textRaw": "`ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST`",
              "name": "`err_missing_transferable_in_transfer_list`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An object that needs to be explicitly listed in the <code>transferList</code> argument\nis in the object passed to a <a href=\"worker_threads.html#portpostmessagevalue-transferlist\"><code>postMessage()</code></a> call, but is not provided\nin the <code>transferList</code> for that call. Usually, this is a <code>MessagePort</code>.</p>\n<p>In Node.js versions prior to v15.0.0, the error code being used here was\n<a href=\"#err_missing_message_port_in_transfer_list\"><code>ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST</code></a>. However, the set of\ntransferable object types has been expanded to cover more types than\n<code>MessagePort</code>.</p>\n<p><a id=\"ERR_MODULE_NOT_FOUND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST`"
            },
            {
              "textRaw": "`ERR_MODULE_NOT_FOUND`",
              "name": "`err_module_not_found`",
              "desc": "<p>A module file could not be resolved by the ECMAScript modules loader while\nattempting an <code>import</code> operation or when loading the program entry point.</p>\n<p><a id=\"ERR_MULTIPLE_CALLBACK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MODULE_NOT_FOUND`"
            },
            {
              "textRaw": "`ERR_MULTIPLE_CALLBACK`",
              "name": "`err_multiple_callback`",
              "desc": "<p>A callback was called more than once.</p>\n<p>A callback is almost always meant to only be called once as the query\ncan either be fulfilled or rejected but not both at the same time. The latter\nwould be possible by calling a callback more than once.</p>\n<p><a id=\"ERR_NAPI_CONS_FUNCTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MULTIPLE_CALLBACK`"
            },
            {
              "textRaw": "`ERR_NAPI_CONS_FUNCTION`",
              "name": "`err_napi_cons_function`",
              "desc": "<p>While using <code>Node-API</code>, a constructor passed was not a function.</p>\n<p><a id=\"ERR_NAPI_INVALID_DATAVIEW_ARGS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_CONS_FUNCTION`"
            },
            {
              "textRaw": "`ERR_NAPI_INVALID_DATAVIEW_ARGS`",
              "name": "`err_napi_invalid_dataview_args`",
              "desc": "<p>While calling <code>napi_create_dataview()</code>, a given <code>offset</code> was outside the bounds\nof the dataview or <code>offset + length</code> was larger than a length of given <code>buffer</code>.</p>\n<p><a id=\"ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_INVALID_DATAVIEW_ARGS`"
            },
            {
              "textRaw": "`ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT`",
              "name": "`err_napi_invalid_typedarray_alignment`",
              "desc": "<p>While calling <code>napi_create_typedarray()</code>, the provided <code>offset</code> was not a\nmultiple of the element size.</p>\n<p><a id=\"ERR_NAPI_INVALID_TYPEDARRAY_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT`"
            },
            {
              "textRaw": "`ERR_NAPI_INVALID_TYPEDARRAY_LENGTH`",
              "name": "`err_napi_invalid_typedarray_length`",
              "desc": "<p>While calling <code>napi_create_typedarray()</code>, <code>(length * size_of_element) + byte_offset</code> was larger than the length of given <code>buffer</code>.</p>\n<p><a id=\"ERR_NAPI_TSFN_CALL_JS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_INVALID_TYPEDARRAY_LENGTH`"
            },
            {
              "textRaw": "`ERR_NAPI_TSFN_CALL_JS`",
              "name": "`err_napi_tsfn_call_js`",
              "desc": "<p>An error occurred while invoking the JavaScript portion of the thread-safe\nfunction.</p>\n<p><a id=\"ERR_NAPI_TSFN_GET_UNDEFINED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_TSFN_CALL_JS`"
            },
            {
              "textRaw": "`ERR_NAPI_TSFN_GET_UNDEFINED`",
              "name": "`err_napi_tsfn_get_undefined`",
              "desc": "<p>An error occurred while attempting to retrieve the JavaScript <code>undefined</code>\nvalue.</p>\n<p><a id=\"ERR_NAPI_TSFN_START_IDLE_LOOP\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_TSFN_GET_UNDEFINED`"
            },
            {
              "textRaw": "`ERR_NAPI_TSFN_START_IDLE_LOOP`",
              "name": "`err_napi_tsfn_start_idle_loop`",
              "desc": "<p>On the main thread, values are removed from the queue associated with the\nthread-safe function in an idle loop. This error indicates that an error\nhas occurred when attempting to start the loop.</p>\n<p><a id=\"ERR_NAPI_TSFN_STOP_IDLE_LOOP\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_TSFN_START_IDLE_LOOP`"
            },
            {
              "textRaw": "`ERR_NAPI_TSFN_STOP_IDLE_LOOP`",
              "name": "`err_napi_tsfn_stop_idle_loop`",
              "desc": "<p>Once no more items are left in the queue, the idle loop must be suspended. This\nerror indicates that the idle loop has failed to stop.</p>\n<p><a id=\"ERR_NOT_BUILDING_SNAPSHOT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_TSFN_STOP_IDLE_LOOP`"
            },
            {
              "textRaw": "`ERR_NOT_BUILDING_SNAPSHOT`",
              "name": "`err_not_building_snapshot`",
              "desc": "<p>An attempt was made to use operations that can only be used when building\nV8 startup snapshot even though Node.js isn't building one.</p>\n<p><a id=\"ERR_NO_CRYPTO\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NOT_BUILDING_SNAPSHOT`"
            },
            {
              "textRaw": "`ERR_NO_CRYPTO`",
              "name": "`err_no_crypto`",
              "desc": "<p>An attempt was made to use crypto features while Node.js was not compiled with\nOpenSSL crypto support.</p>\n<p><a id=\"ERR_NO_ICU\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NO_CRYPTO`"
            },
            {
              "textRaw": "`ERR_NO_ICU`",
              "name": "`err_no_icu`",
              "desc": "<p>An attempt was made to use features that require <a href=\"intl.html#internationalization-support\">ICU</a>, but Node.js was not\ncompiled with ICU support.</p>\n<p><a id=\"ERR_NON_CONTEXT_AWARE_DISABLED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NO_ICU`"
            },
            {
              "textRaw": "`ERR_NON_CONTEXT_AWARE_DISABLED`",
              "name": "`err_non_context_aware_disabled`",
              "desc": "<p>A non-context-aware native addon was loaded in a process that disallows them.</p>\n<p><a id=\"ERR_OUT_OF_RANGE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NON_CONTEXT_AWARE_DISABLED`"
            },
            {
              "textRaw": "`ERR_OUT_OF_RANGE`",
              "name": "`err_out_of_range`",
              "desc": "<p>A given value is out of the accepted range.</p>\n<p><a id=\"ERR_PACKAGE_IMPORT_NOT_DEFINED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_OUT_OF_RANGE`"
            },
            {
              "textRaw": "`ERR_PACKAGE_IMPORT_NOT_DEFINED`",
              "name": "`err_package_import_not_defined`",
              "desc": "<p>The <code>package.json</code> <a href=\"packages.html#imports\"><code>\"imports\"</code></a> field does not define the given internal\npackage specifier mapping.</p>\n<p><a id=\"ERR_PACKAGE_PATH_NOT_EXPORTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PACKAGE_IMPORT_NOT_DEFINED`"
            },
            {
              "textRaw": "`ERR_PACKAGE_PATH_NOT_EXPORTED`",
              "name": "`err_package_path_not_exported`",
              "desc": "<p>The <code>package.json</code> <a href=\"packages.html#exports\"><code>\"exports\"</code></a> field does not export the requested subpath.\nBecause exports are encapsulated, private internal modules that are not exported\ncannot be imported through the package resolution, unless using an absolute URL.</p>\n<p><a id=\"ERR_PARSE_ARGS_INVALID_OPTION_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PACKAGE_PATH_NOT_EXPORTED`"
            },
            {
              "textRaw": "`ERR_PARSE_ARGS_INVALID_OPTION_VALUE`",
              "name": "`err_parse_args_invalid_option_value`",
              "meta": {
                "added": [
                  "v18.3.0",
                  "v16.17.0"
                ],
                "changes": []
              },
              "desc": "<p>When <code>strict</code> set to <code>true</code>, thrown by <a href=\"util.html#utilparseargsconfig\"><code>util.parseArgs()</code></a> if a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\nvalue is provided for an option of type <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, or if a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\nvalue is provided for an option of type <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>.</p>\n<p><a id=\"ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PARSE_ARGS_INVALID_OPTION_VALUE`"
            },
            {
              "textRaw": "`ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL`",
              "name": "`err_parse_args_unexpected_positional`",
              "meta": {
                "added": [
                  "v18.3.0",
                  "v16.17.0"
                ],
                "changes": []
              },
              "desc": "<p>Thrown by <a href=\"util.html#utilparseargsconfig\"><code>util.parseArgs()</code></a>, when a positional argument is provided and\n<code>allowPositionals</code> is set to <code>false</code>.</p>\n<p><a id=\"ERR_PARSE_ARGS_UNKNOWN_OPTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL`"
            },
            {
              "textRaw": "`ERR_PARSE_ARGS_UNKNOWN_OPTION`",
              "name": "`err_parse_args_unknown_option`",
              "meta": {
                "added": [
                  "v18.3.0",
                  "v16.17.0"
                ],
                "changes": []
              },
              "desc": "<p>When <code>strict</code> set to <code>true</code>, thrown by <a href=\"util.html#utilparseargsconfig\"><code>util.parseArgs()</code></a> if an argument\nis not configured in <code>options</code>.</p>\n<p><a id=\"ERR_PERFORMANCE_INVALID_TIMESTAMP\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PARSE_ARGS_UNKNOWN_OPTION`"
            },
            {
              "textRaw": "`ERR_PERFORMANCE_INVALID_TIMESTAMP`",
              "name": "`err_performance_invalid_timestamp`",
              "desc": "<p>An invalid timestamp value was provided for a performance mark or measure.</p>\n<p><a id=\"ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PERFORMANCE_INVALID_TIMESTAMP`"
            },
            {
              "textRaw": "`ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS`",
              "name": "`err_performance_measure_invalid_options`",
              "desc": "<p>Invalid options were provided for a performance measure.</p>\n<p><a id=\"ERR_PROTO_ACCESS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS`"
            },
            {
              "textRaw": "`ERR_PROTO_ACCESS`",
              "name": "`err_proto_access`",
              "desc": "<p>Accessing <code>Object.prototype.__proto__</code> has been forbidden using\n<a href=\"cli.html#--disable-protomode\"><code>--disable-proto=throw</code></a>. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf</code></a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a> should be used to get and set the prototype of an\nobject.</p>\n<p><a id=\"ERR_REQUIRE_ESM\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PROTO_ACCESS`"
            },
            {
              "textRaw": "`ERR_REQUIRE_ESM`",
              "name": "`err_require_esm`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to <code>require()</code> an <a href=\"esm.html\">ES Module</a>.</p>\n<p><a id=\"ERR_SCRIPT_EXECUTION_INTERRUPTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_REQUIRE_ESM`"
            },
            {
              "textRaw": "`ERR_SCRIPT_EXECUTION_INTERRUPTED`",
              "name": "`err_script_execution_interrupted`",
              "desc": "<p>Script execution was interrupted by <code>SIGINT</code> (For\nexample, <kbd>Ctrl</kbd>+<kbd>C</kbd> was pressed.)</p>\n<p><a id=\"ERR_SCRIPT_EXECUTION_TIMEOUT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SCRIPT_EXECUTION_INTERRUPTED`"
            },
            {
              "textRaw": "`ERR_SCRIPT_EXECUTION_TIMEOUT`",
              "name": "`err_script_execution_timeout`",
              "desc": "<p>Script execution timed out, possibly due to bugs in the script being executed.</p>\n<p><a id=\"ERR_SERVER_ALREADY_LISTEN\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SCRIPT_EXECUTION_TIMEOUT`"
            },
            {
              "textRaw": "`ERR_SERVER_ALREADY_LISTEN`",
              "name": "`err_server_already_listen`",
              "desc": "<p>The <a href=\"net.html#serverlisten\"><code>server.listen()</code></a> method was called while a <code>net.Server</code> was already\nlistening. This applies to all instances of <code>net.Server</code>, including HTTP, HTTPS,\nand HTTP/2 <code>Server</code> instances.</p>\n<p><a id=\"ERR_SERVER_NOT_RUNNING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SERVER_ALREADY_LISTEN`"
            },
            {
              "textRaw": "`ERR_SERVER_NOT_RUNNING`",
              "name": "`err_server_not_running`",
              "desc": "<p>The <a href=\"net.html#serverclosecallback\"><code>server.close()</code></a> method was called when a <code>net.Server</code> was not\nrunning. This applies to all instances of <code>net.Server</code>, including HTTP, HTTPS,\nand HTTP/2 <code>Server</code> instances.</p>\n<p><a id=\"ERR_SOCKET_ALREADY_BOUND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SERVER_NOT_RUNNING`"
            },
            {
              "textRaw": "`ERR_SOCKET_ALREADY_BOUND`",
              "name": "`err_socket_already_bound`",
              "desc": "<p>An attempt was made to bind a socket that has already been bound.</p>\n<p><a id=\"ERR_SOCKET_BAD_BUFFER_SIZE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_ALREADY_BOUND`"
            },
            {
              "textRaw": "`ERR_SOCKET_BAD_BUFFER_SIZE`",
              "name": "`err_socket_bad_buffer_size`",
              "desc": "<p>An invalid (negative) size was passed for either the <code>recvBufferSize</code> or\n<code>sendBufferSize</code> options in <a href=\"dgram.html#dgramcreatesocketoptions-callback\"><code>dgram.createSocket()</code></a>.</p>\n<p><a id=\"ERR_SOCKET_BAD_PORT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_BAD_BUFFER_SIZE`"
            },
            {
              "textRaw": "`ERR_SOCKET_BAD_PORT`",
              "name": "`err_socket_bad_port`",
              "desc": "<p>An API function expecting a port >= 0 and &#x3C; 65536 received an invalid value.</p>\n<p><a id=\"ERR_SOCKET_BAD_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_BAD_PORT`"
            },
            {
              "textRaw": "`ERR_SOCKET_BAD_TYPE`",
              "name": "`err_socket_bad_type`",
              "desc": "<p>An API function expecting a socket type (<code>udp4</code> or <code>udp6</code>) received an invalid\nvalue.</p>\n<p><a id=\"ERR_SOCKET_BUFFER_SIZE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_BAD_TYPE`"
            },
            {
              "textRaw": "`ERR_SOCKET_BUFFER_SIZE`",
              "name": "`err_socket_buffer_size`",
              "desc": "<p>While using <a href=\"dgram.html#dgramcreatesocketoptions-callback\"><code>dgram.createSocket()</code></a>, the size of the receive or send <code>Buffer</code>\ncould not be determined.</p>\n<p><a id=\"ERR_SOCKET_CLOSED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_BUFFER_SIZE`"
            },
            {
              "textRaw": "`ERR_SOCKET_CLOSED`",
              "name": "`err_socket_closed`",
              "desc": "<p>An attempt was made to operate on an already closed socket.</p>\n<p><a id=\"ERR_SOCKET_CLOSED_BEFORE_CONNECTION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_CLOSED`"
            },
            {
              "textRaw": "`ERR_SOCKET_CLOSED_BEFORE_CONNECTION`",
              "name": "`err_socket_closed_before_connection`",
              "desc": "<p>When calling <a href=\"net.html#socketwritedata-encoding-callback\"><code>net.Socket.write()</code></a> on a connecting socket and the socket was\nclosed before the connection was established.</p>\n<p><a id=\"ERR_SOCKET_DGRAM_IS_CONNECTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_CLOSED_BEFORE_CONNECTION`"
            },
            {
              "textRaw": "`ERR_SOCKET_DGRAM_IS_CONNECTED`",
              "name": "`err_socket_dgram_is_connected`",
              "desc": "<p>A <a href=\"dgram.html#socketconnectport-address-callback\"><code>dgram.connect()</code></a> call was made on an already connected socket.</p>\n<p><a id=\"ERR_SOCKET_DGRAM_NOT_CONNECTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_DGRAM_IS_CONNECTED`"
            },
            {
              "textRaw": "`ERR_SOCKET_DGRAM_NOT_CONNECTED`",
              "name": "`err_socket_dgram_not_connected`",
              "desc": "<p>A <a href=\"dgram.html#socketdisconnect\"><code>dgram.disconnect()</code></a> or <a href=\"dgram.html#socketremoteaddress\"><code>dgram.remoteAddress()</code></a> call was made on a\ndisconnected socket.</p>\n<p><a id=\"ERR_SOCKET_DGRAM_NOT_RUNNING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_DGRAM_NOT_CONNECTED`"
            },
            {
              "textRaw": "`ERR_SOCKET_DGRAM_NOT_RUNNING`",
              "name": "`err_socket_dgram_not_running`",
              "desc": "<p>A call was made and the UDP subsystem was not running.</p>\n<p><a id=\"ERR_SRI_PARSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_DGRAM_NOT_RUNNING`"
            },
            {
              "textRaw": "`ERR_SRI_PARSE`",
              "name": "`err_sri_parse`",
              "desc": "<p>A string was provided for a Subresource Integrity check, but was unable to be\nparsed. Check the format of integrity attributes by looking at the\n<a href=\"https://www.w3.org/TR/SRI/#the-integrity-attribute\">Subresource Integrity specification</a>.</p>\n<p><a id=\"ERR_STREAM_ALREADY_FINISHED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SRI_PARSE`"
            },
            {
              "textRaw": "`ERR_STREAM_ALREADY_FINISHED`",
              "name": "`err_stream_already_finished`",
              "desc": "<p>A stream method was called that cannot complete because the stream was\nfinished.</p>\n<p><a id=\"ERR_STREAM_CANNOT_PIPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_ALREADY_FINISHED`"
            },
            {
              "textRaw": "`ERR_STREAM_CANNOT_PIPE`",
              "name": "`err_stream_cannot_pipe`",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#readablepipedestination-options\"><code>stream.pipe()</code></a> on a <a href=\"stream.html#class-streamwritable\"><code>Writable</code></a> stream.</p>\n<p><a id=\"ERR_STREAM_DESTROYED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_CANNOT_PIPE`"
            },
            {
              "textRaw": "`ERR_STREAM_DESTROYED`",
              "name": "`err_stream_destroyed`",
              "desc": "<p>A stream method was called that cannot complete because the stream was\ndestroyed using <code>stream.destroy()</code>.</p>\n<p><a id=\"ERR_STREAM_NULL_VALUES\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_DESTROYED`"
            },
            {
              "textRaw": "`ERR_STREAM_NULL_VALUES`",
              "name": "`err_stream_null_values`",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#writablewritechunk-encoding-callback\"><code>stream.write()</code></a> with a <code>null</code> chunk.</p>\n<p><a id=\"ERR_STREAM_PREMATURE_CLOSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_NULL_VALUES`"
            },
            {
              "textRaw": "`ERR_STREAM_PREMATURE_CLOSE`",
              "name": "`err_stream_premature_close`",
              "desc": "<p>An error returned by <code>stream.finished()</code> and <code>stream.pipeline()</code>, when a stream\nor a pipeline ends non gracefully with no explicit error.</p>\n<p><a id=\"ERR_STREAM_PUSH_AFTER_EOF\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_PREMATURE_CLOSE`"
            },
            {
              "textRaw": "`ERR_STREAM_PUSH_AFTER_EOF`",
              "name": "`err_stream_push_after_eof`",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#readablepushchunk-encoding\"><code>stream.push()</code></a> after a <code>null</code>(EOF) had been\npushed to the stream.</p>\n<p><a id=\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_PUSH_AFTER_EOF`"
            },
            {
              "textRaw": "`ERR_STREAM_UNSHIFT_AFTER_END_EVENT`",
              "name": "`err_stream_unshift_after_end_event`",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#readableunshiftchunk-encoding\"><code>stream.unshift()</code></a> after the <code>'end'</code> event was\nemitted.</p>\n<p><a id=\"ERR_STREAM_WRAP\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_UNSHIFT_AFTER_END_EVENT`"
            },
            {
              "textRaw": "`ERR_STREAM_WRAP`",
              "name": "`err_stream_wrap`",
              "desc": "<p>Prevents an abort if a string decoder was set on the Socket or if the decoder\nis in <code>objectMode</code>.</p>\n<pre><code class=\"language-js\">const Socket = require('node:net').Socket;\nconst instance = new Socket();\n\ninstance.setEncoding('utf8');\n</code></pre>\n<p><a id=\"ERR_STREAM_WRITE_AFTER_END\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_WRAP`"
            },
            {
              "textRaw": "`ERR_STREAM_WRITE_AFTER_END`",
              "name": "`err_stream_write_after_end`",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#writablewritechunk-encoding-callback\"><code>stream.write()</code></a> after <code>stream.end()</code> has been\ncalled.</p>\n<p><a id=\"ERR_STRING_TOO_LONG\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_WRITE_AFTER_END`"
            },
            {
              "textRaw": "`ERR_STRING_TOO_LONG`",
              "name": "`err_string_too_long`",
              "desc": "<p>An attempt has been made to create a string longer than the maximum allowed\nlength.</p>\n<p><a id=\"ERR_SYNTHETIC\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STRING_TOO_LONG`"
            },
            {
              "textRaw": "`ERR_SYNTHETIC`",
              "name": "`err_synthetic`",
              "desc": "<p>An artificial error object used to capture the call stack for diagnostic\nreports.</p>\n<p><a id=\"ERR_SYSTEM_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SYNTHETIC`"
            },
            {
              "textRaw": "`ERR_SYSTEM_ERROR`",
              "name": "`err_system_error`",
              "desc": "<p>An unspecified or non-specific system error has occurred within the Node.js\nprocess. The error object will have an <code>err.info</code> object property with\nadditional details.</p>\n<p><a id=\"ERR_TAP_LEXER_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SYSTEM_ERROR`"
            },
            {
              "textRaw": "`ERR_TAP_LEXER_ERROR`",
              "name": "`err_tap_lexer_error`",
              "desc": "<p>An error representing a failing lexer state.</p>\n<p><a id=\"ERR_TAP_PARSER_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TAP_LEXER_ERROR`"
            },
            {
              "textRaw": "`ERR_TAP_PARSER_ERROR`",
              "name": "`err_tap_parser_error`",
              "desc": "<p>An error representing a failing parser state. Additional information about\nthe token causing the error is available via the <code>cause</code> property.</p>\n<p><a id=\"ERR_TAP_VALIDATION_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TAP_PARSER_ERROR`"
            },
            {
              "textRaw": "`ERR_TAP_VALIDATION_ERROR`",
              "name": "`err_tap_validation_error`",
              "desc": "<p>This error represents a failed TAP validation.</p>\n<p><a id=\"ERR_TEST_FAILURE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TAP_VALIDATION_ERROR`"
            },
            {
              "textRaw": "`ERR_TEST_FAILURE`",
              "name": "`err_test_failure`",
              "desc": "<p>This error represents a failed test. Additional information about the failure\nis available via the <code>cause</code> property. The <code>failureType</code> property specifies\nwhat the test was doing when the failure occurred.</p>\n<p><a id=\"ERR_TLS_CERT_ALTNAME_FORMAT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TEST_FAILURE`"
            },
            {
              "textRaw": "`ERR_TLS_CERT_ALTNAME_FORMAT`",
              "name": "`err_tls_cert_altname_format`",
              "desc": "<p>This error is thrown by <code>checkServerIdentity</code> if a user-supplied\n<code>subjectaltname</code> property violates encoding rules. Certificate objects produced\nby Node.js itself always comply with encoding rules and will never cause\nthis error.</p>\n<p><a id=\"ERR_TLS_CERT_ALTNAME_INVALID\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_CERT_ALTNAME_FORMAT`"
            },
            {
              "textRaw": "`ERR_TLS_CERT_ALTNAME_INVALID`",
              "name": "`err_tls_cert_altname_invalid`",
              "desc": "<p>While using TLS, the host name/IP of the peer did not match any of the\n<code>subjectAltNames</code> in its certificate.</p>\n<p><a id=\"ERR_TLS_DH_PARAM_SIZE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_CERT_ALTNAME_INVALID`"
            },
            {
              "textRaw": "`ERR_TLS_DH_PARAM_SIZE`",
              "name": "`err_tls_dh_param_size`",
              "desc": "<p>While using TLS, the parameter offered for the Diffie-Hellman (<code>DH</code>)\nkey-agreement protocol is too small. By default, the key length must be greater\nthan or equal to 1024 bits to avoid vulnerabilities, even though it is strongly\nrecommended to use 2048 bits or larger for stronger security.</p>\n<p><a id=\"ERR_TLS_HANDSHAKE_TIMEOUT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_DH_PARAM_SIZE`"
            },
            {
              "textRaw": "`ERR_TLS_HANDSHAKE_TIMEOUT`",
              "name": "`err_tls_handshake_timeout`",
              "desc": "<p>A TLS/SSL handshake timed out. In this case, the server must also abort the\nconnection.</p>\n<p><a id=\"ERR_TLS_INVALID_CONTEXT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_HANDSHAKE_TIMEOUT`"
            },
            {
              "textRaw": "`ERR_TLS_INVALID_CONTEXT`",
              "name": "`err_tls_invalid_context`",
              "meta": {
                "added": [
                  "v13.3.0"
                ],
                "changes": []
              },
              "desc": "<p>The context must be a <code>SecureContext</code>.</p>\n<p><a id=\"ERR_TLS_INVALID_PROTOCOL_METHOD\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_INVALID_CONTEXT`"
            },
            {
              "textRaw": "`ERR_TLS_INVALID_PROTOCOL_METHOD`",
              "name": "`err_tls_invalid_protocol_method`",
              "desc": "<p>The specified  <code>secureProtocol</code> method is invalid. It is  either unknown, or\ndisabled because it is insecure.</p>\n<p><a id=\"ERR_TLS_INVALID_PROTOCOL_VERSION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_INVALID_PROTOCOL_METHOD`"
            },
            {
              "textRaw": "`ERR_TLS_INVALID_PROTOCOL_VERSION`",
              "name": "`err_tls_invalid_protocol_version`",
              "desc": "<p>Valid TLS protocol versions are <code>'TLSv1'</code>, <code>'TLSv1.1'</code>, or <code>'TLSv1.2'</code>.</p>\n<p><a id=\"ERR_TLS_INVALID_STATE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_INVALID_PROTOCOL_VERSION`"
            },
            {
              "textRaw": "`ERR_TLS_INVALID_STATE`",
              "name": "`err_tls_invalid_state`",
              "meta": {
                "added": [
                  "v13.10.0",
                  "v12.17.0"
                ],
                "changes": []
              },
              "desc": "<p>The TLS socket must be connected and securely established. Ensure the 'secure'\nevent is emitted before continuing.</p>\n<p><a id=\"ERR_TLS_PROTOCOL_VERSION_CONFLICT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_INVALID_STATE`"
            },
            {
              "textRaw": "`ERR_TLS_PROTOCOL_VERSION_CONFLICT`",
              "name": "`err_tls_protocol_version_conflict`",
              "desc": "<p>Attempting to set a TLS protocol <code>minVersion</code> or <code>maxVersion</code> conflicts with an\nattempt to set the <code>secureProtocol</code> explicitly. Use one mechanism or the other.</p>\n<p><a id=\"ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_PROTOCOL_VERSION_CONFLICT`"
            },
            {
              "textRaw": "`ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED`",
              "name": "`err_tls_psk_set_identiy_hint_failed`",
              "desc": "<p>Failed to set PSK identity hint. Hint may be too long.</p>\n<p><a id=\"ERR_TLS_RENEGOTIATION_DISABLED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED`"
            },
            {
              "textRaw": "`ERR_TLS_RENEGOTIATION_DISABLED`",
              "name": "`err_tls_renegotiation_disabled`",
              "desc": "<p>An attempt was made to renegotiate TLS on a socket instance with renegotiation\ndisabled.</p>\n<p><a id=\"ERR_TLS_REQUIRED_SERVER_NAME\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_RENEGOTIATION_DISABLED`"
            },
            {
              "textRaw": "`ERR_TLS_REQUIRED_SERVER_NAME`",
              "name": "`err_tls_required_server_name`",
              "desc": "<p>While using TLS, the <code>server.addContext()</code> method was called without providing\na host name in the first parameter.</p>\n<p><a id=\"ERR_TLS_SESSION_ATTACK\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_REQUIRED_SERVER_NAME`"
            },
            {
              "textRaw": "`ERR_TLS_SESSION_ATTACK`",
              "name": "`err_tls_session_attack`",
              "desc": "<p>An excessive amount of TLS renegotiations is detected, which is a potential\nvector for denial-of-service attacks.</p>\n<p><a id=\"ERR_TLS_SNI_FROM_SERVER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_SESSION_ATTACK`"
            },
            {
              "textRaw": "`ERR_TLS_SNI_FROM_SERVER`",
              "name": "`err_tls_sni_from_server`",
              "desc": "<p>An attempt was made to issue Server Name Indication from a TLS server-side\nsocket, which is only valid from a client.</p>\n<p><a id=\"ERR_TRACE_EVENTS_CATEGORY_REQUIRED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_SNI_FROM_SERVER`"
            },
            {
              "textRaw": "`ERR_TRACE_EVENTS_CATEGORY_REQUIRED`",
              "name": "`err_trace_events_category_required`",
              "desc": "<p>The <code>trace_events.createTracing()</code> method requires at least one trace event\ncategory.</p>\n<p><a id=\"ERR_TRACE_EVENTS_UNAVAILABLE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TRACE_EVENTS_CATEGORY_REQUIRED`"
            },
            {
              "textRaw": "`ERR_TRACE_EVENTS_UNAVAILABLE`",
              "name": "`err_trace_events_unavailable`",
              "desc": "<p>The <code>node:trace_events</code> module could not be loaded because Node.js was compiled\nwith the <code>--without-v8-platform</code> flag.</p>\n<p><a id=\"ERR_TRANSFORM_ALREADY_TRANSFORMING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TRACE_EVENTS_UNAVAILABLE`"
            },
            {
              "textRaw": "`ERR_TRANSFORM_ALREADY_TRANSFORMING`",
              "name": "`err_transform_already_transforming`",
              "desc": "<p>A <code>Transform</code> stream finished while it was still transforming.</p>\n<p><a id=\"ERR_TRANSFORM_WITH_LENGTH_0\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TRANSFORM_ALREADY_TRANSFORMING`"
            },
            {
              "textRaw": "`ERR_TRANSFORM_WITH_LENGTH_0`",
              "name": "`err_transform_with_length_0`",
              "desc": "<p>A <code>Transform</code> stream finished with data still in the write buffer.</p>\n<p><a id=\"ERR_TTY_INIT_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TRANSFORM_WITH_LENGTH_0`"
            },
            {
              "textRaw": "`ERR_TTY_INIT_FAILED`",
              "name": "`err_tty_init_failed`",
              "desc": "<p>The initialization of a TTY failed due to a system error.</p>\n<p><a id=\"ERR_UNAVAILABLE_DURING_EXIT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TTY_INIT_FAILED`"
            },
            {
              "textRaw": "`ERR_UNAVAILABLE_DURING_EXIT`",
              "name": "`err_unavailable_during_exit`",
              "desc": "<p>Function was called within a <a href=\"process.html#event-exit\"><code>process.on('exit')</code></a> handler that shouldn't be\ncalled within <a href=\"process.html#event-exit\"><code>process.on('exit')</code></a> handler.</p>\n<p><a id=\"ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNAVAILABLE_DURING_EXIT`"
            },
            {
              "textRaw": "`ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET`",
              "name": "`err_uncaught_exception_capture_already_set`",
              "desc": "<p><a href=\"process.html#processsetuncaughtexceptioncapturecallbackfn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> was called twice,\nwithout first resetting the callback to <code>null</code>.</p>\n<p>This error is designed to prevent accidentally overwriting a callback registered\nfrom another module.</p>\n<p><a id=\"ERR_UNESCAPED_CHARACTERS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET`"
            },
            {
              "textRaw": "`ERR_UNESCAPED_CHARACTERS`",
              "name": "`err_unescaped_characters`",
              "desc": "<p>A string that contained unescaped characters was received.</p>\n<p><a id=\"ERR_UNHANDLED_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNESCAPED_CHARACTERS`"
            },
            {
              "textRaw": "`ERR_UNHANDLED_ERROR`",
              "name": "`err_unhandled_error`",
              "desc": "<p>An unhandled error occurred (for instance, when an <code>'error'</code> event is emitted\nby an <a href=\"events.html#class-eventemitter\"><code>EventEmitter</code></a> but an <code>'error'</code> handler is not registered).</p>\n<p><a id=\"ERR_UNKNOWN_BUILTIN_MODULE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNHANDLED_ERROR`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_BUILTIN_MODULE`",
              "name": "`err_unknown_builtin_module`",
              "desc": "<p>Used to identify a specific kind of internal Node.js error that should not\ntypically be triggered by user code. Instances of this error point to an\ninternal bug within the Node.js binary itself.</p>\n<p><a id=\"ERR_UNKNOWN_CREDENTIAL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_BUILTIN_MODULE`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_CREDENTIAL`",
              "name": "`err_unknown_credential`",
              "desc": "<p>A Unix group or user identifier that does not exist was passed.</p>\n<p><a id=\"ERR_UNKNOWN_ENCODING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_CREDENTIAL`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_ENCODING`",
              "name": "`err_unknown_encoding`",
              "desc": "<p>An invalid or unknown encoding option was passed to an API.</p>\n<p><a id=\"ERR_UNKNOWN_FILE_EXTENSION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_ENCODING`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_FILE_EXTENSION`",
              "name": "`err_unknown_file_extension`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to load a module with an unknown or unsupported file\nextension.</p>\n<p><a id=\"ERR_UNKNOWN_MODULE_FORMAT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_FILE_EXTENSION`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_MODULE_FORMAT`",
              "name": "`err_unknown_module_format`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to load a module with an unknown or unsupported format.</p>\n<p><a id=\"ERR_UNKNOWN_SIGNAL\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_MODULE_FORMAT`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_SIGNAL`",
              "name": "`err_unknown_signal`",
              "desc": "<p>An invalid or unknown process signal was passed to an API expecting a valid\nsignal (such as <a href=\"child_process.html#subprocesskillsignal\"><code>subprocess.kill()</code></a>).</p>\n<p><a id=\"ERR_UNSUPPORTED_DIR_IMPORT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_SIGNAL`"
            },
            {
              "textRaw": "`ERR_UNSUPPORTED_DIR_IMPORT`",
              "name": "`err_unsupported_dir_import`",
              "desc": "<p><code>import</code> a directory URL is unsupported. Instead,\n<a href=\"packages.html#self-referencing-a-package-using-its-name\">self-reference a package using its name</a> and <a href=\"packages.html#subpath-exports\">define a custom subpath</a> in\nthe <a href=\"packages.html#exports\"><code>\"exports\"</code></a> field of the <a href=\"packages.html#nodejs-packagejson-field-definitions\"><code>package.json</code></a> file.</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">import './'; // unsupported\nimport './index.js'; // supported\nimport 'package-name'; // supported\n</code></pre>\n<p><a id=\"ERR_UNSUPPORTED_ESM_URL_SCHEME\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNSUPPORTED_DIR_IMPORT`"
            },
            {
              "textRaw": "`ERR_UNSUPPORTED_ESM_URL_SCHEME`",
              "name": "`err_unsupported_esm_url_scheme`",
              "desc": "<p><code>import</code> with URL schemes other than <code>file</code> and <code>data</code> is unsupported.</p>\n<p><a id=\"ERR_USE_AFTER_CLOSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNSUPPORTED_ESM_URL_SCHEME`"
            },
            {
              "textRaw": "`ERR_USE_AFTER_CLOSE`",
              "name": "`err_use_after_close`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to use something that was already closed.</p>\n<p><a id=\"ERR_VALID_PERFORMANCE_ENTRY_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_USE_AFTER_CLOSE`"
            },
            {
              "textRaw": "`ERR_VALID_PERFORMANCE_ENTRY_TYPE`",
              "name": "`err_valid_performance_entry_type`",
              "desc": "<p>While using the Performance Timing API (<code>perf_hooks</code>), no valid performance\nentry types are found.</p>\n<p><a id=\"ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VALID_PERFORMANCE_ENTRY_TYPE`"
            },
            {
              "textRaw": "`ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING`",
              "name": "`err_vm_dynamic_import_callback_missing`",
              "desc": "<p>A dynamic import callback was not specified.</p>\n<p><a id=\"ERR_VM_MODULE_ALREADY_LINKED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_ALREADY_LINKED`",
              "name": "`err_vm_module_already_linked`",
              "desc": "<p>The module attempted to be linked is not eligible for linking, because of one of\nthe following reasons:</p>\n<ul>\n<li>It has already been linked (<code>linkingStatus</code> is <code>'linked'</code>)</li>\n<li>It is being linked (<code>linkingStatus</code> is <code>'linking'</code>)</li>\n<li>Linking has failed for this module (<code>linkingStatus</code> is <code>'errored'</code>)</li>\n</ul>\n<p><a id=\"ERR_VM_MODULE_CACHED_DATA_REJECTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_ALREADY_LINKED`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_CACHED_DATA_REJECTED`",
              "name": "`err_vm_module_cached_data_rejected`",
              "desc": "<p>The <code>cachedData</code> option passed to a module constructor is invalid.</p>\n<p><a id=\"ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_CACHED_DATA_REJECTED`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA`",
              "name": "`err_vm_module_cannot_create_cached_data`",
              "desc": "<p>Cached data cannot be created for modules which have already been evaluated.</p>\n<p><a id=\"ERR_VM_MODULE_DIFFERENT_CONTEXT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_DIFFERENT_CONTEXT`",
              "name": "`err_vm_module_different_context`",
              "desc": "<p>The module being returned from the linker function is from a different context\nthan the parent module. Linked modules must share the same context.</p>\n<p><a id=\"ERR_VM_MODULE_LINK_FAILURE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_DIFFERENT_CONTEXT`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_LINK_FAILURE`",
              "name": "`err_vm_module_link_failure`",
              "desc": "<p>The module was unable to be linked due to a failure.</p>\n<p><a id=\"ERR_VM_MODULE_NOT_MODULE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_LINK_FAILURE`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_NOT_MODULE`",
              "name": "`err_vm_module_not_module`",
              "desc": "<p>The fulfilled value of a linking promise is not a <code>vm.Module</code> object.</p>\n<p><a id=\"ERR_VM_MODULE_STATUS\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_NOT_MODULE`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_STATUS`",
              "name": "`err_vm_module_status`",
              "desc": "<p>The current module's status does not allow for this operation. The specific\nmeaning of the error depends on the specific function.</p>\n<p><a id=\"ERR_WASI_ALREADY_STARTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_STATUS`"
            },
            {
              "textRaw": "`ERR_WASI_ALREADY_STARTED`",
              "name": "`err_wasi_already_started`",
              "desc": "<p>The WASI instance has already started.</p>\n<p><a id=\"ERR_WASI_NOT_STARTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WASI_ALREADY_STARTED`"
            },
            {
              "textRaw": "`ERR_WASI_NOT_STARTED`",
              "name": "`err_wasi_not_started`",
              "desc": "<p>The WASI instance has not been started.</p>\n<p><a id=\"ERR_WEBASSEMBLY_RESPONSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WASI_NOT_STARTED`"
            },
            {
              "textRaw": "`ERR_WEBASSEMBLY_RESPONSE`",
              "name": "`err_webassembly_response`",
              "meta": {
                "added": [
                  "v18.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>Response</code> that has been passed to <code>WebAssembly.compileStreaming</code> or to\n<code>WebAssembly.instantiateStreaming</code> is not a valid WebAssembly response.</p>\n<p><a id=\"ERR_WORKER_INIT_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WEBASSEMBLY_RESPONSE`"
            },
            {
              "textRaw": "`ERR_WORKER_INIT_FAILED`",
              "name": "`err_worker_init_failed`",
              "desc": "<p>The <code>Worker</code> initialization failed.</p>\n<p><a id=\"ERR_WORKER_INVALID_EXEC_ARGV\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_INIT_FAILED`"
            },
            {
              "textRaw": "`ERR_WORKER_INVALID_EXEC_ARGV`",
              "name": "`err_worker_invalid_exec_argv`",
              "desc": "<p>The <code>execArgv</code> option passed to the <code>Worker</code> constructor contains\ninvalid flags.</p>\n<p><a id=\"ERR_WORKER_NOT_RUNNING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_INVALID_EXEC_ARGV`"
            },
            {
              "textRaw": "`ERR_WORKER_NOT_RUNNING`",
              "name": "`err_worker_not_running`",
              "desc": "<p>An operation failed because the <code>Worker</code> instance is not currently running.</p>\n<p><a id=\"ERR_WORKER_OUT_OF_MEMORY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_NOT_RUNNING`"
            },
            {
              "textRaw": "`ERR_WORKER_OUT_OF_MEMORY`",
              "name": "`err_worker_out_of_memory`",
              "desc": "<p>The <code>Worker</code> instance terminated because it reached its memory limit.</p>\n<p><a id=\"ERR_WORKER_PATH\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_OUT_OF_MEMORY`"
            },
            {
              "textRaw": "`ERR_WORKER_PATH`",
              "name": "`err_worker_path`",
              "desc": "<p>The path for the main script of a worker is neither an absolute path\nnor a relative path starting with <code>./</code> or <code>../</code>.</p>\n<p><a id=\"ERR_WORKER_UNSERIALIZABLE_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_PATH`"
            },
            {
              "textRaw": "`ERR_WORKER_UNSERIALIZABLE_ERROR`",
              "name": "`err_worker_unserializable_error`",
              "desc": "<p>All attempts at serializing an uncaught exception from a worker thread failed.</p>\n<p><a id=\"ERR_WORKER_UNSUPPORTED_OPERATION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_UNSERIALIZABLE_ERROR`"
            },
            {
              "textRaw": "`ERR_WORKER_UNSUPPORTED_OPERATION`",
              "name": "`err_worker_unsupported_operation`",
              "desc": "<p>The requested functionality is not supported in worker threads.</p>\n<p><a id=\"ERR_ZLIB_INITIALIZATION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_UNSUPPORTED_OPERATION`"
            },
            {
              "textRaw": "`ERR_ZLIB_INITIALIZATION_FAILED`",
              "name": "`err_zlib_initialization_failed`",
              "desc": "<p>Creation of a <a href=\"zlib.html\"><code>zlib</code></a> object failed due to incorrect configuration.</p>\n<p><a id=\"HPE_HEADER_OVERFLOW\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ZLIB_INITIALIZATION_FAILED`"
            },
            {
              "textRaw": "`HPE_HEADER_OVERFLOW`",
              "name": "`hpe_header_overflow`",
              "meta": {
                "changes": [
                  {
                    "version": [
                      "v11.4.0",
                      "v10.15.0"
                    ],
                    "commit": "186035243fad247e3955f",
                    "pr-url": "https://github.com/nodejs-private/node-private/pull/143",
                    "description": "Max header size in `http_parser` was set to 8 KiB."
                  }
                ]
              },
              "desc": "<p>Too much HTTP header data was received. In order to protect against malicious or\nmalconfigured clients, if more than 8 KiB of HTTP header data is received then\nHTTP parsing will abort without a request or response object being created, and\nan <code>Error</code> with this code will be emitted.</p>\n<p><a id=\"HPE_UNEXPECTED_CONTENT_LENGTH\"></a></p>",
              "type": "module",
              "displayName": "`HPE_HEADER_OVERFLOW`"
            },
            {
              "textRaw": "`HPE_UNEXPECTED_CONTENT_LENGTH`",
              "name": "`hpe_unexpected_content_length`",
              "desc": "<p>Server is sending both a <code>Content-Length</code> header and <code>Transfer-Encoding: chunked</code>.</p>\n<p><code>Transfer-Encoding: chunked</code> allows the server to maintain an HTTP persistent\nconnection for dynamically generated content.\nIn this case, the <code>Content-Length</code> HTTP header cannot be used.</p>\n<p>Use <code>Content-Length</code> or <code>Transfer-Encoding: chunked</code>.</p>\n<p><a id=\"MODULE_NOT_FOUND\"></a></p>",
              "type": "module",
              "displayName": "`HPE_UNEXPECTED_CONTENT_LENGTH`"
            },
            {
              "textRaw": "`MODULE_NOT_FOUND`",
              "name": "`module_not_found`",
              "meta": {
                "changes": [
                  {
                    "version": "v12.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/25690",
                    "description": "Added `requireStack` property."
                  }
                ]
              },
              "desc": "<p>A module file could not be resolved by the CommonJS modules loader while\nattempting a <a href=\"modules.html#requireid\"><code>require()</code></a> operation or when loading the program entry point.</p>",
              "type": "module",
              "displayName": "`MODULE_NOT_FOUND`"
            }
          ],
          "type": "misc",
          "displayName": "Node.js error codes"
        },
        {
          "textRaw": "Legacy Node.js error codes",
          "name": "legacy_node.js_error_codes",
          "stability": 0,
          "stabilityText": "Deprecated. These error codes are either inconsistent, or have been removed.",
          "desc": "<p><a id=\"ERR_CANNOT_TRANSFER_OBJECT\"></a></p>",
          "modules": [
            {
              "textRaw": "`ERR_CANNOT_TRANSFER_OBJECT`",
              "name": "`err_cannot_transfer_object`",
              "desc": "<!--\nadded: v10.5.0\nremoved: v12.5.0\n-->\n<p>The value passed to <code>postMessage()</code> contained an object that is not supported\nfor transferring.</p>\n<p><a id=\"ERR_CRYPTO_HASH_DIGEST_NO_UTF16\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CANNOT_TRANSFER_OBJECT`"
            },
            {
              "textRaw": "`ERR_CRYPTO_HASH_DIGEST_NO_UTF16`",
              "name": "`err_crypto_hash_digest_no_utf16`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v12.12.0"
                ],
                "changes": []
              },
              "desc": "<p>The UTF-16 encoding was used with <a href=\"crypto.html#hashdigestencoding\"><code>hash.digest()</code></a>. While the\n<code>hash.digest()</code> method does allow an <code>encoding</code> argument to be passed in,\ncausing the method to return a string rather than a <code>Buffer</code>, the UTF-16\nencoding (e.g. <code>ucs</code> or <code>utf16le</code>) is not supported.</p>\n<p><a id=\"ERR_HTTP2_FRAME_ERROR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_CRYPTO_HASH_DIGEST_NO_UTF16`"
            },
            {
              "textRaw": "`ERR_HTTP2_FRAME_ERROR`",
              "name": "`err_http2_frame_error`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when a failure occurs sending an individual frame on the HTTP/2\nsession.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_OBJECT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_FRAME_ERROR`"
            },
            {
              "textRaw": "`ERR_HTTP2_HEADERS_OBJECT`",
              "name": "`err_http2_headers_object`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when an HTTP/2 Headers Object is expected.</p>\n<p><a id=\"ERR_HTTP2_HEADER_REQUIRED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_HEADERS_OBJECT`"
            },
            {
              "textRaw": "`ERR_HTTP2_HEADER_REQUIRED`",
              "name": "`err_http2_header_required`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when a required header is missing in an HTTP/2 message.</p>\n<p><a id=\"ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_HEADER_REQUIRED`"
            },
            {
              "textRaw": "`ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND`",
              "name": "`err_http2_info_headers_after_respond`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>HTTP/2 informational headers must only be sent <em>prior</em> to calling the\n<code>Http2Stream.prototype.respond()</code> method.</p>\n<p><a id=\"ERR_HTTP2_STREAM_CLOSED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND`"
            },
            {
              "textRaw": "`ERR_HTTP2_STREAM_CLOSED`",
              "name": "`err_http2_stream_closed`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when an action has been performed on an HTTP/2 Stream that has already\nbeen closed.</p>\n<p><a id=\"ERR_HTTP_INVALID_CHAR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP2_STREAM_CLOSED`"
            },
            {
              "textRaw": "`ERR_HTTP_INVALID_CHAR`",
              "name": "`err_http_invalid_char`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when an invalid character is found in an HTTP response status message\n(reason phrase).</p>\n<p><a id=\"ERR_INDEX_OUT_OF_RANGE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_HTTP_INVALID_CHAR`"
            },
            {
              "textRaw": "`ERR_INDEX_OUT_OF_RANGE`",
              "name": "`err_index_out_of_range`",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "removed": [
                  "v11.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A given index was out of the accepted range (e.g. negative offsets).</p>\n<p><a id=\"ERR_INVALID_OPT_VALUE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INDEX_OUT_OF_RANGE`"
            },
            {
              "textRaw": "`ERR_INVALID_OPT_VALUE`",
              "name": "`err_invalid_opt_value`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "removed": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid or unexpected value was passed in an options object.</p>\n<p><a id=\"ERR_INVALID_OPT_VALUE_ENCODING\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_OPT_VALUE`"
            },
            {
              "textRaw": "`ERR_INVALID_OPT_VALUE_ENCODING`",
              "name": "`err_invalid_opt_value_encoding`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An invalid or unknown file encoding was passed.</p>\n<p><a id=\"ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST\"></a></p>",
              "type": "module",
              "displayName": "`ERR_INVALID_OPT_VALUE_ENCODING`"
            },
            {
              "textRaw": "`ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST`",
              "name": "`err_missing_message_port_in_transfer_list`",
              "meta": {
                "removed": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>This error code was replaced by <a href=\"#err_missing_transferable_in_transfer_list\"><code>ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST</code></a>\nin Node.js v15.0.0, because it is no longer accurate as other types of\ntransferable objects also exist now.</p>\n<p><a id=\"ERR_NAPI_CONS_PROTOTYPE_OBJECT\"></a></p>",
              "type": "module",
              "displayName": "`ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST`"
            },
            {
              "textRaw": "`ERR_NAPI_CONS_PROTOTYPE_OBJECT`",
              "name": "`err_napi_cons_prototype_object`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used by the <code>Node-API</code> when <code>Constructor.prototype</code> is not an object.</p>\n<p><a id=\"ERR_NETWORK_IMPORT_BAD_RESPONSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NAPI_CONS_PROTOTYPE_OBJECT`"
            },
            {
              "textRaw": "`ERR_NETWORK_IMPORT_BAD_RESPONSE`",
              "name": "`err_network_import_bad_response`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>Response was received but was invalid when importing a module over the network.</p>\n<p><a id=\"ERR_NETWORK_IMPORT_DISALLOWED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NETWORK_IMPORT_BAD_RESPONSE`"
            },
            {
              "textRaw": "`ERR_NETWORK_IMPORT_DISALLOWED`",
              "name": "`err_network_import_disallowed`",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>A network module attempted to load another module that it is not allowed to\nload. Likely this restriction is for security reasons.</p>\n<p><a id=\"ERR_NO_LONGER_SUPPORTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NETWORK_IMPORT_DISALLOWED`"
            },
            {
              "textRaw": "`ERR_NO_LONGER_SUPPORTED`",
              "name": "`err_no_longer_supported`",
              "desc": "<p>A Node.js API was called in an unsupported manner, such as\n<code>Buffer.write(string, encoding, offset[, length])</code>.</p>\n<p><a id=\"ERR_OPERATION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_NO_LONGER_SUPPORTED`"
            },
            {
              "textRaw": "`ERR_OPERATION_FAILED`",
              "name": "`err_operation_failed`",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An operation failed. This is typically used to signal the general failure\nof an asynchronous operation.</p>\n<p><a id=\"ERR_OUTOFMEMORY\"></a></p>",
              "type": "module",
              "displayName": "`ERR_OPERATION_FAILED`"
            },
            {
              "textRaw": "`ERR_OUTOFMEMORY`",
              "name": "`err_outofmemory`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used generically to identify that an operation caused an out of memory\ncondition.</p>\n<p><a id=\"ERR_PARSE_HISTORY_DATA\"></a></p>",
              "type": "module",
              "displayName": "`ERR_OUTOFMEMORY`"
            },
            {
              "textRaw": "`ERR_PARSE_HISTORY_DATA`",
              "name": "`err_parse_history_data`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>node:repl</code> module was unable to parse data from the REPL history file.</p>\n<p><a id=\"ERR_SOCKET_CANNOT_SEND\"></a></p>",
              "type": "module",
              "displayName": "`ERR_PARSE_HISTORY_DATA`"
            },
            {
              "textRaw": "`ERR_SOCKET_CANNOT_SEND`",
              "name": "`err_socket_cannot_send`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v14.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Data could not be sent on a socket.</p>\n<p><a id=\"ERR_STDERR_CLOSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_SOCKET_CANNOT_SEND`"
            },
            {
              "textRaw": "`ERR_STDERR_CLOSE`",
              "name": "`err_stderr_close`",
              "meta": {
                "removed": [
                  "v10.12.0"
                ],
                "changes": [
                  {
                    "version": "v10.12.0",
                    "pr-url": "https://github.com/nodejs/node/pull/23053",
                    "description": "Rather than emitting an error, `process.stderr.end()` now only closes the stream side but not the underlying resource, making this error obsolete."
                  }
                ]
              },
              "desc": "<p>An attempt was made to close the <code>process.stderr</code> stream. By design, Node.js\ndoes not allow <code>stdout</code> or <code>stderr</code> streams to be closed by user code.</p>\n<p><a id=\"ERR_STDOUT_CLOSE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STDERR_CLOSE`"
            },
            {
              "textRaw": "`ERR_STDOUT_CLOSE`",
              "name": "`err_stdout_close`",
              "meta": {
                "removed": [
                  "v10.12.0"
                ],
                "changes": [
                  {
                    "version": "v10.12.0",
                    "pr-url": "https://github.com/nodejs/node/pull/23053",
                    "description": "Rather than emitting an error, `process.stderr.end()` now only closes the stream side but not the underlying resource, making this error obsolete."
                  }
                ]
              },
              "desc": "<p>An attempt was made to close the <code>process.stdout</code> stream. By design, Node.js\ndoes not allow <code>stdout</code> or <code>stderr</code> streams to be closed by user code.</p>\n<p><a id=\"ERR_STREAM_READ_NOT_IMPLEMENTED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STDOUT_CLOSE`"
            },
            {
              "textRaw": "`ERR_STREAM_READ_NOT_IMPLEMENTED`",
              "name": "`err_stream_read_not_implemented`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when an attempt is made to use a readable stream that has not implemented\n<a href=\"stream.html#readable_readsize\"><code>readable._read()</code></a>.</p>\n<p><a id=\"ERR_TLS_RENEGOTIATION_FAILED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_STREAM_READ_NOT_IMPLEMENTED`"
            },
            {
              "textRaw": "`ERR_TLS_RENEGOTIATION_FAILED`",
              "name": "`err_tls_renegotiation_failed`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when a TLS renegotiation request has failed in a non-specific way.</p>\n<p><a id=\"ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TLS_RENEGOTIATION_FAILED`"
            },
            {
              "textRaw": "`ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER`",
              "name": "`err_transferring_externalized_sharedarraybuffer`",
              "meta": {
                "added": [
                  "v10.5.0"
                ],
                "removed": [
                  "v14.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A <code>SharedArrayBuffer</code> whose memory is not managed by the JavaScript engine\nor by Node.js was encountered during serialization. Such a <code>SharedArrayBuffer</code>\ncannot be serialized.</p>\n<p>This can only happen when native addons create <code>SharedArrayBuffer</code>s in\n\"externalized\" mode, or put existing <code>SharedArrayBuffer</code> into externalized mode.</p>\n<p><a id=\"ERR_UNKNOWN_STDIN_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_STDIN_TYPE`",
              "name": "`err_unknown_stdin_type`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "removed": [
                  "v11.7.0"
                ],
                "changes": []
              },
              "desc": "<p>An attempt was made to launch a Node.js process with an unknown <code>stdin</code> file\ntype. This error is usually an indication of a bug within Node.js itself,\nalthough it is possible for user code to trigger it.</p>\n<p><a id=\"ERR_UNKNOWN_STREAM_TYPE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_STDIN_TYPE`"
            },
            {
              "textRaw": "`ERR_UNKNOWN_STREAM_TYPE`",
              "name": "`err_unknown_stream_type`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "removed": [
                  "v11.7.0"
                ],
                "changes": []
              },
              "desc": "<p>An attempt was made to launch a Node.js process with an unknown <code>stdout</code> or\n<code>stderr</code> file type. This error is usually an indication of a bug within Node.js\nitself, although it is possible for user code to trigger it.</p>\n<p><a id=\"ERR_V8BREAKITERATOR\"></a></p>",
              "type": "module",
              "displayName": "`ERR_UNKNOWN_STREAM_TYPE`"
            },
            {
              "textRaw": "`ERR_V8BREAKITERATOR`",
              "name": "`err_v8breakiterator`",
              "desc": "<p>The V8 <code>BreakIterator</code> API was used but the full ICU data set is not installed.</p>\n<p><a id=\"ERR_VALUE_OUT_OF_RANGE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_V8BREAKITERATOR`"
            },
            {
              "textRaw": "`ERR_VALUE_OUT_OF_RANGE`",
              "name": "`err_value_out_of_range`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when a given value is out of the accepted range.</p>\n<p><a id=\"ERR_VM_MODULE_NOT_LINKED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VALUE_OUT_OF_RANGE`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_NOT_LINKED`",
              "name": "`err_vm_module_not_linked`",
              "desc": "<p>The module must be successfully linked before instantiation.</p>\n<p><a id=\"ERR_VM_MODULE_LINKING_ERRORED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_NOT_LINKED`"
            },
            {
              "textRaw": "`ERR_VM_MODULE_LINKING_ERRORED`",
              "name": "`err_vm_module_linking_errored`",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "removed": [
                  "v18.1.0",
                  "v16.17.0"
                ],
                "changes": []
              },
              "desc": "<p>The linker function returned a module for which linking has failed.</p>\n<p><a id=\"ERR_WORKER_UNSUPPORTED_EXTENSION\"></a></p>",
              "type": "module",
              "displayName": "`ERR_VM_MODULE_LINKING_ERRORED`"
            },
            {
              "textRaw": "`ERR_WORKER_UNSUPPORTED_EXTENSION`",
              "name": "`err_worker_unsupported_extension`",
              "meta": {
                "added": [
                  "v11.0.0"
                ],
                "removed": [
                  "v16.9.0"
                ],
                "changes": []
              },
              "desc": "<p>The pathname used for the main script of a worker has an\nunknown file extension.</p>\n<p><a id=\"ERR_ZLIB_BINDING_CLOSED\"></a></p>",
              "type": "module",
              "displayName": "`ERR_WORKER_UNSUPPORTED_EXTENSION`"
            },
            {
              "textRaw": "`ERR_ZLIB_BINDING_CLOSED`",
              "name": "`err_zlib_binding_closed`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "removed": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Used when an attempt is made to use a <code>zlib</code> object after it has already been\nclosed.</p>\n<p><a id=\"ERR_CPU_USAGE\"></a></p>",
              "type": "module",
              "displayName": "`ERR_ZLIB_BINDING_CLOSED`"
            },
            {
              "textRaw": "`ERR_CPU_USAGE`",
              "name": "`err_cpu_usage`",
              "meta": {
                "removed": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The native call from <code>process.cpuUsage</code> could not be processed.</p>",
              "type": "module",
              "displayName": "`ERR_CPU_USAGE`"
            }
          ],
          "type": "misc",
          "displayName": "Legacy Node.js error codes"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: `Error`",
          "type": "class",
          "name": "Error",
          "desc": "<p>A generic JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a \"stack trace\"\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>All errors generated by Node.js, including all system and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>",
          "methods": [
            {
              "textRaw": "`Error.captureStackTrace(targetObject[, constructorOpt])`",
              "type": "method",
              "name": "captureStackTrace",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`targetObject` {Object}",
                      "name": "targetObject",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`constructorOpt` {Function}",
                      "name": "constructorOpt",
                      "type": "Function"
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"language-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace will be prefixed with\n<code>${myObject.name}: ${myObject.message}</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from the user. For instance:</p>\n<pre><code class=\"language-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\n</code></pre>"
            }
          ],
          "properties": [
            {
              "textRaw": "`stackTraceLimit` {number}",
              "type": "number",
              "name": "stackTraceLimit",
              "desc": "<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>"
            },
            {
              "textRaw": "`cause` {any}",
              "type": "any",
              "name": "cause",
              "meta": {
                "added": [
                  "v16.9.0"
                ],
                "changes": []
              },
              "desc": "<p>If present, the <code>error.cause</code> property is the underlying cause of the <code>Error</code>.\nIt is used when catching an error and throwing a new one with a different\nmessage or code in order to still have access to the original error.</p>\n<p>The <code>error.cause</code> property is typically set by calling\n<code>new Error(message, { cause })</code>. It is not set by the constructor if the\n<code>cause</code> option is not provided.</p>\n<p>This property allows errors to be chained. When serializing <code>Error</code> objects,\n<a href=\"util.html#utilinspectobject-options\"><code>util.inspect()</code></a> recursively serializes <code>error.cause</code> if it is set.</p>\n<pre><code class=\"language-js\">const cause = new Error('The remote HTTP server responded with a 500 status');\nconst symptom = new Error('The message failed to send', { cause });\n\nconsole.log(symptom);\n// Prints:\n//   Error: The message failed to send\n//       at REPL2:1:17\n//       at Script.runInThisContext (node:vm:130:12)\n//       ... 7 lines matching cause stack trace ...\n//       at [_line] [as _line] (node:internal/readline/interface:886:18) {\n//     [cause]: Error: The remote HTTP server responded with a 500 status\n//         at REPL1:1:15\n//         at Script.runInThisContext (node:vm:130:12)\n//         at REPLServer.defaultEval (node:repl:574:29)\n//         at bound (node:domain:426:15)\n//         at REPLServer.runBound [as eval] (node:domain:437:12)\n//         at REPLServer.onLine (node:repl:902:10)\n//         at REPLServer.emit (node:events:549:35)\n//         at REPLServer.emit (node:domain:482:12)\n//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)\n//         at [_line] [as _line] (node:internal/readline/interface:886:18)\n</code></pre>"
            },
            {
              "textRaw": "`code` {string}",
              "type": "string",
              "name": "code",
              "desc": "<p>The <code>error.code</code> property is a string label that identifies the kind of error.\n<code>error.code</code> is the most stable way to identify an error. It will only change\nbetween major versions of Node.js. In contrast, <code>error.message</code> strings may\nchange between any versions of Node.js. See <a href=\"#nodejs-error-codes\">Node.js error codes</a> for details\nabout specific codes.</p>"
            },
            {
              "textRaw": "`message` {string}",
              "type": "string",
              "name": "message",
              "desc": "<p>The <code>error.message</code> property is the string description of the error as set by\ncalling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also\nappear in the first line of the stack trace of the <code>Error</code>, however changing\nthis property after the <code>Error</code> object is created <em>may not</em> change the first\nline of the stack trace (for example, when <code>error.stack</code> is read before this\nproperty is changed).</p>\n<pre><code class=\"language-js\">const err = new Error('The message');\nconsole.error(err.message);\n// Prints: The message\n</code></pre>"
            },
            {
              "textRaw": "`stack` {string}",
              "type": "string",
              "name": "stack",
              "desc": "<p>The <code>error.stack</code> property is a string describing the point in the code at which\nthe <code>Error</code> was instantiated.</p>\n<pre><code class=\"language-console\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&#x3C;anonymous> (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre>\n<p>The first line is formatted as <code>&#x3C;error class name>: &#x3C;error message></code>, and\nis followed by a series of stack frames (each line beginning with \"at \").\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>Frames are only generated for JavaScript functions. If, for example, execution\nsynchronously passes through a C++ addon function called <code>cheetahify</code> which\nitself calls a JavaScript function, the frame representing the <code>cheetahify</code> call\nwill not be present in the stack traces:</p>\n<pre><code class=\"language-js\">const cheetahify = require('./native-binding.node');\n\nfunction makeFaster() {\n  // `cheetahify()` *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error('oh no!');\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error('oh no!');\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.&#x3C;anonymous> (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\nto Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program (using CommonJS module system), or its dependencies.</li>\n<li><code>&#x3C;transport-protocol>:///url/to/module/file.mjs:line:column</code>, if the frame\nrepresents a call in a user program (using ES module system), or\nits dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {string}",
                  "name": "message",
                  "type": "string"
                },
                {
                  "textRaw": "`options` {Object}",
                  "name": "options",
                  "type": "Object",
                  "options": [
                    {
                      "textRaw": "`cause` {any} The error that caused the newly created error.",
                      "name": "cause",
                      "type": "any",
                      "desc": "The error that caused the newly created error."
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>String(message)</code>. If the <code>cause</code> option is provided,\nit is assigned to the <code>error.cause</code> property. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://v8.dev/docs/stack-trace-api\">V8's stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>"
            }
          ]
        },
        {
          "textRaw": "Class: `AssertionError`",
          "type": "class",
          "name": "AssertionError",
          "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates the failure of an assertion. For details, see\n<a href=\"assert.html#class-assertassertionerror\"><code>Class: assert.AssertionError</code></a>.</p>"
        },
        {
          "textRaw": "Class: `RangeError`",
          "type": "class",
          "name": "RangeError",
          "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that a provided argument was not within the set or range of\nacceptable values for a function; whether that is a numeric range, or\noutside the set of options for a given function parameter.</p>\n<pre><code class=\"language-js\">require('node:net').connect(-1);\n// Throws \"RangeError: \"port\" option should be >= 0 and &#x3C; 65536: -1\"\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>"
        },
        {
          "textRaw": "Class: `ReferenceError`",
          "type": "class",
          "name": "ReferenceError",
          "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that an attempt is being made to access a variable that is not\ndefined. Such errors commonly indicate typos in code, or an otherwise broken\nprogram.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"language-js\">doesNotExist;\n// Throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances indicate a bug in the code or its dependencies.</p>"
        },
        {
          "textRaw": "Class: `SyntaxError`",
          "type": "class",
          "name": "SyntaxError",
          "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that a program is not valid JavaScript. These errors may only be\ngenerated and propagated as a result of code evaluation. Code evaluation may\nhappen as a result of <code>eval</code>, <code>Function</code>, <code>require</code>, or <a href=\"vm.html\">vm</a>. These errors\nare almost always indicative of a broken program.</p>\n<pre><code class=\"language-js\">try {\n  require('node:vm').runInThisContext('binary ! isNotOk');\n} catch (err) {\n  // 'err' will be a SyntaxError.\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –\nthey may only be caught by other contexts.</p>"
        },
        {
          "textRaw": "Class: `SystemError`",
          "type": "class",
          "name": "SystemError",
          "desc": "<ul>\n<li>Extends: <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Node.js generates system errors when exceptions occur within its runtime\nenvironment. These usually occur when an application violates an operating\nsystem constraint. For example, a system error will occur if an application\nattempts to read a file that does not exist.</p>\n<ul>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If present, the address to which a network connection\nfailed</li>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The string error code</li>\n<li><code>dest</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If present, the file path destination when reporting a file\nsystem error</li>\n<li><code>errno</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The system-provided error number</li>\n<li><code>info</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> If present, extra details about the error condition</li>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A system-provided human-readable description of the error</li>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If present, the file path when reporting a file system error</li>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> If present, the network connection port that is not available</li>\n<li><code>syscall</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name of the system call that triggered the error</li>\n</ul>",
          "properties": [
            {
              "textRaw": "`address` {string}",
              "type": "string",
              "name": "address",
              "desc": "<p>If present, <code>error.address</code> is a string describing the address to which a\nnetwork connection failed.</p>"
            },
            {
              "textRaw": "`code` {string}",
              "type": "string",
              "name": "code",
              "desc": "<p>The <code>error.code</code> property is a string representing the error code.</p>"
            },
            {
              "textRaw": "`dest` {string}",
              "type": "string",
              "name": "dest",
              "desc": "<p>If present, <code>error.dest</code> is the file path destination when reporting a file\nsystem error.</p>"
            },
            {
              "textRaw": "`errno` {number}",
              "type": "number",
              "name": "errno",
              "desc": "<p>The <code>error.errno</code> property is a negative number which corresponds\nto the error code defined in <a href=\"https://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>.</p>\n<p>On Windows the error number provided by the system will be normalized by libuv.</p>\n<p>To get the string representation of the error code, use\n<a href=\"util.html#utilgetsystemerrornameerr\"><code>util.getSystemErrorName(error.errno)</code></a>.</p>"
            },
            {
              "textRaw": "`info` {Object}",
              "type": "Object",
              "name": "info",
              "desc": "<p>If present, <code>error.info</code> is an object with details about the error condition.</p>"
            },
            {
              "textRaw": "`message` {string}",
              "type": "string",
              "name": "message",
              "desc": "<p><code>error.message</code> is a system-provided human-readable description of the error.</p>"
            },
            {
              "textRaw": "`path` {string}",
              "type": "string",
              "name": "path",
              "desc": "<p>If present, <code>error.path</code> is a string containing a relevant invalid pathname.</p>"
            },
            {
              "textRaw": "`port` {number}",
              "type": "number",
              "name": "port",
              "desc": "<p>If present, <code>error.port</code> is the network connection port that is not available.</p>"
            },
            {
              "textRaw": "`syscall` {string}",
              "type": "string",
              "name": "syscall",
              "desc": "<p>The <code>error.syscall</code> property is a string describing the <a href=\"https://man7.org/linux/man-pages/man2/syscalls.2.html\">syscall</a> that failed.</p>"
            }
          ],
          "modules": [
            {
              "textRaw": "Common system errors",
              "name": "common_system_errors",
              "desc": "<p>This is a list of system errors commonly-encountered when writing a Node.js\nprogram. For a comprehensive list, see the <a href=\"https://man7.org/linux/man-pages/man3/errno.3.html\"><code>errno</code>(3) man page</a>.</p>\n<ul>\n<li>\n<p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way\nforbidden by its file access permissions.</p>\n</li>\n<li>\n<p><code>EADDRINUSE</code> (Address already in use): An attempt to bind a server\n(<a href=\"net.html\"><code>net</code></a>, <a href=\"http.html\"><code>http</code></a>, or <a href=\"https.html\"><code>https</code></a>) to a local address failed due to\nanother server on the local system already occupying that address.</p>\n</li>\n<li>\n<p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the\ntarget machine actively refused it. This usually results from trying to\nconnect to a service that is inactive on the foreign host.</p>\n</li>\n<li>\n<p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by\na peer. This normally results from a loss of the connection on the remote\nsocket due to a timeout or reboot. Commonly encountered via the <a href=\"http.html\"><code>http</code></a>\nand <a href=\"net.html\"><code>net</code></a> modules.</p>\n</li>\n<li>\n<p><code>EEXIST</code> (File exists): An existing file was the target of an operation that\nrequired that the target not exist.</p>\n</li>\n<li>\n<p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given\npathname was a directory.</p>\n</li>\n<li>\n<p><code>EMFILE</code> (Too many open files in system): Maximum number of\n<a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> allowable on the system has been reached, and\nrequests for another descriptor cannot be fulfilled until at least one\nhas been closed. This is encountered when opening many files at once in\nparallel, especially on systems (in particular, macOS) where there is a low\nfile descriptor limit for processes. To remedy a low limit, run\n<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>\n</li>\n<li>\n<p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href=\"fs.html\"><code>fs</code></a> operations\nto indicate that a component of the specified pathname does not exist. No\nentity (file or directory) could be found by the given path.</p>\n</li>\n<li>\n<p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but\nwas not a directory as expected. Commonly raised by <a href=\"fs.html#fsreaddirpath-options-callback\"><code>fs.readdir</code></a>.</p>\n</li>\n<li>\n<p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target\nof an operation that requires an empty directory, usually <a href=\"fs.html#fsunlinkpath-callback\"><code>fs.unlink</code></a>.</p>\n</li>\n<li>\n<p><code>ENOTFOUND</code> (DNS lookup failed): Indicates a DNS failure of either\n<code>EAI_NODATA</code> or <code>EAI_NONAME</code>. This is not a standard POSIX error.</p>\n</li>\n<li>\n<p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an\noperation that requires elevated privileges.</p>\n</li>\n<li>\n<p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is\nno process to read the data. Commonly encountered at the <a href=\"net.html\"><code>net</code></a> and\n<a href=\"http.html\"><code>http</code></a> layers, indicative that the remote side of the stream being\nwritten to has been closed.</p>\n</li>\n<li>\n<p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because\nthe connected party did not properly respond after a period of time. Usually\nencountered by <a href=\"http.html\"><code>http</code></a> or <a href=\"net.html\"><code>net</code></a>. Often a sign that a <code>socket.end()</code>\nwas not properly called.</p>\n</li>\n</ul>",
              "type": "module",
              "displayName": "Common system errors"
            }
          ]
        },
        {
          "textRaw": "Class: `TypeError`",
          "type": "class",
          "name": "TypeError",
          "desc": "<ul>\n<li>Extends <a href=\"errors.html#class-error\" class=\"type\">&lt;errors.Error&gt;</a></li>\n</ul>\n<p>Indicates that a provided argument is not an allowable type. For example,\npassing a function to a parameter which expects a string would be a <code>TypeError</code>.</p>\n<pre><code class=\"language-js\">require('node:url').parse(() => { });\n// Throws TypeError, since it expected a string.\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>"
        }
      ]
    }
  ]
}