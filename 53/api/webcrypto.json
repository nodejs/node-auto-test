{
  "type": "module",
  "source": "doc/api/webcrypto.md",
  "modules": [
    {
      "textRaw": "Web Crypto API",
      "name": "web_crypto_api",
      "meta": {
        "changes": [
          {
            "version": "REPLACEME",
            "pr-url": "https://github.com/nodejs/node/pull/46067",
            "description": "Arguments are now coersed and validated as per their WebIDL definitions like in other Web Crypto API implementations."
          },
          {
            "version": "v19.0.0",
            "pr-url": "https://github.com/nodejs/node/pull/44897",
            "description": "No longer experimental except for the `Ed25519`, `Ed448`, `X25519`, and `X448` algorithms."
          },
          {
            "version": [
              "v18.4.0",
              "v16.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/43310",
            "description": "Removed proprietary `'node.keyObject'` import/export format."
          },
          {
            "version": [
              "v18.4.0",
              "v16.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/43310",
            "description": "Removed proprietary `'NODE-DSA'`, `'NODE-DH'`, and `'NODE-SCRYPT'` algorithms."
          },
          {
            "version": [
              "v18.4.0",
              "v16.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/42507",
            "description": "Added `'Ed25519'`, `'Ed448'`, `'X25519'`, and `'X448'` algorithms."
          },
          {
            "version": [
              "v18.4.0",
              "v16.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/42507",
            "description": "Removed proprietary `'NODE-ED25519'` and `'NODE-ED448'` algorithms."
          },
          {
            "version": [
              "v18.4.0",
              "v16.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/42507",
            "description": "Removed proprietary `'NODE-X25519'` and `'NODE-X448'` named curves from the `'ECDH'` algorithm."
          }
        ]
      },
      "introduced_in": "v15.0.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>Node.js provides an implementation of the standard <a href=\"https://www.w3.org/TR/WebCryptoAPI/\">Web Crypto API</a>.</p>\n<p>Use <code>globalThis.crypto</code> or <code>require('node:crypto').webcrypto</code> to access this\nmodule.</p>\n<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\n(async function() {\n\n  const key = await subtle.generateKey({\n    name: 'HMAC',\n    hash: 'SHA-256',\n    length: 256,\n  }, true, ['sign', 'verify']);\n\n  const enc = new TextEncoder();\n  const message = enc.encode('I love cupcakes');\n\n  const digest = await subtle.sign({\n    name: 'HMAC',\n  }, key, message);\n\n})();\n</code></pre>\n<h2>Examples</h2>",
      "modules": [
        {
          "textRaw": "Generating keys",
          "name": "generating_keys",
          "desc": "<p>The <a href=\"webcrypto.html#class-subtlecrypto\" class=\"type\">&lt;SubtleCrypto&gt;</a> class can be used to generate symmetric (secret) keys\nor asymmetric key pairs (public key and private key).</p>",
          "modules": [
            {
              "textRaw": "AES keys",
              "name": "aes_keys",
              "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function generateAesKey(length = 256) {\n  const key = await subtle.generateKey({\n    name: 'AES-CBC',\n    length,\n  }, true, ['encrypt', 'decrypt']);\n\n  return key;\n}\n</code></pre>",
              "type": "module",
              "displayName": "AES keys"
            },
            {
              "textRaw": "ECDSA key pairs",
              "name": "ecdsa_key_pairs",
              "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function generateEcKey(namedCurve = 'P-521') {\n  const {\n    publicKey,\n    privateKey,\n  } = await subtle.generateKey({\n    name: 'ECDSA',\n    namedCurve,\n  }, true, ['sign', 'verify']);\n\n  return { publicKey, privateKey };\n}\n</code></pre>",
              "type": "module",
              "displayName": "ECDSA key pairs"
            },
            {
              "textRaw": "Ed25519/Ed448/X25519/X448 key pairs",
              "name": "ed25519/ed448/x25519/x448_key_pairs",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function generateEd25519Key() {\n  return subtle.generateKey({\n    name: 'Ed25519',\n  }, true, ['sign', 'verify']);\n}\n\nasync function generateX25519Key() {\n  return subtle.generateKey({\n    name: 'X25519',\n  }, true, ['deriveKey']);\n}\n</code></pre>",
              "type": "module",
              "displayName": "Ed25519/Ed448/X25519/X448 key pairs"
            },
            {
              "textRaw": "HMAC keys",
              "name": "hmac_keys",
              "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function generateHmacKey(hash = 'SHA-256') {\n  const key = await subtle.generateKey({\n    name: 'HMAC',\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return key;\n}\n</code></pre>",
              "type": "module",
              "displayName": "HMAC keys"
            },
            {
              "textRaw": "RSA key pairs",
              "name": "rsa_key_pairs",
              "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\nconst publicExponent = new Uint8Array([1, 0, 1]);\n\nasync function generateRsaKey(modulusLength = 2048, hash = 'SHA-256') {\n  const {\n    publicKey,\n    privateKey,\n  } = await subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength,\n    publicExponent,\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return { publicKey, privateKey };\n}\n</code></pre>",
              "type": "module",
              "displayName": "RSA key pairs"
            }
          ],
          "type": "module",
          "displayName": "Generating keys"
        },
        {
          "textRaw": "Encryption and decryption",
          "name": "encryption_and_decryption",
          "desc": "<pre><code class=\"language-js\">const crypto = globalThis.crypto;\n\nasync function aesEncrypt(plaintext) {\n  const ec = new TextEncoder();\n  const key = await generateAesKey();\n  const iv = crypto.getRandomValues(new Uint8Array(16));\n\n  const ciphertext = await crypto.subtle.encrypt({\n    name: 'AES-CBC',\n    iv,\n  }, key, ec.encode(plaintext));\n\n  return {\n    key,\n    iv,\n    ciphertext,\n  };\n}\n\nasync function aesDecrypt(ciphertext, key, iv) {\n  const dec = new TextDecoder();\n  const plaintext = await crypto.subtle.decrypt({\n    name: 'AES-CBC',\n    iv,\n  }, key, ciphertext);\n\n  return dec.decode(plaintext);\n}\n</code></pre>",
          "type": "module",
          "displayName": "Encryption and decryption"
        },
        {
          "textRaw": "Exporting and importing keys",
          "name": "exporting_and_importing_keys",
          "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function generateAndExportHmacKey(format = 'jwk', hash = 'SHA-512') {\n  const key = await subtle.generateKey({\n    name: 'HMAC',\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return subtle.exportKey(format, key);\n}\n\nasync function importHmacKey(keyData, format = 'jwk', hash = 'SHA-512') {\n  const key = await subtle.importKey(format, keyData, {\n    name: 'HMAC',\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return key;\n}\n</code></pre>",
          "type": "module",
          "displayName": "Exporting and importing keys"
        },
        {
          "textRaw": "Wrapping and unwrapping keys",
          "name": "wrapping_and_unwrapping_keys",
          "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function generateAndWrapHmacKey(format = 'jwk', hash = 'SHA-512') {\n  const [\n    key,\n    wrappingKey,\n  ] = await Promise.all([\n    subtle.generateKey({\n      name: 'HMAC', hash,\n    }, true, ['sign', 'verify']),\n    subtle.generateKey({\n      name: 'AES-KW',\n      length: 256,\n    }, true, ['wrapKey', 'unwrapKey']),\n  ]);\n\n  const wrappedKey = await subtle.wrapKey(format, key, wrappingKey, 'AES-KW');\n\n  return { wrappedKey, wrappingKey };\n}\n\nasync function unwrapHmacKey(\n  wrappedKey,\n  wrappingKey,\n  format = 'jwk',\n  hash = 'SHA-512') {\n\n  const key = await subtle.unwrapKey(\n    format,\n    wrappedKey,\n    wrappingKey,\n    'AES-KW',\n    { name: 'HMAC', hash },\n    true,\n    ['sign', 'verify']);\n\n  return key;\n}\n</code></pre>",
          "type": "module",
          "displayName": "Wrapping and unwrapping keys"
        },
        {
          "textRaw": "Sign and verify",
          "name": "sign_and_verify",
          "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function sign(key, data) {\n  const ec = new TextEncoder();\n  const signature =\n    await subtle.sign('RSASSA-PKCS1-v1_5', key, ec.encode(data));\n  return signature;\n}\n\nasync function verify(key, signature, data) {\n  const ec = new TextEncoder();\n  const verified =\n    await subtle.verify(\n      'RSASSA-PKCS1-v1_5',\n      key,\n      signature,\n      ec.encode(data));\n  return verified;\n}\n</code></pre>",
          "type": "module",
          "displayName": "Sign and verify"
        },
        {
          "textRaw": "Deriving bits and keys",
          "name": "deriving_bits_and_keys",
          "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function pbkdf2(pass, salt, iterations = 1000, length = 256) {\n  const ec = new TextEncoder();\n  const key = await subtle.importKey(\n    'raw',\n    ec.encode(pass),\n    'PBKDF2',\n    false,\n    ['deriveBits']);\n  const bits = await subtle.deriveBits({\n    name: 'PBKDF2',\n    hash: 'SHA-512',\n    salt: ec.encode(salt),\n    iterations,\n  }, key, length);\n  return bits;\n}\n\nasync function pbkdf2Key(pass, salt, iterations = 1000, length = 256) {\n  const ec = new TextEncoder();\n  const keyMaterial = await subtle.importKey(\n    'raw',\n    ec.encode(pass),\n    'PBKDF2',\n    false,\n    ['deriveKey']);\n  const key = await subtle.deriveKey({\n    name: 'PBKDF2',\n    hash: 'SHA-512',\n    salt: ec.encode(salt),\n    iterations,\n  }, keyMaterial, {\n    name: 'AES-GCM',\n    length: 256,\n  }, true, ['encrypt', 'decrypt']);\n  return key;\n}\n</code></pre>",
          "type": "module",
          "displayName": "Deriving bits and keys"
        },
        {
          "textRaw": "Digest",
          "name": "digest",
          "desc": "<pre><code class=\"language-js\">const { subtle } = globalThis.crypto;\n\nasync function digest(data, algorithm = 'SHA-512') {\n  const ec = new TextEncoder();\n  const digest = await subtle.digest(algorithm, ec.encode(data));\n  return digest;\n}\n</code></pre>",
          "type": "module",
          "displayName": "Digest"
        },
        {
          "textRaw": "Algorithm matrix",
          "name": "algorithm_matrix",
          "desc": "<p>The table details the algorithms supported by the Node.js Web Crypto API\nimplementation and the APIs supported for each:</p>\n<table>\n<thead>\n<tr>\n<th>Algorithm</th>\n<th><code>generateKey</code></th>\n<th><code>exportKey</code></th>\n<th><code>importKey</code></th>\n<th><code>encrypt</code></th>\n<th><code>decrypt</code></th>\n<th><code>wrapKey</code></th>\n<th><code>unwrapKey</code></th>\n<th><code>deriveBits</code></th>\n<th><code>deriveKey</code></th>\n<th><code>sign</code></th>\n<th><code>verify</code></th>\n<th><code>digest</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>'RSASSA-PKCS1-v1_5'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSA-PSS'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSA-OAEP'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'ECDSA'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'ECDH'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-3\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-4\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'AES-CTR'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'AES-CBC'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'AES-GCM'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'AES-KW'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'HMAC'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'HKDF'</code></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'PBKDF2'</code></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'SHA-1'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'SHA-256'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'SHA-384'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'SHA-512'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n</tr>\n</tbody>\n</table>",
          "type": "module",
          "displayName": "Algorithm matrix"
        },
        {
          "textRaw": "Algorithm parameters",
          "name": "algorithm_parameters",
          "desc": "<p>The algorithm parameter objects define the methods and parameters used by\nthe various <a href=\"webcrypto.html#class-subtlecrypto\" class=\"type\">&lt;SubtleCrypto&gt;</a> methods. While described here as \"classes\", they\nare simple JavaScript dictionary objects.</p>",
          "classes": [
            {
              "textRaw": "Class: `AlgorithmIdentifier`",
              "type": "class",
              "name": "AlgorithmIdentifier",
              "meta": {
                "added": [
                  "v18.4.0",
                  "v16.17.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`name` Type: {string}",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "changes": []
                  }
                }
              ]
            },
            {
              "textRaw": "Class: `AesCbcParams`",
              "type": "class",
              "name": "AesCbcParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`iv` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Provides the initialization vector. It must be exactly 16-bytes in length\nand should be unpredictable and cryptographically random.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'AES-CBC'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'AES-CBC'`."
                }
              ]
            },
            {
              "textRaw": "Class: `AesCtrParams`",
              "type": "class",
              "name": "AesCtrParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`counter` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The initial value of the counter block. This must be exactly 16 bytes long.</p>\n<p>The <code>AES-CTR</code> method uses the rightmost <code>length</code> bits of the block as the\ncounter and the remaining bits as the nonce.</p>"
                },
                {
                  "textRaw": "`length` Type: {number} The number of bits in the `aesCtrParams.counter` that are to be used as the counter.",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "The number of bits in the `aesCtrParams.counter` that are to be used as the counter."
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'AES-CTR'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'AES-CTR'`."
                }
              ]
            },
            {
              "textRaw": "Class: `AesGcmParams`",
              "type": "class",
              "name": "AesGcmParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`additionalData` Type: {ArrayBuffer|TypedArray|DataView|Buffer|undefined}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer|undefined",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>With the AES-GCM method, the <code>additionalData</code> is extra input that is not\nencrypted but is included in the authentication of the data. The use of\n<code>additionalData</code> is optional.</p>"
                },
                {
                  "textRaw": "`iv` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The initialization vector must be unique for every encryption operation using a\ngiven key.</p>\n<p>Ideally, this is a deterministic 12-byte value that is computed in such a way\nthat it is guaranteed to be unique across all invocations that use the same key.\nAlternatively, the initialization vector may consist of at least 12\ncryptographically random bytes. For more information on constructing\ninitialization vectors for AES-GCM, refer to Section 8 of <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST SP 800-38D</a>.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'AES-GCM'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'AES-GCM'`."
                },
                {
                  "textRaw": "`tagLength` Type: {number} The size in bits of the generated authentication tag. This values must be one of `32`, `64`, `96`, `104`, `112`, `120`, or `128`. **Default:** `128`.",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "default": "`128`",
                  "desc": "The size in bits of the generated authentication tag. This values must be one of `32`, `64`, `96`, `104`, `112`, `120`, or `128`."
                }
              ]
            },
            {
              "textRaw": "Class: `AesKeyGenParams`",
              "type": "class",
              "name": "AesKeyGenParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`length` Type: {number}",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The length of the AES key to be generated. This must be either <code>128</code>, <code>192</code>,\nor <code>256</code>.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be one of `'AES-CBC'`, `'AES-CTR'`, `'AES-GCM'`, or `'AES-KW'`",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'AES-CBC'`, `'AES-CTR'`, `'AES-GCM'`, or `'AES-KW'`"
                }
              ]
            },
            {
              "textRaw": "Class: `EcdhKeyDeriveParams`",
              "type": "class",
              "name": "EcdhKeyDeriveParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`name` Type: {string} Must be `'ECDH'`, `'X25519'`, or `'X448'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'ECDH'`, `'X25519'`, or `'X448'`."
                },
                {
                  "textRaw": "`public` Type: {CryptoKey}",
                  "type": "CryptoKey",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>ECDH key derivation operates by taking as input one parties private key and\nanother parties public key -- using both to generate a common shared secret.\nThe <code>ecdhKeyDeriveParams.public</code> property is set to the other parties public\nkey.</p>"
                }
              ]
            },
            {
              "textRaw": "Class: `EcdsaParams`",
              "type": "class",
              "name": "EcdsaParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'ECDSA'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'ECDSA'`."
                }
              ]
            },
            {
              "textRaw": "Class: `EcKeyGenParams`",
              "type": "class",
              "name": "EcKeyGenParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`name` Type: {string} Must be one of `'ECDSA'` or `'ECDH'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'ECDSA'` or `'ECDH'`."
                },
                {
                  "textRaw": "`namedCurve` Type: {string} Must be one of `'P-256'`, `'P-384'`, `'P-521'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'P-256'`, `'P-384'`, `'P-521'`."
                }
              ]
            },
            {
              "textRaw": "Class: `EcKeyImportParams`",
              "type": "class",
              "name": "EcKeyImportParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`name` Type: {string} Must be one of `'ECDSA'` or `'ECDH'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'ECDSA'` or `'ECDH'`."
                },
                {
                  "textRaw": "`namedCurve` Type: {string} Must be one of `'P-256'`, `'P-384'`, `'P-521'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'P-256'`, `'P-384'`, `'P-521'`."
                }
              ]
            },
            {
              "textRaw": "Class: `Ed448Params`",
              "type": "class",
              "name": "Ed448Params",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`name` Type: {string} Must be `'Ed448'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'Ed448'`."
                },
                {
                  "textRaw": "`context` Type: {ArrayBuffer|TypedArray|DataView|Buffer|undefined}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer|undefined",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>context</code> member represents the optional context data to associate with\nthe message.\nThe Node.js Web Crypto API implementation only supports zero-length context\nwhich is equivalent to not providing context at all.</p>"
                }
              ]
            },
            {
              "textRaw": "Class: `HkdfParams`",
              "type": "class",
              "name": "HkdfParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`info` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Provides application-specific contextual input to the HKDF algorithm.\nThis can be zero-length but must be provided.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'HKDF'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'HKDF'`."
                },
                {
                  "textRaw": "`salt` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The salt value significantly improves the strength of the HKDF algorithm.\nIt should be random or pseudorandom and should be the same length as the\noutput of the digest function (for instance, if using <code>'SHA-256'</code> as the\ndigest, the salt should be 256-bits of random data).</p>"
                }
              ]
            },
            {
              "textRaw": "Class: `HmacImportParams`",
              "type": "class",
              "name": "HmacImportParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`length` Type: {number}",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The optional number of bits in the HMAC key. This is optional and should\nbe omitted for most cases.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'HMAC'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'HMAC'`."
                }
              ]
            },
            {
              "textRaw": "Class: `HmacKeyGenParams`",
              "type": "class",
              "name": "HmacKeyGenParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`length` Type: {number}",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The number of bits to generate for the HMAC key. If omitted,\nthe length will be determined by the hash algorithm used.\nThis is optional and should be omitted for most cases.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'HMAC'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'HMAC'`."
                }
              ]
            },
            {
              "textRaw": "Class: `Pbkdf2Params`",
              "type": "class",
              "name": "Pbkdf2Params",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`iterations` Type: {number}",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The number of iterations the PBKDF2 algorithm should make when deriving bits.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be `'PBKDF2'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'PBKDF2'`."
                },
                {
                  "textRaw": "`salt` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Should be at least 16 random or pseudorandom bytes.</p>"
                }
              ]
            },
            {
              "textRaw": "Class: `RsaHashedImportParams`",
              "type": "class",
              "name": "RsaHashedImportParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be one of `'RSASSA-PKCS1-v1_5'`, `'RSA-PSS'`, or `'RSA-OAEP'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'RSASSA-PKCS1-v1_5'`, `'RSA-PSS'`, or `'RSA-OAEP'`."
                }
              ]
            },
            {
              "textRaw": "Class: `RsaHashedKeyGenParams`",
              "type": "class",
              "name": "RsaHashedKeyGenParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`hash` Type: {string|Object}",
                  "type": "string|Object",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If represented as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, the value must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If represented as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, the object must have a <code>name</code> property\nwhose value is one of the above listed values.</p>"
                },
                {
                  "textRaw": "`modulusLength` Type: {number}",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The length in bits of the RSA modulus. As a best practice, this should be\nat least <code>2048</code>.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} Must be one of `'RSASSA-PKCS1-v1_5'`, `'RSA-PSS'`, or `'RSA-OAEP'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be one of `'RSASSA-PKCS1-v1_5'`, `'RSA-PSS'`, or `'RSA-OAEP'`."
                },
                {
                  "textRaw": "`publicExponent` Type: {Uint8Array}",
                  "type": "Uint8Array",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The RSA public exponent. This must be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a> containing a big-endian,\nunsigned integer that must fit within 32-bits. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a> may contain an\narbitrary number of leading zero-bits. The value must be a prime number. Unless\nthere is reason to use a different value, use <code>new Uint8Array([1, 0, 1])</code>\n(65537) as the public exponent.</p>"
                }
              ]
            },
            {
              "textRaw": "Class: `RsaOaepParams`",
              "type": "class",
              "name": "RsaOaepParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`label` Type: {ArrayBuffer|TypedArray|DataView|Buffer}",
                  "type": "ArrayBuffer|TypedArray|DataView|Buffer",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>An additional collection of bytes that will not be encrypted, but will be bound\nto the generated ciphertext.</p>\n<p>The <code>rsaOaepParams.label</code> parameter is optional.</p>"
                },
                {
                  "textRaw": "`name` Type: {string} must be `'RSA-OAEP'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "must be `'RSA-OAEP'`."
                }
              ]
            },
            {
              "textRaw": "Class: `RsaPssParams`",
              "type": "class",
              "name": "RsaPssParams",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "properties": [
                {
                  "textRaw": "`name` Type: {string} Must be `'RSA-PSS'`.",
                  "type": "string",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "Must be `'RSA-PSS'`."
                },
                {
                  "textRaw": "`saltLength` Type: {number}",
                  "type": "number",
                  "name": "Type",
                  "meta": {
                    "added": [
                      "v15.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The length (in bytes) of the random salt to use.</p>"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "Algorithm parameters"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: `Crypto`",
          "type": "class",
          "name": "Crypto",
          "meta": {
            "added": [
              "v15.0.0"
            ],
            "changes": []
          },
          "desc": "<p><code>globalThis.crypto</code> is an instance of the <code>Crypto</code>\nclass. <code>Crypto</code> is a singleton that provides access to the remainder of the\ncrypto API.</p>",
          "properties": [
            {
              "textRaw": "`subtle` Type: {SubtleCrypto}",
              "type": "SubtleCrypto",
              "name": "Type",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Provides access to the <code>SubtleCrypto</code> API.</p>"
            }
          ],
          "methods": [
            {
              "textRaw": "`crypto.getRandomValues(typedArray)`",
              "type": "method",
              "name": "getRandomValues",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer|TypedArray}",
                    "name": "return",
                    "type": "Buffer|TypedArray"
                  },
                  "params": [
                    {
                      "textRaw": "`typedArray` {Buffer|TypedArray}",
                      "name": "typedArray",
                      "type": "Buffer|TypedArray"
                    }
                  ]
                }
              ],
              "desc": "<p>Generates cryptographically strong random values. The given <code>typedArray</code> is\nfilled with random values, and a reference to <code>typedArray</code> is returned.</p>\n<p>The given <code>typedArray</code> must be an integer-based instance of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a>,\ni.e. <code>Float32Array</code> and <code>Float64Array</code> are not accepted.</p>\n<p>An error will be thrown if the given <code>typedArray</code> is larger than 65,536 bytes.</p>"
            },
            {
              "textRaw": "`crypto.randomUUID()`",
              "type": "method",
              "name": "randomUUID",
              "meta": {
                "added": [
                  "v16.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string}",
                    "name": "return",
                    "type": "string"
                  },
                  "params": []
                }
              ],
              "desc": "<p>Generates a random <a href=\"https://www.rfc-editor.org/rfc/rfc4122.txt\">RFC 4122</a> version 4 UUID. The UUID is generated using a\ncryptographic pseudorandom number generator.</p>"
            }
          ]
        },
        {
          "textRaw": "Class: `CryptoKey`",
          "type": "class",
          "name": "CryptoKey",
          "meta": {
            "added": [
              "v15.0.0"
            ],
            "changes": []
          },
          "properties": [
            {
              "textRaw": "`cryptoKey.algorithm`",
              "name": "algorithm",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li>Type: <a href=\"webcrypto.html#class-aeskeygenparams\" class=\"type\">&lt;AesKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-rsahashedkeygenparams\" class=\"type\">&lt;RsaHashedKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-eckeygenparams\" class=\"type\">&lt;EcKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-hmackeygenparams\" class=\"type\">&lt;HmacKeyGenParams&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<p>An object detailing the algorithm for which the key can be used along with\nadditional algorithm-specific parameters.</p>\n<p>Read-only.</p>"
            },
            {
              "textRaw": "`extractable` Type: {boolean}",
              "type": "boolean",
              "name": "Type",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>When <code>true</code>, the <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> can be extracted using either\n<code>subtleCrypto.exportKey()</code> or <code>subtleCrypto.wrapKey()</code>.</p>\n<p>Read-only.</p>"
            },
            {
              "textRaw": "`type` Type: {string} One of `'secret'`, `'private'`, or `'public'`.",
              "type": "string",
              "name": "Type",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A string identifying whether the key is a symmetric (<code>'secret'</code>) or\nasymmetric (<code>'private'</code> or <code>'public'</code>) key.</p>",
              "shortDesc": "One of `'secret'`, `'private'`, or `'public'`."
            },
            {
              "textRaw": "`usages` Type: {string\\[]}",
              "type": "string\\[]",
              "name": "Type",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "<p>An array of strings identifying the operations for which the\nkey may be used.</p>\n<p>The possible usages are:</p>\n<ul>\n<li><code>'encrypt'</code> - The key may be used to encrypt data.</li>\n<li><code>'decrypt'</code> - The key may be used to decrypt data.</li>\n<li><code>'sign'</code> - The key may be used to generate digital signatures.</li>\n<li><code>'verify'</code> - The key may be used to verify digital signatures.</li>\n<li><code>'deriveKey'</code> - The key may be used to derive a new key.</li>\n<li><code>'deriveBits'</code> - The key may be used to derive bits.</li>\n<li><code>'wrapKey'</code> - The key may be used to wrap another key.</li>\n<li><code>'unwrapKey'</code> - The key may be used to unwrap another key.</li>\n</ul>\n<p>Valid key usages depend on the key algorithm (identified by\n<code>cryptokey.algorithm.name</code>).</p>\n<table>\n<thead>\n<tr>\n<th>Key Type</th>\n<th><code>'encrypt'</code></th>\n<th><code>'decrypt'</code></th>\n<th><code>'sign'</code></th>\n<th><code>'verify'</code></th>\n<th><code>'deriveKey'</code></th>\n<th><code>'deriveBits'</code></th>\n<th><code>'wrapKey'</code></th>\n<th><code>'unwrapKey'</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>'AES-CBC'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-CTR'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-GCM'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-KW'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'ECDH'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'ECDSA'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-3\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-4\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'HDKF'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'HMAC'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'PBKDF2'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSA-OAEP'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'RSA-PSS'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSASSA-PKCS1-v1_5'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>"
            }
          ]
        },
        {
          "textRaw": "Class: `CryptoKeyPair`",
          "type": "class",
          "name": "CryptoKeyPair",
          "meta": {
            "added": [
              "v15.0.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>CryptoKeyPair</code> is a simple dictionary object with <code>publicKey</code> and\n<code>privateKey</code> properties, representing an asymmetric key pair.</p>",
          "properties": [
            {
              "textRaw": "`privateKey` Type: {CryptoKey} A {CryptoKey} whose `type` will be `'private'`.",
              "type": "CryptoKey",
              "name": "Type",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "A {CryptoKey} whose `type` will be `'private'`."
            },
            {
              "textRaw": "`publicKey` Type: {CryptoKey} A {CryptoKey} whose `type` will be `'public'`.",
              "type": "CryptoKey",
              "name": "Type",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "desc": "A {CryptoKey} whose `type` will be `'public'`."
            }
          ]
        },
        {
          "textRaw": "Class: `SubtleCrypto`",
          "type": "class",
          "name": "SubtleCrypto",
          "meta": {
            "added": [
              "v15.0.0"
            ],
            "changes": []
          },
          "methods": [
            {
              "textRaw": "`subtle.decrypt(algorithm, key, data)`",
              "type": "method",
              "name": "decrypt",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} containing {ArrayBuffer}",
                    "name": "return",
                    "type": "Promise",
                    "desc": "containing {ArrayBuffer}"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm`: {RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams}",
                      "name": "algorithm",
                      "type": "RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams"
                    },
                    {
                      "textRaw": "`key`: {CryptoKey}",
                      "name": "key",
                      "type": "CryptoKey"
                    },
                    {
                      "textRaw": "`data`: {ArrayBuffer|TypedArray|DataView|Buffer}",
                      "name": "data",
                      "type": "ArrayBuffer|TypedArray|DataView|Buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Using the method and parameters specified in <code>algorithm</code> and the keying\nmaterial provided by <code>key</code>, <code>subtle.decrypt()</code> attempts to decipher the\nprovided <code>data</code>. If successful, the returned promise will be resolved with\nan <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> containing the plaintext result.</p>\n<p>The algorithms currently supported include:</p>\n<ul>\n<li><code>'RSA-OAEP'</code></li>\n<li><code>'AES-CTR'</code></li>\n<li><code>'AES-CBC'</code></li>\n<li><code>'AES-GCM</code>'</li>\n</ul>"
            },
            {
              "textRaw": "`subtle.deriveBits(algorithm, baseKey, length)`",
              "type": "method",
              "name": "deriveBits",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": [
                  {
                    "version": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/42507",
                    "description": "Added `'X25519'`, and `'X448'` algorithms."
                  }
                ]
              },
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>algorithm</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-ecdhkeyderiveparams\" class=\"type\">&lt;EcdhKeyDeriveParams&gt;</a> | <a href=\"webcrypto.html#class-hkdfparams\" class=\"type\">&lt;HkdfParams&gt;</a> | <a href=\"webcrypto.html#class-pbkdf2params\" class=\"type\">&lt;Pbkdf2Params&gt;</a></li>\n<li><code>baseKey</code>: <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n<li><code>length</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<p>Using the method and parameters specified in <code>algorithm</code> and the keying\nmaterial provided by <code>baseKey</code>, <code>subtle.deriveBits()</code> attempts to generate\n<code>length</code> bits.</p>\n<p>The Node.js implementation requires that when <code>length</code> is a\nnumber it must be multiple of <code>8</code>.</p>\n<p>When <code>length</code> is <code>null</code> the maximum number of bits for a given algorithm is\ngenerated. This is allowed for the <code>'ECDH'</code>, <code>'X25519'</code>, and <code>'X448'</code>\nalgorithms.</p>\n<p>If successful, the returned promise will be resolved with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a>\ncontaining the generated data.</p>\n<p>The algorithms currently supported include:</p>\n<ul>\n<li><code>'ECDH'</code></li>\n<li><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'HKDF'</code></li>\n<li><code>'PBKDF2'</code></li>\n</ul>"
            },
            {
              "textRaw": "`subtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages)`",
              "type": "method",
              "name": "deriveKey",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": [
                  {
                    "version": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/42507",
                    "description": "Added `'X25519'`, and `'X448'` algorithms."
                  }
                ]
              },
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>algorithm</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-ecdhkeyderiveparams\" class=\"type\">&lt;EcdhKeyDeriveParams&gt;</a> | <a href=\"webcrypto.html#class-hkdfparams\" class=\"type\">&lt;HkdfParams&gt;</a> | <a href=\"webcrypto.html#class-pbkdf2params\" class=\"type\">&lt;Pbkdf2Params&gt;</a></li>\n<li><code>baseKey</code>: <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n<li><code>derivedKeyAlgorithm</code>: <a href=\"webcrypto.html#class-hmackeygenparams\" class=\"type\">&lt;HmacKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-aeskeygenparams\" class=\"type\">&lt;AesKeyGenParams&gt;</a></li>\n<li><code>extractable</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n<li><code>keyUsages</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> See <a href=\"#cryptokeyusages\">Key usages</a>.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<p>Using the method and parameters specified in <code>algorithm</code>, and the keying\nmaterial provided by <code>baseKey</code>, <code>subtle.deriveKey()</code> attempts to generate\na new <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> based on the method and parameters in <code>derivedKeyAlgorithm</code>.</p>\n<p>Calling <code>subtle.deriveKey()</code> is equivalent to calling <code>subtle.deriveBits()</code> to\ngenerate raw keying material, then passing the result into the\n<code>subtle.importKey()</code> method using the <code>deriveKeyAlgorithm</code>, <code>extractable</code>, and\n<code>keyUsages</code> parameters as input.</p>\n<p>The algorithms currently supported include:</p>\n<ul>\n<li><code>'ECDH'</code></li>\n<li><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'HKDF'</code></li>\n<li><code>'PBKDF2'</code></li>\n</ul>"
            },
            {
              "textRaw": "`subtle.digest(algorithm, data)`",
              "type": "method",
              "name": "digest",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} containing {ArrayBuffer}",
                    "name": "return",
                    "type": "Promise",
                    "desc": "containing {ArrayBuffer}"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm`: {string|Object}",
                      "name": "algorithm",
                      "type": "string|Object"
                    },
                    {
                      "textRaw": "`data`: {ArrayBuffer|TypedArray|DataView|Buffer}",
                      "name": "data",
                      "type": "ArrayBuffer|TypedArray|DataView|Buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Using the method identified by <code>algorithm</code>, <code>subtle.digest()</code> attempts to\ngenerate a digest of <code>data</code>. If successful, the returned promise is resolved\nwith an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> containing the computed digest.</p>\n<p>If <code>algorithm</code> is provided as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, it must be one of:</p>\n<ul>\n<li><code>'SHA-1'</code></li>\n<li><code>'SHA-256'</code></li>\n<li><code>'SHA-384'</code></li>\n<li><code>'SHA-512'</code></li>\n</ul>\n<p>If <code>algorithm</code> is provided as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>, it must have a <code>name</code> property\nwhose value is one of the above.</p>"
            },
            {
              "textRaw": "`subtle.encrypt(algorithm, key, data)`",
              "type": "method",
              "name": "encrypt",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} containing {ArrayBuffer}",
                    "name": "return",
                    "type": "Promise",
                    "desc": "containing {ArrayBuffer}"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm`: {RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams}",
                      "name": "algorithm",
                      "type": "RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams"
                    },
                    {
                      "textRaw": "`key`: {CryptoKey}",
                      "name": "key",
                      "type": "CryptoKey"
                    }
                  ]
                }
              ],
              "desc": "<p>Using the method and parameters specified by <code>algorithm</code> and the keying\nmaterial provided by <code>key</code>, <code>subtle.encrypt()</code> attempts to encipher <code>data</code>.\nIf successful, the returned promise is resolved with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a>\ncontaining the encrypted result.</p>\n<p>The algorithms currently supported include:</p>\n<ul>\n<li><code>'RSA-OAEP'</code></li>\n<li><code>'AES-CTR'</code></li>\n<li><code>'AES-CBC'</code></li>\n<li><code>'AES-GCM</code>'</li>\n</ul>"
            },
            {
              "textRaw": "`subtle.exportKey(format, key)`",
              "type": "method",
              "name": "exportKey",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": [
                  {
                    "version": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/42507",
                    "description": "Added `'Ed25519'`, `'Ed448'`, `'X25519'`, and `'X448'` algorithms."
                  },
                  {
                    "version": "v15.9.0",
                    "pr-url": "https://github.com/nodejs/node/pull/37203",
                    "description": "Removed `'NODE-DSA'` JWK export."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} containing {ArrayBuffer|Object}.",
                    "name": "return",
                    "type": "Promise",
                    "desc": "containing {ArrayBuffer|Object}."
                  },
                  "params": [
                    {
                      "textRaw": "`format`: {string} Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.",
                      "name": "format",
                      "type": "string",
                      "desc": "Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`."
                    },
                    {
                      "textRaw": "`key`: {CryptoKey}",
                      "name": "key",
                      "type": "CryptoKey"
                    }
                  ]
                }
              ],
              "desc": "<p>Exports the given key into the specified format, if supported.</p>\n<p>If the <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> is not extractable, the returned promise will reject.</p>\n<p>When <code>format</code> is either <code>'pkcs8'</code> or <code>'spki'</code> and the export is successful,\nthe returned promise will be resolved with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> containing the\nexported key data.</p>\n<p>When <code>format</code> is <code>'jwk'</code> and the export is successful, the returned promise\nwill be resolved with a JavaScript object conforming to the <a href=\"https://tools.ietf.org/html/rfc7517\">JSON Web Key</a>\nspecification.</p>\n<table>\n<thead>\n<tr>\n<th>Key Type</th>\n<th><code>'spki'</code></th>\n<th><code>'pkcs8'</code></th>\n<th><code>'jwk'</code></th>\n<th><code>'raw'</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>'AES-CBC'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-CTR'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-GCM'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-KW'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'ECDH'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'ECDSA'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'HDKF'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'HMAC'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'PBKDF2'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSA-OAEP'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSA-PSS'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSASSA-PKCS1-v1_5'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n</tbody>\n</table>"
            },
            {
              "textRaw": "`subtle.generateKey(algorithm, extractable, keyUsages)`",
              "type": "method",
              "name": "generateKey",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>algorithm</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsahashedkeygenparams\" class=\"type\">&lt;RsaHashedKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-eckeygenparams\" class=\"type\">&lt;EcKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-hmackeygenparams\" class=\"type\">&lt;HmacKeyGenParams&gt;</a> | <a href=\"webcrypto.html#class-aeskeygenparams\" class=\"type\">&lt;AesKeyGenParams&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<ul>\n<li><code>extractable</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n<li><code>keyUsages</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> See <a href=\"#cryptokeyusages\">Key usages</a>.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> | <a href=\"webcrypto.html#class-cryptokeypair\" class=\"type\">&lt;CryptoKeyPair&gt;</a></li>\n</ul>\n<p>Using the method and parameters provided in <code>algorithm</code>, <code>subtle.generateKey()</code>\nattempts to generate new keying material. Depending the method used, the method\nmay generate either a single <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> or a <a href=\"webcrypto.html#class-cryptokeypair\" class=\"type\">&lt;CryptoKeyPair&gt;</a>.</p>\n<p>The <a href=\"webcrypto.html#class-cryptokeypair\" class=\"type\">&lt;CryptoKeyPair&gt;</a> (public and private key) generating algorithms supported\ninclude:</p>\n<ul>\n<li><code>'RSASSA-PKCS1-v1_5'</code></li>\n<li><code>'RSA-PSS'</code></li>\n<li><code>'RSA-OAEP'</code></li>\n<li><code>'ECDSA'</code></li>\n<li><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'ECDH'</code></li>\n<li><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-3\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-4\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n</ul>\n<p>The <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> (secret key) generating algorithms supported include:</p>\n<ul>\n<li><code>'HMAC'</code></li>\n<li><code>'AES-CTR'</code></li>\n<li><code>'AES-CBC'</code></li>\n<li><code>'AES-GCM'</code></li>\n<li><code>'AES-KW'</code></li>\n</ul>"
            },
            {
              "textRaw": "`subtle.importKey(format, keyData, algorithm, extractable, keyUsages)`",
              "type": "method",
              "name": "importKey",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": [
                  {
                    "version": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/42507",
                    "description": "Added `'Ed25519'`, `'Ed448'`, `'X25519'`, and `'X448'` algorithms."
                  },
                  {
                    "version": "v15.9.0",
                    "pr-url": "https://github.com/nodejs/node/pull/37203",
                    "description": "Removed `'NODE-DSA'` JWK import."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`format`: {string} Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.",
                      "name": "format",
                      "type": "string",
                      "desc": "Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`."
                    },
                    {
                      "textRaw": "`keyData`: {ArrayBuffer|TypedArray|DataView|Buffer|Object}",
                      "name": "keyData",
                      "type": "ArrayBuffer|TypedArray|DataView|Buffer|Object"
                    }
                  ]
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>algorithm</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsahashedimportparams\" class=\"type\">&lt;RsaHashedImportParams&gt;</a> | <a href=\"webcrypto.html#class-eckeyimportparams\" class=\"type\">&lt;EcKeyImportParams&gt;</a> | <a href=\"webcrypto.html#class-hmacimportparams\" class=\"type\">&lt;HmacImportParams&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<ul>\n<li><code>extractable</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n<li><code>keyUsages</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> See <a href=\"#cryptokeyusages\">Key usages</a>.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n</ul>\n<p>The <code>subtle.importKey()</code> method attempts to interpret the provided <code>keyData</code>\nas the given <code>format</code> to create a <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> instance using the provided\n<code>algorithm</code>, <code>extractable</code>, and <code>keyUsages</code> arguments. If the import is\nsuccessful, the returned promise will be resolved with the created <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a>.</p>\n<p>If importing a <code>'PBKDF2'</code> key, <code>extractable</code> must be <code>false</code>.</p>\n<p>The algorithms currently supported include:</p>\n<table>\n<thead>\n<tr>\n<th>Key Type</th>\n<th><code>'spki'</code></th>\n<th><code>'pkcs8'</code></th>\n<th><code>'jwk'</code></th>\n<th><code>'raw'</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>'AES-CBC'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-CTR'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-GCM'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'AES-KW'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'ECDH'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'ECDSA'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-3\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-4\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'HDKF'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'HMAC'</code></td>\n<td></td>\n<td></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'PBKDF2'</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>'RSA-OAEP'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSA-PSS'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n<tr>\n<td><code>'RSASSA-PKCS1-v1_5'</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td></td>\n</tr>\n</tbody>\n</table>"
            },
            {
              "textRaw": "`subtle.sign(algorithm, key, data)`",
              "type": "method",
              "name": "sign",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": [
                  {
                    "version": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/42507",
                    "description": "Added `'Ed25519'`, and `'Ed448'` algorithms."
                  }
                ]
              },
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>algorithm</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsapssparams\" class=\"type\">&lt;RsaPssParams&gt;</a> | <a href=\"webcrypto.html#class-ecdsaparams\" class=\"type\">&lt;EcdsaParams&gt;</a> | <a href=\"webcrypto.html#class-ed448params\" class=\"type\">&lt;Ed448Params&gt;</a></li>\n<li><code>key</code>: <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n<li><code>data</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> | <a href=\"buffer.html#class-buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<p>Using the method and parameters given by <code>algorithm</code> and the keying material\nprovided by <code>key</code>, <code>subtle.sign()</code> attempts to generate a cryptographic\nsignature of <code>data</code>. If successful, the returned promise is resolved with\nan <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> containing the generated signature.</p>\n<p>The algorithms currently supported include:</p>\n<ul>\n<li><code>'RSASSA-PKCS1-v1_5'</code></li>\n<li><code>'RSA-PSS'</code></li>\n<li><code>'ECDSA'</code></li>\n<li><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'HMAC'</code></li>\n</ul>"
            },
            {
              "textRaw": "`subtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages)`",
              "type": "method",
              "name": "unwrapKey",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`format`: {string} Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.",
                      "name": "format",
                      "type": "string",
                      "desc": "Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`."
                    },
                    {
                      "textRaw": "`wrappedKey`: {ArrayBuffer|TypedArray|DataView|Buffer}",
                      "name": "wrappedKey",
                      "type": "ArrayBuffer|TypedArray|DataView|Buffer"
                    },
                    {
                      "textRaw": "`unwrappingKey`: {CryptoKey}",
                      "name": "unwrappingKey",
                      "type": "CryptoKey"
                    }
                  ]
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>unwrapAlgo</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsaoaepparams\" class=\"type\">&lt;RsaOaepParams&gt;</a> | <a href=\"webcrypto.html#class-aesctrparams\" class=\"type\">&lt;AesCtrParams&gt;</a> | <a href=\"webcrypto.html#class-aescbcparams\" class=\"type\">&lt;AesCbcParams&gt;</a> | <a href=\"webcrypto.html#class-aesgcmparams\" class=\"type\">&lt;AesGcmParams&gt;</a></li>\n<li><code>unwrappedKeyAlgo</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsahashedimportparams\" class=\"type\">&lt;RsaHashedImportParams&gt;</a> | <a href=\"webcrypto.html#class-eckeyimportparams\" class=\"type\">&lt;EcKeyImportParams&gt;</a> | <a href=\"webcrypto.html#class-hmacimportparams\" class=\"type\">&lt;HmacImportParams&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<ul>\n<li><code>extractable</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n<li><code>keyUsages</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> See <a href=\"#cryptokeyusages\">Key usages</a>.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n</ul>\n<p>In cryptography, \"wrapping a key\" refers to exporting and then encrypting the\nkeying material. The <code>subtle.unwrapKey()</code> method attempts to decrypt a wrapped\nkey and create a <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> instance. It is equivalent to calling\n<code>subtle.decrypt()</code> first on the encrypted key data (using the <code>wrappedKey</code>,\n<code>unwrapAlgo</code>, and <code>unwrappingKey</code> arguments as input) then passing the results\nin to the <code>subtle.importKey()</code> method using the <code>unwrappedKeyAlgo</code>,\n<code>extractable</code>, and <code>keyUsages</code> arguments as inputs. If successful, the returned\npromise is resolved with a <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a> object.</p>\n<p>The wrapping algorithms currently supported include:</p>\n<ul>\n<li><code>'RSA-OAEP'</code></li>\n<li><code>'AES-CTR'</code></li>\n<li><code>'AES-CBC'</code></li>\n<li><code>'AES-GCM'</code></li>\n<li><code>'AES-KW'</code></li>\n</ul>\n<p>The unwrapped key algorithms supported include:</p>\n<ul>\n<li><code>'RSASSA-PKCS1-v1_5'</code></li>\n<li><code>'RSA-PSS'</code></li>\n<li><code>'RSA-OAEP'</code></li>\n<li><code>'ECDSA'</code></li>\n<li><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'ECDH'</code></li>\n<li><code>'X25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-3\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'X448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-4\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'HMAC'</code></li>\n<li><code>'AES-CTR'</code></li>\n<li><code>'AES-CBC'</code></li>\n<li><code>'AES-GCM'</code></li>\n<li><code>'AES-KW'</code></li>\n</ul>"
            },
            {
              "textRaw": "`subtle.verify(algorithm, key, signature, data)`",
              "type": "method",
              "name": "verify",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": [
                  {
                    "version": [
                      "v18.4.0",
                      "v16.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/42507",
                    "description": "Added `'Ed25519'`, and `'Ed448'` algorithms."
                  }
                ]
              },
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>algorithm</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsapssparams\" class=\"type\">&lt;RsaPssParams&gt;</a> | <a href=\"webcrypto.html#class-ecdsaparams\" class=\"type\">&lt;EcdsaParams&gt;</a> | <a href=\"webcrypto.html#class-ed448params\" class=\"type\">&lt;Ed448Params&gt;</a></li>\n<li><code>key</code>: <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n<li><code>signature</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> | <a href=\"buffer.html#class-buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>data</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> | <a href=\"buffer.html#class-buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<p>Using the method and parameters given in <code>algorithm</code> and the keying material\nprovided by <code>key</code>, <code>subtle.verify()</code> attempts to verify that <code>signature</code> is\na valid cryptographic signature of <code>data</code>. The returned promise is resolved\nwith either <code>true</code> or <code>false</code>.</p>\n<p>The algorithms currently supported include:</p>\n<ul>\n<li><code>'RSASSA-PKCS1-v1_5'</code></li>\n<li><code>'RSA-PSS'</code></li>\n<li><code>'ECDSA'</code></li>\n<li><code>'Ed25519'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'Ed448'</code> <span class=\"experimental-inline\"></span><sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1-2\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li><code>'HMAC'</code></li>\n</ul>"
            },
            {
              "textRaw": "`subtle.wrapKey(format, key, wrappingKey, wrapAlgo)`",
              "type": "method",
              "name": "wrapKey",
              "meta": {
                "added": [
                  "v15.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--lint disable maximum-line-length remark-lint-->\n<ul>\n<li><code>format</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Must be one of <code>'raw'</code>, <code>'pkcs8'</code>, <code>'spki'</code>, or <code>'jwk'</code>.</li>\n<li><code>key</code>: <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n<li><code>wrappingKey</code>: <a href=\"webcrypto.html#class-cryptokey\" class=\"type\">&lt;CryptoKey&gt;</a></li>\n<li><code>wrapAlgo</code>: <a href=\"webcrypto.html#class-algorithmidentifier\" class=\"type\">&lt;AlgorithmIdentifier&gt;</a> | <a href=\"webcrypto.html#class-rsaoaepparams\" class=\"type\">&lt;RsaOaepParams&gt;</a> | <a href=\"webcrypto.html#class-aesctrparams\" class=\"type\">&lt;AesCtrParams&gt;</a> | <a href=\"webcrypto.html#class-aescbcparams\" class=\"type\">&lt;AesCbcParams&gt;</a> | <a href=\"webcrypto.html#class-aesgcmparams\" class=\"type\">&lt;AesGcmParams&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a> containing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a></li>\n</ul>\n<!--lint enable maximum-line-length remark-lint-->\n<p>In cryptography, \"wrapping a key\" refers to exporting and then encrypting the\nkeying material. The <code>subtle.wrapKey()</code> method exports the keying material into\nthe format identified by <code>format</code>, then encrypts it using the method and\nparameters specified by <code>wrapAlgo</code> and the keying material provided by\n<code>wrappingKey</code>. It is the equivalent to calling <code>subtle.exportKey()</code> using\n<code>format</code> and <code>key</code> as the arguments, then passing the result to the\n<code>subtle.encrypt()</code> method using <code>wrappingKey</code> and <code>wrapAlgo</code> as inputs. If\nsuccessful, the returned promise will be resolved with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a>\ncontaining the encrypted key data.</p>\n<p>The wrapping algorithms currently supported include:</p>\n<ul>\n<li><code>'RSA-OAEP'</code></li>\n<li><code>'AES-CTR'</code></li>\n<li><code>'AES-CBC'</code></li>\n<li><code>'AES-GCM'</code></li>\n<li><code>'AES-KW'</code></li>\n</ul>"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Web Crypto API"
    }
  ]
}