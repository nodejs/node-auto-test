{
  "type": "module",
  "source": "doc/api/n-api.md",
  "introduced_in": "v8.0.0",
  "stability": 2,
  "stabilityText": "Stable",
  "miscs": [
    {
      "textRaw": "Node-API",
      "name": "Node-API",
      "introduced_in": "v8.0.0",
      "type": "misc",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>Node-API (formerly N-API) is an API for building native Addons. It is\nindependent from the underlying JavaScript runtime (for example, V8) and is\nmaintained as part of Node.js itself. This API will be Application Binary\nInterface (ABI) stable across versions of Node.js. It is intended to insulate\naddons from changes in the underlying JavaScript engine and allow modules\ncompiled for one major version to run on later major versions of Node.js without\nrecompilation. The <a href=\"https://nodejs.org/en/docs/guides/abi-stability/\">ABI Stability</a> guide provides a more in-depth explanation.</p>\n<p>Addons are built/packaged with the same approach/tools outlined in the section\ntitled <a href=\"addons.html\">C++ Addons</a>. The only difference is the set of APIs that are used by\nthe native code. Instead of using the V8 or <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a>\nAPIs, the functions available in Node-API are used.</p>\n<p>APIs exposed by Node-API are generally used to create and manipulate\nJavaScript values. Concepts and operations generally map to ideas specified\nin the ECMA-262 Language Specification. The APIs have the following\nproperties:</p>\n<ul>\n<li>All Node-API calls return a status code of type <code>napi_status</code>. This\nstatus indicates whether the API call succeeded or failed.</li>\n<li>The API's return value is passed via an out parameter.</li>\n<li>All JavaScript values are abstracted behind an opaque type named\n<code>napi_value</code>.</li>\n<li>In case of an error status code, additional information can be obtained\nusing <code>napi_get_last_error_info</code>. More information can be found in the error\nhandling section <a href=\"#error-handling\">Error handling</a>.</li>\n</ul>\n<p>Node-API is a C API that ensures ABI stability across Node.js versions\nand different compiler levels. A C++ API can be easier to use.\nTo support using C++, the project maintains a\nC++ wrapper module called <a href=\"https://github.com/nodejs/node-addon-api\"><code>node-addon-api</code></a>.\nThis wrapper provides an inlineable C++ API. Binaries built\nwith <code>node-addon-api</code> will depend on the symbols for the Node-API C-based\nfunctions exported by Node.js. <code>node-addon-api</code> is a more\nefficient way to write code that calls Node-API. Take, for example, the\nfollowing <code>node-addon-api</code> code. The first section shows the\n<code>node-addon-api</code> code and the second section shows what actually gets\nused in the addon.</p>\n<pre><code class=\"language-cpp\">Object obj = Object::New(env);\nobj[\"foo\"] = String::New(env, \"bar\");\n</code></pre>\n<pre><code class=\"language-cpp\">napi_status status;\nnapi_value object, string;\nstatus = napi_create_object(env, &#x26;object);\nif (status != napi_ok) {\n  napi_throw_error(env, ...);\n  return;\n}\n\nstatus = napi_create_string_utf8(env, \"bar\", NAPI_AUTO_LENGTH, &#x26;string);\nif (status != napi_ok) {\n  napi_throw_error(env, ...);\n  return;\n}\n\nstatus = napi_set_named_property(env, object, \"foo\", string);\nif (status != napi_ok) {\n  napi_throw_error(env, ...);\n  return;\n}\n</code></pre>\n<p>The end result is that the addon only uses the exported C APIs. As a result,\nit still gets the benefits of the ABI stability provided by the C API.</p>\n<p>When using <code>node-addon-api</code> instead of the C APIs, start with the API <a href=\"https://github.com/nodejs/node-addon-api#api-documentation\">docs</a>\nfor <code>node-addon-api</code>.</p>\n<p>The <a href=\"https://nodejs.github.io/node-addon-examples/\">Node-API Resource</a>Â offers\nan excellent orientation and tips for developers just getting started with\nNode-API and <code>node-addon-api</code>. Additional media resources can be found on the\n<a href=\"https://github.com/nodejs/abi-stable-node/blob/HEAD/node-api-media.md\">Node-API Media</a> page.</p>",
      "miscs": [
        {
          "textRaw": "Implications of ABI stability",
          "name": "implications_of_abi_stability",
          "desc": "<p>Although Node-API provides an ABI stability guarantee, other parts of Node.js do\nnot, and any external libraries used from the addon may not. In particular,\nnone of the following APIs provide an ABI stability guarantee across major\nversions:</p>\n<ul>\n<li>\n<p>the Node.js C++ APIs available via any of</p>\n<pre><code class=\"language-cpp\">#include &#x3C;node.h>\n#include &#x3C;node_buffer.h>\n#include &#x3C;node_version.h>\n#include &#x3C;node_object_wrap.h>\n</code></pre>\n</li>\n<li>\n<p>the libuv APIs which are also included with Node.js and available via</p>\n<pre><code class=\"language-cpp\">#include &#x3C;uv.h>\n</code></pre>\n</li>\n<li>\n<p>the V8 API available via</p>\n<pre><code class=\"language-cpp\">#include &#x3C;v8.h>\n</code></pre>\n</li>\n</ul>\n<p>Thus, for an addon to remain ABI-compatible across Node.js major versions, it\nmust use Node-API exclusively by restricting itself to using</p>\n<pre><code class=\"language-c\">#include &#x3C;node_api.h>\n</code></pre>\n<p>and by checking, for all external libraries that it uses, that the external\nlibrary makes ABI stability guarantees similar to Node-API.</p>",
          "type": "misc",
          "displayName": "Implications of ABI stability"
        },
        {
          "textRaw": "Building",
          "name": "building",
          "desc": "<p>Unlike modules written in JavaScript, developing and deploying Node.js\nnative addons using Node-API requires an additional set of tools. Besides the\nbasic tools required to develop for Node.js, the native addon developer\nrequires a toolchain that can compile C and C++ code into a binary. In\naddition, depending upon how the native addon is deployed, the <em>user</em> of\nthe native addon will also need to have a C/C++ toolchain installed.</p>\n<p>For Linux developers, the necessary C/C++ toolchain packages are readily\navailable. <a href=\"https://gcc.gnu.org\">GCC</a> is widely used in the Node.js community to build and\ntest across a variety of platforms. For many developers, the <a href=\"https://llvm.org\">LLVM</a>\ncompiler infrastructure is also a good choice.</p>\n<p>For Mac developers, <a href=\"https://developer.apple.com/xcode/\">Xcode</a> offers all the required compiler tools.\nHowever, it is not necessary to install the entire Xcode IDE. The following\ncommand installs the necessary toolchain:</p>\n<pre><code class=\"language-bash\">xcode-select --install\n</code></pre>\n<p>For Windows developers, <a href=\"https://visualstudio.microsoft.com\">Visual Studio</a> offers all the required compiler\ntools. However, it is not necessary to install the entire Visual Studio\nIDE. The following command installs the necessary toolchain:</p>\n<pre><code class=\"language-bash\">npm install --global windows-build-tools\n</code></pre>\n<p>The sections below describe the additional tools available for developing\nand deploying Node.js native addons.</p>",
          "modules": [
            {
              "textRaw": "Build tools",
              "name": "build_tools",
              "desc": "<p>Both the tools listed here require that <em>users</em> of the native\naddon have a C/C++ toolchain installed in order to successfully install\nthe native addon.</p>",
              "modules": [
                {
                  "textRaw": "node-gyp",
                  "name": "node-gyp",
                  "desc": "<p><a href=\"https://github.com/nodejs/node-gyp\">node-gyp</a> is a build system based on the <a href=\"https://github.com/nodejs/gyp-next\">gyp-next</a> fork of\nGoogle's <a href=\"https://gyp.gsrc.io\">GYP</a> tool and comes bundled with npm. GYP, and therefore node-gyp,\nrequires that Python be installed.</p>\n<p>Historically, node-gyp has been the tool of choice for building native\naddons. It has widespread adoption and documentation. However, some\ndevelopers have run into limitations in node-gyp.</p>",
                  "type": "module",
                  "displayName": "node-gyp"
                }
              ],
              "properties": [
                {
                  "textRaw": "CMake.js",
                  "name": "js",
                  "desc": "<p><a href=\"https://github.com/cmake-js/cmake-js\">CMake.js</a> is an alternative build system based on <a href=\"https://cmake.org\">CMake</a>.</p>\n<p>CMake.js is a good choice for projects that already use CMake or for\ndevelopers affected by limitations in node-gyp.</p>"
                }
              ],
              "type": "module",
              "displayName": "Build tools"
            },
            {
              "textRaw": "Uploading precompiled binaries",
              "name": "uploading_precompiled_binaries",
              "desc": "<p>The three tools listed here permit native addon developers and maintainers\nto create and upload binaries to public or private servers. These tools are\ntypically integrated with CI/CD build systems like <a href=\"https://travis-ci.org\">Travis CI</a> and\n<a href=\"https://www.appveyor.com\">AppVeyor</a> to build and upload binaries for a variety of platforms and\narchitectures. These binaries are then available for download by users who\ndo not need to have a C/C++ toolchain installed.</p>",
              "modules": [
                {
                  "textRaw": "node-pre-gyp",
                  "name": "node-pre-gyp",
                  "desc": "<p><a href=\"https://github.com/mapbox/node-pre-gyp\">node-pre-gyp</a> is a tool based on node-gyp that adds the ability to\nupload binaries to a server of the developer's choice. node-pre-gyp has\nparticularly good support for uploading binaries to Amazon S3.</p>",
                  "type": "module",
                  "displayName": "node-pre-gyp"
                },
                {
                  "textRaw": "prebuild",
                  "name": "prebuild",
                  "desc": "<p><a href=\"https://github.com/prebuild/prebuild\">prebuild</a> is a tool that supports builds using either node-gyp or\nCMake.js. Unlike node-pre-gyp which supports a variety of servers, prebuild\nuploads binaries only to <a href=\"https://help.github.com/en/github/administering-a-repository/about-releases\">GitHub releases</a>. prebuild is a good choice for\nGitHub projects using CMake.js.</p>",
                  "type": "module",
                  "displayName": "prebuild"
                },
                {
                  "textRaw": "prebuildify",
                  "name": "prebuildify",
                  "desc": "<p><a href=\"https://github.com/prebuild/prebuildify\">prebuildify</a> is a tool based on node-gyp. The advantage of prebuildify is\nthat the built binaries are bundled with the native addon when it's\nuploaded to npm. The binaries are downloaded from npm and are immediately\navailable to the module user when the native addon is installed.</p>",
                  "type": "module",
                  "displayName": "prebuildify"
                }
              ],
              "type": "module",
              "displayName": "Uploading precompiled binaries"
            }
          ],
          "type": "misc",
          "displayName": "Building"
        },
        {
          "textRaw": "Usage",
          "name": "usage",
          "desc": "<p>In order to use the Node-API functions, include the file <a href=\"https://github.com/nodejs/node/blob/HEAD/src/node_api.h\"><code>node_api.h</code></a> which\nis located in the src directory in the node development tree:</p>\n<pre><code class=\"language-c\">#include &#x3C;node_api.h>\n</code></pre>\n<p>This will opt into the default <code>NAPI_VERSION</code> for the given release of Node.js.\nIn order to ensure compatibility with specific versions of Node-API, the version\ncan be specified explicitly when including the header:</p>\n<pre><code class=\"language-c\">#define NAPI_VERSION 3\n#include &#x3C;node_api.h>\n</code></pre>\n<p>This restricts the Node-API surface to just the functionality that was available\nin the specified (and earlier) versions.</p>\n<p>Some of the Node-API surface is experimental and requires explicit opt-in:</p>\n<pre><code class=\"language-c\">#define NAPI_EXPERIMENTAL\n#include &#x3C;node_api.h>\n</code></pre>\n<p>In this case the entire API surface, including any experimental APIs, will be\navailable to the module code.</p>",
          "type": "misc",
          "displayName": "Usage"
        },
        {
          "textRaw": "Node-API version matrix",
          "name": "node-api_version_matrix",
          "desc": "<p>Node-API versions are additive and versioned independently from Node.js.\nVersion 4 is an extension to version 3 in that it has all of the APIs\nfrom version 3 with some additions. This means that it is not necessary\nto recompile for new versions of Node.js which are\nlisted as supporting a later version.</p>\n<!-- For accessibility purposes, this table needs row headers. That means we\n     can't do it in markdown. Hence, the raw HTML. -->\n<table>\n  <tr>\n    <td></td>\n    <th scope=\"col\">1</th>\n    <th scope=\"col\">2</th>\n    <th scope=\"col\">3</th>\n  </tr>\n  <tr>\n    <th scope=\"row\">v6.x</th>\n    <td></td>\n    <td></td>\n    <td>v6.14.2*</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v8.x</th>\n    <td>v8.6.0**</td>\n    <td>v8.10.0*</td>\n    <td>v8.11.2</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v9.x</th>\n    <td>v9.0.0*</td>\n    <td>v9.3.0*</td>\n    <td>v9.11.0*</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">â¥ v10.x</th>\n    <td>all releases</td>\n    <td>all releases</td>\n    <td>all releases</td>\n  </tr>\n</table>\n<table>\n  <tr>\n    <td></td>\n    <th scope=\"col\">4</th>\n    <th scope=\"col\">5</th>\n    <th scope=\"col\">6</th>\n    <th scope=\"col\">7</th>\n    <th scope=\"col\">8</th>\n  </tr>\n  <tr>\n    <th scope=\"row\">v10.x</th>\n    <td>v10.16.0</td>\n    <td>v10.17.0</td>\n    <td>v10.20.0</td>\n    <td>v10.23.0</td>\n    <td></td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v11.x</th>\n    <td>v11.8.0</td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v12.x</th>\n    <td>v12.0.0</td>\n    <td>v12.11.0</td>\n    <td>v12.17.0</td>\n    <td>v12.19.0</td>\n    <td>v12.22.0</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v13.x</th>\n    <td>v13.0.0</td>\n    <td>v13.0.0</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v14.x</th>\n    <td>v14.0.0</td>\n    <td>v14.0.0</td>\n    <td>v14.0.0</td>\n    <td>v14.12.0</td>\n    <td>v14.17.0</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v15.x</th>\n    <td>v15.0.0</td>\n    <td>v15.0.0</td>\n    <td>v15.0.0</td>\n    <td>v15.0.0</td>\n    <td>v15.12.0</td>\n  </tr>\n  <tr>\n    <th scope=\"row\">v16.x</th>\n    <td>v16.0.0</td>\n    <td>v16.0.0</td>\n    <td>v16.0.0</td>\n    <td>v16.0.0</td>\n    <td>v16.0.0</td>\n  </tr>\n</table>\n<p>* Node-API was experimental.</p>\n<p>** Node.js 8.0.0 included Node-API as experimental. It was released as\nNode-API version 1 but continued to evolve until Node.js 8.6.0. The API is\ndifferent in versions prior to Node.js 8.6.0. We recommend Node-API version 3 or\nlater.</p>\n<p>Each API documented for Node-API will have a header named <code>added in:</code>, and APIs\nwhich are stable will have the additional header <code>Node-API version:</code>.\nAPIs are directly usable when using a Node.js version which supports\nthe Node-API version shown in <code>Node-API version:</code> or higher.\nWhen using a Node.js version that does not support the\n<code>Node-API version:</code> listed or if there is no <code>Node-API version:</code> listed,\nthen the API will only be available if\n<code>#define NAPI_EXPERIMENTAL</code> precedes the inclusion of <code>node_api.h</code>\nor <code>js_native_api.h</code>. If an API appears not to be available on\na version of Node.js which is later than the one shown in <code>added in:</code> then\nthis is most likely the reason for the apparent absence.</p>\n<p>The Node-APIs associated strictly with accessing ECMAScript features from native\ncode can be found separately in <code>js_native_api.h</code> and <code>js_native_api_types.h</code>.\nThe APIs defined in these headers are included in <code>node_api.h</code> and\n<code>node_api_types.h</code>. The headers are structured in this way in order to allow\nimplementations of Node-API outside of Node.js. For those implementations the\nNode.js specific APIs may not be applicable.</p>\n<p>The Node.js-specific parts of an addon can be separated from the code that\nexposes the actual functionality to the JavaScript environment so that the\nlatter may be used with multiple implementations of Node-API. In the example\nbelow, <code>addon.c</code> and <code>addon.h</code> refer only to <code>js_native_api.h</code>. This ensures\nthat <code>addon.c</code> can be reused to compile against either the Node.js\nimplementation of Node-API or any implementation of Node-API outside of Node.js.</p>\n<p><code>addon_node.c</code> is a separate file that contains the Node.js specific entry point\nto the addon and which instantiates the addon by calling into <code>addon.c</code> when the\naddon is loaded into a Node.js environment.</p>\n<pre><code class=\"language-c\">// addon.h\n#ifndef _ADDON_H_\n#define _ADDON_H_\n#include &#x3C;js_native_api.h>\nnapi_value create_addon(napi_env env);\n#endif  // _ADDON_H_\n</code></pre>\n<pre><code class=\"language-c\">// addon.c\n#include \"addon.h\"\n\n#define NAPI_CALL(env, call)                                      \\\n  do {                                                            \\\n    napi_status status = (call);                                  \\\n    if (status != napi_ok) {                                      \\\n      const napi_extended_error_info* error_info = NULL;          \\\n      napi_get_last_error_info((env), &#x26;error_info);               \\\n      const char* err_message = error_info->error_message;        \\\n      bool is_pending;                                            \\\n      napi_is_exception_pending((env), &#x26;is_pending);              \\\n      if (!is_pending) {                                          \\\n        const char* message = (err_message == NULL)               \\\n            ? \"empty error message\"                               \\\n            : err_message;                                        \\\n        napi_throw_error((env), NULL, message);                   \\\n        return NULL;                                              \\\n      }                                                           \\\n    }                                                             \\\n  } while(0)\n\nstatic napi_value\nDoSomethingUseful(napi_env env, napi_callback_info info) {\n  // Do something useful.\n  return NULL;\n}\n\nnapi_value create_addon(napi_env env) {\n  napi_value result;\n  NAPI_CALL(env, napi_create_object(env, &#x26;result));\n\n  napi_value exported_function;\n  NAPI_CALL(env, napi_create_function(env,\n                                      \"doSomethingUseful\",\n                                      NAPI_AUTO_LENGTH,\n                                      DoSomethingUseful,\n                                      NULL,\n                                      &#x26;exported_function));\n\n  NAPI_CALL(env, napi_set_named_property(env,\n                                         result,\n                                         \"doSomethingUseful\",\n                                         exported_function));\n\n  return result;\n}\n</code></pre>\n<pre><code class=\"language-c\">// addon_node.c\n#include &#x3C;node_api.h>\n#include \"addon.h\"\n\nNAPI_MODULE_INIT() {\n  // This function body is expected to return a `napi_value`.\n  // The variables `napi_env env` and `napi_value exports` may be used within\n  // the body, as they are provided by the definition of `NAPI_MODULE_INIT()`.\n  return create_addon(env);\n}\n</code></pre>",
          "type": "misc",
          "displayName": "Node-API version matrix"
        },
        {
          "textRaw": "Environment life cycle APIs",
          "name": "environment_life_cycle_apis",
          "desc": "<p><a href=\"https://tc39.es/ecma262/#sec-agents\">Section 8.7</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a> defines the concept\nof an \"Agent\" as a self-contained environment in which JavaScript code runs.\nMultiple such Agents may be started and terminated either concurrently or in\nsequence by the process.</p>\n<p>A Node.js environment corresponds to an ECMAScript Agent. In the main process,\nan environment is created at startup, and additional environments can be created\non separate threads to serve as <a href=\"https://nodejs.org/api/worker_threads.html\">worker threads</a>. When Node.js is embedded in\nanother application, the main thread of the application may also construct and\ndestroy a Node.js environment multiple times during the life cycle of the\napplication process such that each Node.js environment created by the\napplication may, in turn, during its life cycle create and destroy additional\nenvironments as worker threads.</p>\n<p>From the perspective of a native addon this means that the bindings it provides\nmay be called multiple times, from multiple contexts, and even concurrently from\nmultiple threads.</p>\n<p>Native addons may need to allocate global state which they use during\ntheir entire life cycle such that the state must be unique to each instance of\nthe addon.</p>\n<p>To this end, Node-API provides a way to allocate data such that its life cycle\nis tied to the life cycle of the Agent.</p>",
          "modules": [
            {
              "textRaw": "`napi_set_instance_data`",
              "name": "`napi_set_instance_data`",
              "meta": {
                "added": [
                  "v12.8.0",
                  "v10.20.0"
                ],
                "napiVersion": [
                  6
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_set_instance_data(napi_env env,\n                                   void* data,\n                                   napi_finalize finalize_cb,\n                                   void* finalize_hint);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] data</code>: The data item to make available to bindings of this instance.</li>\n<li><code>[in] finalize_cb</code>: The function to call when the environment is being torn\ndown. The function receives <code>data</code> so that it might free it.\n<a href=\"#napi_finalize\"><code>napi_finalize</code></a> provides more details.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during\ncollection.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API associates <code>data</code> with the currently running Agent. <code>data</code> can later\nbe retrieved using <code>napi_get_instance_data()</code>. Any existing data associated with\nthe currently running Agent which was set by means of a previous call to\n<code>napi_set_instance_data()</code> will be overwritten. If a <code>finalize_cb</code> was provided\nby the previous call, it will not be called.</p>",
              "type": "module",
              "displayName": "`napi_set_instance_data`"
            },
            {
              "textRaw": "`napi_get_instance_data`",
              "name": "`napi_get_instance_data`",
              "meta": {
                "added": [
                  "v12.8.0",
                  "v10.20.0"
                ],
                "napiVersion": [
                  6
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_get_instance_data(napi_env env,\n                                   void** data);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[out] data</code>: The data item that was previously associated with the currently\nrunning Agent by a call to <code>napi_set_instance_data()</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API retrieves data that was previously associated with the currently\nrunning Agent via <code>napi_set_instance_data()</code>. If no data is set, the call will\nsucceed and <code>data</code> will be set to <code>NULL</code>.</p>",
              "type": "module",
              "displayName": "`napi_get_instance_data`"
            }
          ],
          "type": "misc",
          "displayName": "Environment life cycle APIs"
        },
        {
          "textRaw": "Basic Node-API data types",
          "name": "basic_node-api_data_types",
          "desc": "<p>Node-API exposes the following fundamental datatypes as abstractions that are\nconsumed by the various APIs. These APIs should be treated as opaque,\nintrospectable only with other Node-API calls.</p>",
          "modules": [
            {
              "textRaw": "`napi_status`",
              "name": "`napi_status`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<p>Integral status code indicating the success or failure of a Node-API call.\nCurrently, the following status codes are supported.</p>\n<pre><code class=\"language-c\">typedef enum {\n  napi_ok,\n  napi_invalid_arg,\n  napi_object_expected,\n  napi_string_expected,\n  napi_name_expected,\n  napi_function_expected,\n  napi_number_expected,\n  napi_boolean_expected,\n  napi_array_expected,\n  napi_generic_failure,\n  napi_pending_exception,\n  napi_cancelled,\n  napi_escape_called_twice,\n  napi_handle_scope_mismatch,\n  napi_callback_scope_mismatch,\n  napi_queue_full,\n  napi_closing,\n  napi_bigint_expected,\n  napi_date_expected,\n  napi_arraybuffer_expected,\n  napi_detachable_arraybuffer_expected,\n  napi_would_deadlock,  /* unused */\n  napi_no_external_buffers_allowed\n} napi_status;\n</code></pre>\n<p>If additional information is required upon an API returning a failed status,\nit can be obtained by calling <code>napi_get_last_error_info</code>.</p>",
              "type": "module",
              "displayName": "`napi_status`"
            },
            {
              "textRaw": "`napi_extended_error_info`",
              "name": "`napi_extended_error_info`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">typedef struct {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n} napi_extended_error_info;\n</code></pre>\n<ul>\n<li><code>error_message</code>: UTF8-encoded string containing a VM-neutral description of\nthe error.</li>\n<li><code>engine_reserved</code>: Reserved for VM-specific error details. This is currently\nnot implemented for any VM.</li>\n<li><code>engine_error_code</code>: VM-specific error code. This is currently\nnot implemented for any VM.</li>\n<li><code>error_code</code>: The Node-API status code that originated with the last error.</li>\n</ul>\n<p>See the <a href=\"#error-handling\">Error handling</a> section for additional information.</p>",
              "type": "module",
              "displayName": "`napi_extended_error_info`"
            },
            {
              "textRaw": "`napi_env`",
              "name": "`napi_env`",
              "desc": "<p><code>napi_env</code> is used to represent a context that the underlying Node-API\nimplementation can use to persist VM-specific state. This structure is passed\nto native functions when they're invoked, and it must be passed back when\nmaking Node-API calls. Specifically, the same <code>napi_env</code> that was passed in when\nthe initial native function was called must be passed to any subsequent\nnested Node-API calls. Caching the <code>napi_env</code> for the purpose of general reuse,\nand passing the <code>napi_env</code> between instances of the same addon running on\ndifferent <a href=\"worker_threads.html#class-worker\"><code>Worker</code></a> threads is not allowed. The <code>napi_env</code> becomes invalid\nwhen an instance of a native addon is unloaded. Notification of this event is\ndelivered through the callbacks given to <a href=\"#napi_add_env_cleanup_hook\"><code>napi_add_env_cleanup_hook</code></a> and\n<a href=\"#napi_set_instance_data\"><code>napi_set_instance_data</code></a>.</p>",
              "type": "module",
              "displayName": "`napi_env`"
            },
            {
              "textRaw": "`napi_value`",
              "name": "`napi_value`",
              "desc": "<p>This is an opaque pointer that is used to represent a JavaScript value.</p>",
              "type": "module",
              "displayName": "`napi_value`"
            },
            {
              "textRaw": "`napi_threadsafe_function`",
              "name": "`napi_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<p>This is an opaque pointer that represents a JavaScript function which can be\ncalled asynchronously from multiple threads via\n<code>napi_call_threadsafe_function()</code>.</p>",
              "type": "module",
              "displayName": "`napi_threadsafe_function`"
            },
            {
              "textRaw": "`napi_threadsafe_function_release_mode`",
              "name": "`napi_threadsafe_function_release_mode`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<p>A value to be given to <code>napi_release_threadsafe_function()</code> to indicate whether\nthe thread-safe function is to be closed immediately (<code>napi_tsfn_abort</code>) or\nmerely released (<code>napi_tsfn_release</code>) and thus available for subsequent use via\n<code>napi_acquire_threadsafe_function()</code> and <code>napi_call_threadsafe_function()</code>.</p>\n<pre><code class=\"language-c\">typedef enum {\n  napi_tsfn_release,\n  napi_tsfn_abort\n} napi_threadsafe_function_release_mode;\n</code></pre>",
              "type": "module",
              "displayName": "`napi_threadsafe_function_release_mode`"
            },
            {
              "textRaw": "`napi_threadsafe_function_call_mode`",
              "name": "`napi_threadsafe_function_call_mode`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<p>A value to be given to <code>napi_call_threadsafe_function()</code> to indicate whether\nthe call should block whenever the queue associated with the thread-safe\nfunction is full.</p>\n<pre><code class=\"language-c\">typedef enum {\n  napi_tsfn_nonblocking,\n  napi_tsfn_blocking\n} napi_threadsafe_function_call_mode;\n</code></pre>",
              "type": "module",
              "displayName": "`napi_threadsafe_function_call_mode`"
            },
            {
              "textRaw": "Node-API memory management types",
              "name": "node-api_memory_management_types",
              "modules": [
                {
                  "textRaw": "`napi_handle_scope`",
                  "name": "`napi_handle_scope`",
                  "desc": "<p>This is an abstraction used to control and modify the lifetime of objects\ncreated within a particular scope. In general, Node-API values are created\nwithin the context of a handle scope. When a native method is called from\nJavaScript, a default handle scope will exist. If the user does not explicitly\ncreate a new handle scope, Node-API values will be created in the default handle\nscope. For any invocations of code outside the execution of a native method\n(for instance, during a libuv callback invocation), the module is required to\ncreate a scope before invoking any functions that can result in the creation\nof JavaScript values.</p>\n<p>Handle scopes are created using <a href=\"#napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and are destroyed\nusing <a href=\"#napi_close_handle_scope\"><code>napi_close_handle_scope</code></a>. Closing the scope can indicate to the GC\nthat all <code>napi_value</code>s created during the lifetime of the handle scope are no\nlonger referenced from the current stack frame.</p>\n<p>For more details, review the <a href=\"#object-lifetime-management\">Object lifetime management</a>.</p>",
                  "type": "module",
                  "displayName": "`napi_handle_scope`"
                },
                {
                  "textRaw": "`napi_escapable_handle_scope`",
                  "name": "`napi_escapable_handle_scope`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>Escapable handle scopes are a special type of handle scope to return values\ncreated within a particular handle scope to a parent scope.</p>",
                  "type": "module",
                  "displayName": "`napi_escapable_handle_scope`"
                },
                {
                  "textRaw": "`napi_ref`",
                  "name": "`napi_ref`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>This is the abstraction to use to reference a <code>napi_value</code>. This allows for\nusers to manage the lifetimes of JavaScript values, including defining their\nminimum lifetimes explicitly.</p>\n<p>For more details, review the <a href=\"#object-lifetime-management\">Object lifetime management</a>.</p>",
                  "type": "module",
                  "displayName": "`napi_ref`"
                },
                {
                  "textRaw": "`napi_type_tag`",
                  "name": "`napi_type_tag`",
                  "meta": {
                    "added": [
                      "v14.8.0",
                      "v12.19.0"
                    ],
                    "napiVersion": [
                      8
                    ],
                    "changes": []
                  },
                  "desc": "<p>A 128-bit value stored as two unsigned 64-bit integers. It serves as a UUID\nwith which JavaScript objects can be \"tagged\" in order to ensure that they are\nof a certain type. This is a stronger check than <a href=\"#napi_instanceof\"><code>napi_instanceof</code></a>, because\nthe latter can report a false positive if the object's prototype has been\nmanipulated. Type-tagging is most useful in conjunction with <a href=\"#napi_wrap\"><code>napi_wrap</code></a>\nbecause it ensures that the pointer retrieved from a wrapped object can be\nsafely cast to the native type corresponding to the type tag that had been\npreviously applied to the JavaScript object.</p>\n<pre><code class=\"language-c\">typedef struct {\n  uint64_t lower;\n  uint64_t upper;\n} napi_type_tag;\n</code></pre>",
                  "type": "module",
                  "displayName": "`napi_type_tag`"
                },
                {
                  "textRaw": "`napi_async_cleanup_hook_handle`",
                  "name": "`napi_async_cleanup_hook_handle`",
                  "meta": {
                    "added": [
                      "v14.10.0",
                      "v12.19.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>An opaque value returned by <a href=\"#napi_add_async_cleanup_hook\"><code>napi_add_async_cleanup_hook</code></a>. It must be passed\nto <a href=\"#napi_remove_async_cleanup_hook\"><code>napi_remove_async_cleanup_hook</code></a> when the chain of asynchronous cleanup\nevents completes.</p>",
                  "type": "module",
                  "displayName": "`napi_async_cleanup_hook_handle`"
                }
              ],
              "type": "module",
              "displayName": "Node-API memory management types"
            },
            {
              "textRaw": "Node-API callback types",
              "name": "node-api_callback_types",
              "modules": [
                {
                  "textRaw": "`napi_callback_info`",
                  "name": "`napi_callback_info`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>Opaque datatype that is passed to a callback function. It can be used for\ngetting additional information about the context in which the callback was\ninvoked.</p>",
                  "type": "module",
                  "displayName": "`napi_callback_info`"
                },
                {
                  "textRaw": "`napi_callback`",
                  "name": "`napi_callback`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer type for user-provided native functions which are to be\nexposed to JavaScript via Node-API. Callback functions should satisfy the\nfollowing signature:</p>\n<pre><code class=\"language-c\">typedef napi_value (*napi_callback)(napi_env, napi_callback_info);\n</code></pre>\n<p>Unless for reasons discussed in <a href=\"#object-lifetime-management\">Object Lifetime Management</a>, creating a\nhandle and/or callback scope inside a <code>napi_callback</code> is not necessary.</p>",
                  "type": "module",
                  "displayName": "`napi_callback`"
                },
                {
                  "textRaw": "`napi_finalize`",
                  "name": "`napi_finalize`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer type for add-on provided functions that allow the user to be\nnotified when externally-owned data is ready to be cleaned up because the\nobject with which it was associated with, has been garbage-collected. The user\nmust provide a function satisfying the following signature which would get\ncalled upon the object's collection. Currently, <code>napi_finalize</code> can be used for\nfinding out when objects that have external data are collected.</p>\n<pre><code class=\"language-c\">typedef void (*napi_finalize)(napi_env env,\n                              void* finalize_data,\n                              void* finalize_hint);\n</code></pre>\n<p>Unless for reasons discussed in <a href=\"#object-lifetime-management\">Object Lifetime Management</a>, creating a\nhandle and/or callback scope inside the function body is not necessary.</p>",
                  "type": "module",
                  "displayName": "`napi_finalize`"
                },
                {
                  "textRaw": "`napi_async_execute_callback`",
                  "name": "`napi_async_execute_callback`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer used with functions that support asynchronous\noperations. Callback functions must satisfy the following signature:</p>\n<pre><code class=\"language-c\">typedef void (*napi_async_execute_callback)(napi_env env, void* data);\n</code></pre>\n<p>Implementations of this function must avoid making Node-API calls that execute\nJavaScript or interact with JavaScript objects. Node-API calls should be in the\n<code>napi_async_complete_callback</code> instead. Do not use the <code>napi_env</code> parameter as\nit will likely result in execution of JavaScript.</p>",
                  "type": "module",
                  "displayName": "`napi_async_execute_callback`"
                },
                {
                  "textRaw": "`napi_async_complete_callback`",
                  "name": "`napi_async_complete_callback`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer used with functions that support asynchronous\noperations. Callback functions must satisfy the following signature:</p>\n<pre><code class=\"language-c\">typedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\n</code></pre>\n<p>Unless for reasons discussed in <a href=\"#object-lifetime-management\">Object Lifetime Management</a>, creating a\nhandle and/or callback scope inside the function body is not necessary.</p>",
                  "type": "module",
                  "displayName": "`napi_async_complete_callback`"
                },
                {
                  "textRaw": "`napi_threadsafe_function_call_js`",
                  "name": "`napi_threadsafe_function_call_js`",
                  "meta": {
                    "added": [
                      "v10.6.0"
                    ],
                    "napiVersion": [
                      4
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer used with asynchronous thread-safe function calls. The callback\nwill be called on the main thread. Its purpose is to use a data item arriving\nvia the queue from one of the secondary threads to construct the parameters\nnecessary for a call into JavaScript, usually via <code>napi_call_function</code>, and then\nmake the call into JavaScript.</p>\n<p>The data arriving from the secondary thread via the queue is given in the <code>data</code>\nparameter and the JavaScript function to call is given in the <code>js_callback</code>\nparameter.</p>\n<p>Node-API sets up the environment prior to calling this callback, so it is\nsufficient to call the JavaScript function via <code>napi_call_function</code> rather than\nvia <code>napi_make_callback</code>.</p>\n<p>Callback functions must satisfy the following signature:</p>\n<pre><code class=\"language-c\">typedef void (*napi_threadsafe_function_call_js)(napi_env env,\n                                                 napi_value js_callback,\n                                                 void* context,\n                                                 void* data);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment to use for API calls, or <code>NULL</code> if the thread-safe\nfunction is being torn down and <code>data</code> may need to be freed.</li>\n<li><code>[in] js_callback</code>: The JavaScript function to call, or <code>NULL</code> if the\nthread-safe function is being torn down and <code>data</code> may need to be freed. It\nmay also be <code>NULL</code> if the thread-safe function was created without\n<code>js_callback</code>.</li>\n<li><code>[in] context</code>: The optional data with which the thread-safe function was\ncreated.</li>\n<li><code>[in] data</code>: Data created by the secondary thread. It is the responsibility of\nthe callback to convert this native data to JavaScript values (with Node-API\nfunctions) that can be passed as parameters when <code>js_callback</code> is invoked.\nThis pointer is managed entirely by the threads and this callback. Thus this\ncallback should free the data.</li>\n</ul>\n<p>Unless for reasons discussed in <a href=\"#object-lifetime-management\">Object Lifetime Management</a>, creating a\nhandle and/or callback scope inside the function body is not necessary.</p>",
                  "type": "module",
                  "displayName": "`napi_threadsafe_function_call_js`"
                },
                {
                  "textRaw": "`napi_cleanup_hook`",
                  "name": "`napi_cleanup_hook`",
                  "meta": {
                    "added": [
                      "v19.2.0",
                      "v18.13.0"
                    ],
                    "napiVersion": [
                      3
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer used with <a href=\"#napi_add_env_cleanup_hook\"><code>napi_add_env_cleanup_hook</code></a>. It will be called\nwhen the environment is being torn down.</p>\n<p>Callback functions must satisfy the following signature:</p>\n<pre><code class=\"language-c\">typedef void (*napi_cleanup_hook)(void* data);\n</code></pre>\n<ul>\n<li><code>[in] data</code>: The data that was passed to <a href=\"#napi_add_env_cleanup_hook\"><code>napi_add_env_cleanup_hook</code></a>.</li>\n</ul>",
                  "type": "module",
                  "displayName": "`napi_cleanup_hook`"
                },
                {
                  "textRaw": "`napi_async_cleanup_hook`",
                  "name": "`napi_async_cleanup_hook`",
                  "meta": {
                    "added": [
                      "v14.10.0",
                      "v12.19.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Function pointer used with <a href=\"#napi_add_async_cleanup_hook\"><code>napi_add_async_cleanup_hook</code></a>. It will be called\nwhen the environment is being torn down.</p>\n<p>Callback functions must satisfy the following signature:</p>\n<pre><code class=\"language-c\">typedef void (*napi_async_cleanup_hook)(napi_async_cleanup_hook_handle handle,\n                                        void* data);\n</code></pre>\n<ul>\n<li><code>[in] handle</code>: The handle that must be passed to\n<a href=\"#napi_remove_async_cleanup_hook\"><code>napi_remove_async_cleanup_hook</code></a> after completion of the asynchronous\ncleanup.</li>\n<li><code>[in] data</code>: The data that was passed to <a href=\"#napi_add_async_cleanup_hook\"><code>napi_add_async_cleanup_hook</code></a>.</li>\n</ul>\n<p>The body of the function should initiate the asynchronous cleanup actions at the\nend of which <code>handle</code> must be passed in a call to\n<a href=\"#napi_remove_async_cleanup_hook\"><code>napi_remove_async_cleanup_hook</code></a>.</p>",
                  "type": "module",
                  "displayName": "`napi_async_cleanup_hook`"
                }
              ],
              "type": "module",
              "displayName": "Node-API callback types"
            }
          ],
          "type": "misc",
          "displayName": "Basic Node-API data types"
        },
        {
          "textRaw": "Error handling",
          "name": "error_handling",
          "desc": "<p>Node-API uses both return values and JavaScript exceptions for error handling.\nThe following sections explain the approach for each case.</p>",
          "modules": [
            {
              "textRaw": "Return values",
              "name": "return_values",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<p>All of the Node-API functions share the same error handling pattern. The\nreturn type of all API functions is <code>napi_status</code>.</p>\n<p>The return value will be <code>napi_ok</code> if the request was successful and\nno uncaught JavaScript exception was thrown. If an error occurred AND\nan exception was thrown, the <code>napi_status</code> value for the error\nwill be returned. If an exception was thrown, and no error occurred,\n<code>napi_pending_exception</code> will be returned.</p>\n<p>In cases where a return value other than <code>napi_ok</code> or\n<code>napi_pending_exception</code> is returned, <a href=\"#napi_is_exception_pending\"><code>napi_is_exception_pending</code></a>\nmust be called to check if an exception is pending.\nSee the section on exceptions for more details.</p>\n<p>The full set of possible <code>napi_status</code> values is defined\nin <code>napi_api_types.h</code>.</p>\n<p>The <code>napi_status</code> return value provides a VM-independent representation of\nthe error which occurred. In some cases it is useful to be able to get\nmore detailed information, including a string representing the error as well as\nVM (engine)-specific information.</p>\n<p>In order to retrieve this information <a href=\"#napi_get_last_error_info\"><code>napi_get_last_error_info</code></a>\nis provided which returns a <code>napi_extended_error_info</code> structure.\nThe format of the <code>napi_extended_error_info</code> structure is as follows:</p>\n<pre><code class=\"language-c\">typedef struct napi_extended_error_info {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n};\n</code></pre>\n<ul>\n<li><code>error_message</code>: Textual representation of the error that occurred.</li>\n<li><code>engine_reserved</code>: Opaque handle reserved for engine use only.</li>\n<li><code>engine_error_code</code>: VM specific error code.</li>\n<li><code>error_code</code>: Node-API status code for the last error.</li>\n</ul>\n<p><a href=\"#napi_get_last_error_info\"><code>napi_get_last_error_info</code></a> returns the information for the last\nNode-API call that was made.</p>\n<p>Do not rely on the content or format of any of the extended information as it\nis not subject to SemVer and may change at any time. It is intended only for\nlogging purposes.</p>",
              "modules": [
                {
                  "textRaw": "`napi_get_last_error_info`",
                  "name": "`napi_get_last_error_info`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status\nnapi_get_last_error_info(napi_env env,\n                         const napi_extended_error_info** result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: The <code>napi_extended_error_info</code> structure with more\ninformation about the error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API retrieves a <code>napi_extended_error_info</code> structure with information\nabout the last error that occurred.</p>\n<p>The content of the <code>napi_extended_error_info</code> returned is only valid up until\na Node-API function is called on the same <code>env</code>. This includes a call to\n<code>napi_is_exception_pending</code> so it may often be necessary to make a copy\nof the information so that it can be used later. The pointer returned\nin <code>error_message</code> points to a statically-defined string so it is safe to use\nthat pointer if you have copied it out of the <code>error_message</code> field (which will\nbe overwritten) before another Node-API function was called.</p>\n<p>Do not rely on the content or format of any of the extended information as it\nis not subject to SemVer and may change at any time. It is intended only for\nlogging purposes.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_get_last_error_info`"
                }
              ],
              "type": "module",
              "displayName": "Return values"
            },
            {
              "textRaw": "Exceptions",
              "name": "exceptions",
              "desc": "<p>Any Node-API function call may result in a pending JavaScript exception. This is\nthe case for any of the API functions, even those that may not cause the\nexecution of JavaScript.</p>\n<p>If the <code>napi_status</code> returned by a function is <code>napi_ok</code> then no\nexception is pending and no additional action is required. If the\n<code>napi_status</code> returned is anything other than <code>napi_ok</code> or\n<code>napi_pending_exception</code>, in order to try to recover and continue\ninstead of simply returning immediately, <a href=\"#napi_is_exception_pending\"><code>napi_is_exception_pending</code></a>\nmust be called in order to determine if an exception is pending or not.</p>\n<p>In many cases when a Node-API function is called and an exception is\nalready pending, the function will return immediately with a\n<code>napi_status</code> of <code>napi_pending_exception</code>. However, this is not the case\nfor all functions. Node-API allows a subset of the functions to be\ncalled to allow for some minimal cleanup before returning to JavaScript.\nIn that case, <code>napi_status</code> will reflect the status for the function. It\nwill not reflect previous pending exceptions. To avoid confusion, check\nthe error status after every function call.</p>\n<p>When an exception is pending one of two approaches can be employed.</p>\n<p>The first approach is to do any appropriate cleanup and then return so that\nexecution will return to JavaScript. As part of the transition back to\nJavaScript, the exception will be thrown at the point in the JavaScript\ncode where the native method was invoked. The behavior of most Node-API calls\nis unspecified while an exception is pending, and many will simply return\n<code>napi_pending_exception</code>, so do as little as possible and then return to\nJavaScript where the exception can be handled.</p>\n<p>The second approach is to try to handle the exception. There will be cases\nwhere the native code can catch the exception, take the appropriate action,\nand then continue. This is only recommended in specific cases\nwhere it is known that the exception can be safely handled. In these\ncases <a href=\"#napi_get_and_clear_last_exception\"><code>napi_get_and_clear_last_exception</code></a> can be used to get and\nclear the exception. On success, result will contain the handle to\nthe last JavaScript <code>Object</code> thrown. If it is determined, after\nretrieving the exception, the exception cannot be handled after all\nit can be re-thrown it with <a href=\"#napi_throw\"><code>napi_throw</code></a> where error is the\nJavaScript value to be thrown.</p>\n<p>The following utility functions are also available in case native code\nneeds to throw an exception or determine if a <code>napi_value</code> is an instance\nof a JavaScript <code>Error</code> object: <a href=\"#napi_throw_error\"><code>napi_throw_error</code></a>,\n<a href=\"#napi_throw_type_error\"><code>napi_throw_type_error</code></a>, <a href=\"#napi_throw_range_error\"><code>napi_throw_range_error</code></a>, <a href=\"#node_api_throw_syntax_error\"><code>node_api_throw_syntax_error</code></a> and <a href=\"#napi_is_error\"><code>napi_is_error</code></a>.</p>\n<p>The following utility functions are also available in case native\ncode needs to create an <code>Error</code> object: <a href=\"#napi_create_error\"><code>napi_create_error</code></a>,\n<a href=\"#napi_create_type_error\"><code>napi_create_type_error</code></a>, <a href=\"#napi_create_range_error\"><code>napi_create_range_error</code></a> and <a href=\"#node_api_create_syntax_error\"><code>node_api_create_syntax_error</code></a>,\nwhere result is the <code>napi_value</code> that refers to the newly created\nJavaScript <code>Error</code> object.</p>\n<p>The Node.js project is adding error codes to all of the errors\ngenerated internally. The goal is for applications to use these\nerror codes for all error checking. The associated error messages\nwill remain, but will only be meant to be used for logging and\ndisplay with the expectation that the message can change without\nSemVer applying. In order to support this model with Node-API, both\nin internal functionality and for module specific functionality\n(as its good practice), the <code>throw_</code> and <code>create_</code> functions\ntake an optional code parameter which is the string for the code\nto be added to the error object. If the optional parameter is <code>NULL</code>\nthen no code will be associated with the error. If a code is provided,\nthe name associated with the error is also updated to be:</p>\n<pre><code class=\"language-text\">originalName [code]\n</code></pre>\n<p>where <code>originalName</code> is the original name associated with the error\nand <code>code</code> is the code that was provided. For example, if the code\nis <code>'ERR_ERROR_1'</code> and a <code>TypeError</code> is being created the name will be:</p>\n<pre><code class=\"language-text\">TypeError [ERR_ERROR_1]\n</code></pre>",
              "modules": [
                {
                  "textRaw": "`napi_throw`",
                  "name": "`napi_throw`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_throw(napi_env env, napi_value error);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] error</code>: The JavaScript value to be thrown.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws the JavaScript value provided.</p>",
                  "type": "module",
                  "displayName": "`napi_throw`"
                },
                {
                  "textRaw": "`napi_throw_error`",
                  "name": "`napi_throw_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_throw_error(napi_env env,\n                                         const char* code,\n                                         const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with the error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>Error</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`napi_throw_error`"
                },
                {
                  "textRaw": "`napi_throw_type_error`",
                  "name": "`napi_throw_type_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_throw_type_error(napi_env env,\n                                              const char* code,\n                                              const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with the error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>TypeError</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`napi_throw_type_error`"
                },
                {
                  "textRaw": "`napi_throw_range_error`",
                  "name": "`napi_throw_range_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_throw_range_error(napi_env env,\n                                               const char* code,\n                                               const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with the error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>RangeError</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`napi_throw_range_error`"
                },
                {
                  "textRaw": "`node_api_throw_syntax_error`",
                  "name": "`node_api_throw_syntax_error`",
                  "meta": {
                    "added": [
                      "v17.2.0",
                      "v16.14.0"
                    ],
                    "changes": []
                  },
                  "stability": 1,
                  "stabilityText": "Experimental",
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status node_api_throw_syntax_error(napi_env env,\n                                                    const char* code,\n                                                    const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with the error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>SyntaxError</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`node_api_throw_syntax_error`"
                },
                {
                  "textRaw": "`napi_is_error`",
                  "name": "`napi_is_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_is_error(napi_env env,\n                                      napi_value value,\n                                      bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The <code>napi_value</code> to be checked.</li>\n<li><code>[out] result</code>: Boolean value that is set to true if <code>napi_value</code> represents\nan error, false otherwise.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API queries a <code>napi_value</code> to check if it represents an error object.</p>",
                  "type": "module",
                  "displayName": "`napi_is_error`"
                },
                {
                  "textRaw": "`napi_create_error`",
                  "name": "`napi_create_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_create_error(napi_env env,\n                                          napi_value code,\n                                          napi_value msg,\n                                          napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to be\nassociated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>string</code> to be used as\nthe message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>Error</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`napi_create_error`"
                },
                {
                  "textRaw": "`napi_create_type_error`",
                  "name": "`napi_create_type_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_create_type_error(napi_env env,\n                                               napi_value code,\n                                               napi_value msg,\n                                               napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to be\nassociated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>string</code> to be used as\nthe message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>TypeError</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`napi_create_type_error`"
                },
                {
                  "textRaw": "`napi_create_range_error`",
                  "name": "`napi_create_range_error`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_create_range_error(napi_env env,\n                                                napi_value code,\n                                                napi_value msg,\n                                                napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to be\nassociated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>string</code> to be used as\nthe message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>RangeError</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`napi_create_range_error`"
                },
                {
                  "textRaw": "`node_api_create_syntax_error`",
                  "name": "`node_api_create_syntax_error`",
                  "meta": {
                    "added": [
                      "v17.2.0",
                      "v16.14.0"
                    ],
                    "changes": []
                  },
                  "stability": 1,
                  "stabilityText": "Experimental",
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status node_api_create_syntax_error(napi_env env,\n                                                     napi_value code,\n                                                     napi_value msg,\n                                                     napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to be\nassociated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>string</code> to be used as\nthe message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>SyntaxError</code> with the text provided.</p>",
                  "type": "module",
                  "displayName": "`node_api_create_syntax_error`"
                },
                {
                  "textRaw": "`napi_get_and_clear_last_exception`",
                  "name": "`napi_get_and_clear_last_exception`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_and_clear_last_exception(napi_env env,\n                                              napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: The exception if one is pending, <code>NULL</code> otherwise.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_get_and_clear_last_exception`"
                },
                {
                  "textRaw": "`napi_is_exception_pending`",
                  "name": "`napi_is_exception_pending`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_is_exception_pending(napi_env env, bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: Boolean value that is set to true if an exception is pending.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_is_exception_pending`"
                },
                {
                  "textRaw": "`napi_fatal_exception`",
                  "name": "`napi_fatal_exception`",
                  "meta": {
                    "added": [
                      "v9.10.0"
                    ],
                    "napiVersion": [
                      3
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_fatal_exception(napi_env env, napi_value err);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] err</code>: The error that is passed to <code>'uncaughtException'</code>.</li>\n</ul>\n<p>Trigger an <code>'uncaughtException'</code> in JavaScript. Useful if an async\ncallback throws an exception with no way to recover.</p>",
                  "type": "module",
                  "displayName": "`napi_fatal_exception`"
                }
              ],
              "type": "module",
              "displayName": "Exceptions"
            },
            {
              "textRaw": "Fatal errors",
              "name": "fatal_errors",
              "desc": "<p>In the event of an unrecoverable error in a native addon, a fatal error can be\nthrown to immediately terminate the process.</p>",
              "modules": [
                {
                  "textRaw": "`napi_fatal_error`",
                  "name": "`napi_fatal_error`",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_NO_RETURN void napi_fatal_error(const char* location,\n                                     size_t location_len,\n                                     const char* message,\n                                     size_t message_len);\n</code></pre>\n<ul>\n<li><code>[in] location</code>: Optional location at which the error occurred.</li>\n<li><code>[in] location_len</code>: The length of the location in bytes, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[in] message</code>: The message associated with the error.</li>\n<li><code>[in] message_len</code>: The length of the message in bytes, or <code>NAPI_AUTO_LENGTH</code>\nif it is null-terminated.</li>\n</ul>\n<p>The function call does not return, the process will be terminated.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_fatal_error`"
                }
              ],
              "type": "module",
              "displayName": "Fatal errors"
            }
          ],
          "type": "misc",
          "displayName": "Error handling"
        },
        {
          "textRaw": "Object lifetime management",
          "name": "object_lifetime_management",
          "desc": "<p>As Node-API calls are made, handles to objects in the heap for the underlying\nVM may be returned as <code>napi_values</code>. These handles must hold the\nobjects 'live' until they are no longer required by the native code,\notherwise the objects could be collected before the native code was\nfinished using them.</p>\n<p>As object handles are returned they are associated with a\n'scope'. The lifespan for the default scope is tied to the lifespan\nof the native method call. The result is that, by default, handles\nremain valid and the objects associated with these handles will be\nheld live for the lifespan of the native method call.</p>\n<p>In many cases, however, it is necessary that the handles remain valid for\neither a shorter or longer lifespan than that of the native method.\nThe sections which follow describe the Node-API functions that can be used\nto change the handle lifespan from the default.</p>",
          "modules": [
            {
              "textRaw": "Making handle lifespan shorter than that of the native method",
              "name": "making_handle_lifespan_shorter_than_that_of_the_native_method",
              "desc": "<p>It is often necessary to make the lifespan of handles shorter than\nthe lifespan of a native method. For example, consider a native method\nthat has a loop which iterates through the elements in a large array:</p>\n<pre><code class=\"language-c\">for (int i = 0; i &#x3C; 1000000; i++) {\n  napi_value result;\n  napi_status status = napi_get_element(env, object, i, &#x26;result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n}\n</code></pre>\n<p>This would result in a large number of handles being created, consuming\nsubstantial resources. In addition, even though the native code could only\nuse the most recent handle, all of the associated objects would also be\nkept alive since they all share the same scope.</p>\n<p>To handle this case, Node-API provides the ability to establish a new 'scope' to\nwhich newly created handles will be associated. Once those handles\nare no longer required, the scope can be 'closed' and any handles associated\nwith the scope are invalidated. The methods available to open/close scopes are\n<a href=\"#napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and <a href=\"#napi_close_handle_scope\"><code>napi_close_handle_scope</code></a>.</p>\n<p>Node-API only supports a single nested hierarchy of scopes. There is only one\nactive scope at any time, and all new handles will be associated with that\nscope while it is active. Scopes must be closed in the reverse order from\nwhich they are opened. In addition, all scopes created within a native method\nmust be closed before returning from that method.</p>\n<p>Taking the earlier example, adding calls to <a href=\"#napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and\n<a href=\"#napi_close_handle_scope\"><code>napi_close_handle_scope</code></a> would ensure that at most a single handle\nis valid throughout the execution of the loop:</p>\n<pre><code class=\"language-c\">for (int i = 0; i &#x3C; 1000000; i++) {\n  napi_handle_scope scope;\n  napi_status status = napi_open_handle_scope(env, &#x26;scope);\n  if (status != napi_ok) {\n    break;\n  }\n  napi_value result;\n  status = napi_get_element(env, object, i, &#x26;result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n  status = napi_close_handle_scope(env, scope);\n  if (status != napi_ok) {\n    break;\n  }\n}\n</code></pre>\n<p>When nesting scopes, there are cases where a handle from an\ninner scope needs to live beyond the lifespan of that scope. Node-API supports\nan 'escapable scope' in order to support this case. An escapable scope\nallows one handle to be 'promoted' so that it 'escapes' the\ncurrent scope and the lifespan of the handle changes from the current\nscope to that of the outer scope.</p>\n<p>The methods available to open/close escapable scopes are\n<a href=\"#napi_open_escapable_handle_scope\"><code>napi_open_escapable_handle_scope</code></a> and\n<a href=\"#napi_close_escapable_handle_scope\"><code>napi_close_escapable_handle_scope</code></a>.</p>\n<p>The request to promote a handle is made through <a href=\"#napi_escape_handle\"><code>napi_escape_handle</code></a> which\ncan only be called once.</p>",
              "modules": [
                {
                  "textRaw": "`napi_open_handle_scope`",
                  "name": "`napi_open_handle_scope`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_open_handle_scope(napi_env env,\n                                               napi_handle_scope* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the new scope.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API opens a new scope.</p>",
                  "type": "module",
                  "displayName": "`napi_open_handle_scope`"
                },
                {
                  "textRaw": "`napi_close_handle_scope`",
                  "name": "`napi_close_handle_scope`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_close_handle_scope(napi_env env,\n                                                napi_handle_scope scope);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: <code>napi_value</code> representing the scope to be closed.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API closes the scope passed in. Scopes must be closed in the\nreverse order from which they were created.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_close_handle_scope`"
                },
                {
                  "textRaw": "`napi_open_escapable_handle_scope`",
                  "name": "`napi_open_escapable_handle_scope`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\n    napi_open_escapable_handle_scope(napi_env env,\n                                     napi_handle_scope* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the new scope.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API opens a new scope from which one object can be promoted\nto the outer scope.</p>",
                  "type": "module",
                  "displayName": "`napi_open_escapable_handle_scope`"
                },
                {
                  "textRaw": "`napi_close_escapable_handle_scope`",
                  "name": "`napi_close_escapable_handle_scope`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\n    napi_close_escapable_handle_scope(napi_env env,\n                                      napi_handle_scope scope);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: <code>napi_value</code> representing the scope to be closed.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API closes the scope passed in. Scopes must be closed in the\nreverse order from which they were created.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_close_escapable_handle_scope`"
                },
                {
                  "textRaw": "`napi_escape_handle`",
                  "name": "`napi_escape_handle`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_escape_handle(napi_env env,\n                               napi_escapable_handle_scope scope,\n                               napi_value escapee,\n                               napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: <code>napi_value</code> representing the current scope.</li>\n<li><code>[in] escapee</code>: <code>napi_value</code> representing the JavaScript <code>Object</code> to be\nescaped.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the handle to the escaped <code>Object</code>\nin the outer scope.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API promotes the handle to the JavaScript object so that it is valid\nfor the lifetime of the outer scope. It can only be called once per scope.\nIf it is called more than once an error will be returned.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_escape_handle`"
                }
              ],
              "type": "module",
              "displayName": "Making handle lifespan shorter than that of the native method"
            },
            {
              "textRaw": "References to objects with a lifespan longer than that of the native method",
              "name": "references_to_objects_with_a_lifespan_longer_than_that_of_the_native_method",
              "desc": "<p>In some cases an addon will need to be able to create and reference objects\nwith a lifespan longer than that of a single native method invocation. For\nexample, to create a constructor and later use that constructor\nin a request to creates instances, it must be possible to reference\nthe constructor object across many different instance creation requests. This\nwould not be possible with a normal handle returned as a <code>napi_value</code> as\ndescribed in the earlier section. The lifespan of a normal handle is\nmanaged by scopes and all scopes must be closed before the end of a native\nmethod.</p>\n<p>Node-API provides methods to create persistent references to an object.\nEach persistent reference has an associated count with a value of 0\nor higher. The count determines if the reference will keep\nthe corresponding object live. References with a count of 0 do not\nprevent the object from being collected and are often called 'weak'\nreferences. Any count greater than 0 will prevent the object\nfrom being collected.</p>\n<p>References can be created with an initial reference count. The count can\nthen be modified through <a href=\"#napi_reference_ref\"><code>napi_reference_ref</code></a> and\n<a href=\"#napi_reference_unref\"><code>napi_reference_unref</code></a>. If an object is collected while the count\nfor a reference is 0, all subsequent calls to\nget the object associated with the reference <a href=\"#napi_get_reference_value\"><code>napi_get_reference_value</code></a>\nwill return <code>NULL</code> for the returned <code>napi_value</code>. An attempt to call\n<a href=\"#napi_reference_ref\"><code>napi_reference_ref</code></a> for a reference whose object has been collected\nresults in an error.</p>\n<p>References must be deleted once they are no longer required by the addon. When\na reference is deleted, it will no longer prevent the corresponding object from\nbeing collected. Failure to delete a persistent reference results in\na 'memory leak' with both the native memory for the persistent reference and\nthe corresponding object on the heap being retained forever.</p>\n<p>There can be multiple persistent references created which refer to the same\nobject, each of which will either keep the object live or not based on its\nindividual count. Multiple persistent references to the same object\ncan result in unexpectedly keeping alive native memory. The native structures\nfor a persistent reference must be kept alive until finalizers for the\nreferenced object are executed. If a new persistent reference is created\nfor the same object, the finalizers for that object will not be\nrun and the native memory pointed by the earlier persistent reference\nwill not be freed. This can be avoided by calling\n<code>napi_delete_reference</code> in addition to <code>napi_reference_unref</code> when possible.</p>",
              "modules": [
                {
                  "textRaw": "`napi_create_reference`",
                  "name": "`napi_create_reference`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_create_reference(napi_env env,\n                                              napi_value value,\n                                              uint32_t initial_refcount,\n                                              napi_ref* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing the <code>Object</code> to which we want a\nreference.</li>\n<li><code>[in] initial_refcount</code>: Initial reference count for the new reference.</li>\n<li><code>[out] result</code>: <code>napi_ref</code> pointing to the new reference.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a new reference with the specified reference count\nto the <code>Object</code> passed in.</p>",
                  "type": "module",
                  "displayName": "`napi_create_reference`"
                },
                {
                  "textRaw": "`napi_delete_reference`",
                  "name": "`napi_delete_reference`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_delete_reference(napi_env env, napi_ref ref);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> to be deleted.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API deletes the reference passed in.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
                  "type": "module",
                  "displayName": "`napi_delete_reference`"
                },
                {
                  "textRaw": "`napi_reference_ref`",
                  "name": "`napi_reference_ref`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_reference_ref(napi_env env,\n                                           napi_ref ref,\n                                           uint32_t* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> for which the reference count will be incremented.</li>\n<li><code>[out] result</code>: The new reference count.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API increments the reference count for the reference\npassed in and returns the resulting reference count.</p>",
                  "type": "module",
                  "displayName": "`napi_reference_ref`"
                },
                {
                  "textRaw": "`napi_reference_unref`",
                  "name": "`napi_reference_unref`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_reference_unref(napi_env env,\n                                             napi_ref ref,\n                                             uint32_t* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> for which the reference count will be decremented.</li>\n<li><code>[out] result</code>: The new reference count.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API decrements the reference count for the reference\npassed in and returns the resulting reference count.</p>",
                  "type": "module",
                  "displayName": "`napi_reference_unref`"
                },
                {
                  "textRaw": "`napi_get_reference_value`",
                  "name": "`napi_get_reference_value`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_get_reference_value(napi_env env,\n                                                 napi_ref ref,\n                                                 napi_value* result);\n</code></pre>\n<p>the <code>napi_value passed</code> in or out of these methods is a handle to the\nobject to which the reference is related.</p>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> for which we requesting the corresponding <code>Object</code>.</li>\n<li><code>[out] result</code>: The <code>napi_value</code> for the <code>Object</code> referenced by the\n<code>napi_ref</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>If still valid, this API returns the <code>napi_value</code> representing the\nJavaScript <code>Object</code> associated with the <code>napi_ref</code>. Otherwise, result\nwill be <code>NULL</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_reference_value`"
                }
              ],
              "type": "module",
              "displayName": "References to objects with a lifespan longer than that of the native method"
            },
            {
              "textRaw": "Cleanup on exit of the current Node.js instance",
              "name": "cleanup_on_exit_of_the_current_node.js_instance",
              "desc": "<p>While a Node.js process typically releases all its resources when exiting,\nembedders of Node.js, or future Worker support, may require addons to register\nclean-up hooks that will be run once the current Node.js instance exits.</p>\n<p>Node-API provides functions for registering and un-registering such callbacks.\nWhen those callbacks are run, all resources that are being held by the addon\nshould be freed up.</p>",
              "modules": [
                {
                  "textRaw": "`napi_add_env_cleanup_hook`",
                  "name": "`napi_add_env_cleanup_hook`",
                  "meta": {
                    "added": [
                      "v10.2.0"
                    ],
                    "napiVersion": [
                      3
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NODE_EXTERN napi_status napi_add_env_cleanup_hook(napi_env env,\n                                                  napi_cleanup_hook fun,\n                                                  void* arg);\n</code></pre>\n<p>Registers <code>fun</code> as a function to be run with the <code>arg</code> parameter once the\ncurrent Node.js environment exits.</p>\n<p>A function can safely be specified multiple times with different\n<code>arg</code> values. In that case, it will be called multiple times as well.\nProviding the same <code>fun</code> and <code>arg</code> values multiple times is not allowed\nand will lead the process to abort.</p>\n<p>The hooks will be called in reverse order, i.e. the most recently added one\nwill be called first.</p>\n<p>Removing this hook can be done by using <a href=\"#napi_remove_env_cleanup_hook\"><code>napi_remove_env_cleanup_hook</code></a>.\nTypically, that happens when the resource for which this hook was added\nis being torn down anyway.</p>\n<p>For asynchronous cleanup, <a href=\"#napi_add_async_cleanup_hook\"><code>napi_add_async_cleanup_hook</code></a> is available.</p>",
                  "type": "module",
                  "displayName": "`napi_add_env_cleanup_hook`"
                },
                {
                  "textRaw": "`napi_remove_env_cleanup_hook`",
                  "name": "`napi_remove_env_cleanup_hook`",
                  "meta": {
                    "added": [
                      "v10.2.0"
                    ],
                    "napiVersion": [
                      3
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_remove_env_cleanup_hook(napi_env env,\n                                                     void (*fun)(void* arg),\n                                                     void* arg);\n</code></pre>\n<p>Unregisters <code>fun</code> as a function to be run with the <code>arg</code> parameter once the\ncurrent Node.js environment exits. Both the argument and the function value\nneed to be exact matches.</p>\n<p>The function must have originally been registered\nwith <code>napi_add_env_cleanup_hook</code>, otherwise the process will abort.</p>",
                  "type": "module",
                  "displayName": "`napi_remove_env_cleanup_hook`"
                },
                {
                  "textRaw": "`napi_add_async_cleanup_hook`",
                  "name": "`napi_add_async_cleanup_hook`",
                  "meta": {
                    "added": [
                      "v14.8.0",
                      "v12.19.0"
                    ],
                    "napiVersion": [
                      8
                    ],
                    "changes": [
                      {
                        "version": [
                          "v14.10.0",
                          "v12.19.0"
                        ],
                        "pr-url": "https://github.com/nodejs/node/pull/34819",
                        "description": "Changed signature of the `hook` callback."
                      }
                    ]
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_add_async_cleanup_hook(\n    napi_env env,\n    napi_async_cleanup_hook hook,\n    void* arg,\n    napi_async_cleanup_hook_handle* remove_handle);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] hook</code>: The function pointer to call at environment teardown.</li>\n<li><code>[in] arg</code>: The pointer to pass to <code>hook</code> when it gets called.</li>\n<li><code>[out] remove_handle</code>: Optional handle that refers to the asynchronous cleanup\nhook.</li>\n</ul>\n<p>Registers <code>hook</code>, which is a function of type <a href=\"#napi_async_cleanup_hook\"><code>napi_async_cleanup_hook</code></a>, as\na function to be run with the <code>remove_handle</code> and <code>arg</code> parameters once the\ncurrent Node.js environment exits.</p>\n<p>Unlike <a href=\"#napi_add_env_cleanup_hook\"><code>napi_add_env_cleanup_hook</code></a>, the hook is allowed to be asynchronous.</p>\n<p>Otherwise, behavior generally matches that of <a href=\"#napi_add_env_cleanup_hook\"><code>napi_add_env_cleanup_hook</code></a>.</p>\n<p>If <code>remove_handle</code> is not <code>NULL</code>, an opaque value will be stored in it\nthat must later be passed to <a href=\"#napi_remove_async_cleanup_hook\"><code>napi_remove_async_cleanup_hook</code></a>,\nregardless of whether the hook has already been invoked.\nTypically, that happens when the resource for which this hook was added\nis being torn down anyway.</p>",
                  "type": "module",
                  "displayName": "`napi_add_async_cleanup_hook`"
                },
                {
                  "textRaw": "`napi_remove_async_cleanup_hook`",
                  "name": "`napi_remove_async_cleanup_hook`",
                  "meta": {
                    "added": [
                      "v14.8.0",
                      "v12.19.0"
                    ],
                    "changes": [
                      {
                        "version": [
                          "v14.10.0",
                          "v12.19.0"
                        ],
                        "pr-url": "https://github.com/nodejs/node/pull/34819",
                        "description": "Removed `env` parameter."
                      }
                    ]
                  },
                  "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_remove_async_cleanup_hook(\n    napi_async_cleanup_hook_handle remove_handle);\n</code></pre>\n<ul>\n<li><code>[in] remove_handle</code>: The handle to an asynchronous cleanup hook that was\ncreated with <a href=\"#napi_add_async_cleanup_hook\"><code>napi_add_async_cleanup_hook</code></a>.</li>\n</ul>\n<p>Unregisters the cleanup hook corresponding to <code>remove_handle</code>. This will prevent\nthe hook from being executed, unless it has already started executing.\nThis must be called on any <code>napi_async_cleanup_hook_handle</code> value obtained\nfrom <a href=\"#napi_add_async_cleanup_hook\"><code>napi_add_async_cleanup_hook</code></a>.</p>",
                  "type": "module",
                  "displayName": "`napi_remove_async_cleanup_hook`"
                }
              ],
              "type": "module",
              "displayName": "Cleanup on exit of the current Node.js instance"
            }
          ],
          "type": "misc",
          "displayName": "Object lifetime management"
        },
        {
          "textRaw": "Module registration",
          "name": "module_registration",
          "desc": "<p>Node-API modules are registered in a manner similar to other modules\nexcept that instead of using the <code>NODE_MODULE</code> macro the following\nis used:</p>\n<pre><code class=\"language-c\">NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\n</code></pre>\n<p>The next difference is the signature for the <code>Init</code> method. For a Node-API\nmodule it is as follows:</p>\n<pre><code class=\"language-c\">napi_value Init(napi_env env, napi_value exports);\n</code></pre>\n<p>The return value from <code>Init</code> is treated as the <code>exports</code> object for the module.\nThe <code>Init</code> method is passed an empty object via the <code>exports</code> parameter as a\nconvenience. If <code>Init</code> returns <code>NULL</code>, the parameter passed as <code>exports</code> is\nexported by the module. Node-API modules cannot modify the <code>module</code> object but\ncan specify anything as the <code>exports</code> property of the module.</p>\n<p>To add the method <code>hello</code> as a function so that it can be called as a method\nprovided by the addon:</p>\n<pre><code class=\"language-c\">napi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor desc = {\n    \"hello\",\n    NULL,\n    Method,\n    NULL,\n    NULL,\n    NULL,\n    napi_writable | napi_enumerable | napi_configurable,\n    NULL\n  };\n  status = napi_define_properties(env, exports, 1, &#x26;desc);\n  if (status != napi_ok) return NULL;\n  return exports;\n}\n</code></pre>\n<p>To set a function to be returned by the <code>require()</code> for the addon:</p>\n<pre><code class=\"language-c\">napi_value Init(napi_env env, napi_value exports) {\n  napi_value method;\n  napi_status status;\n  status = napi_create_function(env, \"exports\", NAPI_AUTO_LENGTH, Method, NULL, &#x26;method);\n  if (status != napi_ok) return NULL;\n  return method;\n}\n</code></pre>\n<p>To define a class so that new instances can be created (often used with\n<a href=\"#object-wrap\">Object wrap</a>):</p>\n<pre><code class=\"language-c\">// NOTE: partial example, not all referenced code is included\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor properties[] = {\n    { \"value\", NULL, NULL, GetValue, SetValue, NULL, napi_writable | napi_configurable, NULL },\n    DECLARE_NAPI_METHOD(\"plusOne\", PlusOne),\n    DECLARE_NAPI_METHOD(\"multiply\", Multiply),\n  };\n\n  napi_value cons;\n  status =\n      napi_define_class(env, \"MyObject\", New, NULL, 3, properties, &#x26;cons);\n  if (status != napi_ok) return NULL;\n\n  status = napi_create_reference(env, cons, 1, &#x26;constructor);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, \"MyObject\", cons);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n</code></pre>\n<p>You can also use the <code>NAPI_MODULE_INIT</code> macro, which acts as a shorthand\nfor <code>NAPI_MODULE</code> and defining an <code>Init</code> function:</p>\n<pre><code class=\"language-c\">NAPI_MODULE_INIT() {\n  napi_value answer;\n  napi_status result;\n\n  status = napi_create_int64(env, 42, &#x26;answer);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, \"answer\", answer);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n</code></pre>\n<p>All Node-API addons are context-aware, meaning they may be loaded multiple\ntimes. There are a few design considerations when declaring such a module.\nThe documentation on <a href=\"addons.html#context-aware-addons\">context-aware addons</a> provides more details.</p>\n<p>The variables <code>env</code> and <code>exports</code> will be available inside the function body\nfollowing the macro invocation.</p>\n<p>For more details on setting properties on objects, see the section on\n<a href=\"#working-with-javascript-properties\">Working with JavaScript properties</a>.</p>\n<p>For more details on building addon modules in general, refer to the existing\nAPI.</p>",
          "type": "misc",
          "displayName": "Module registration"
        },
        {
          "textRaw": "Working with JavaScript values",
          "name": "working_with_javascript_values",
          "desc": "<p>Node-API exposes a set of APIs to create all types of JavaScript values.\nSome of these types are documented under <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\">Section 6</a>\nof the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n<p>Fundamentally, these APIs are used to do one of the following:</p>\n<ol>\n<li>Create a new JavaScript object</li>\n<li>Convert from a primitive C type to a Node-API value</li>\n<li>Convert from Node-API value to a primitive C type</li>\n<li>Get global instances including <code>undefined</code> and <code>null</code></li>\n</ol>\n<p>Node-API values are represented by the type <code>napi_value</code>.\nAny Node-API call that requires a JavaScript value takes in a <code>napi_value</code>.\nIn some cases, the API does check the type of the <code>napi_value</code> up-front.\nHowever, for better performance, it's better for the caller to make sure that\nthe <code>napi_value</code> in question is of the JavaScript type expected by the API.</p>",
          "modules": [
            {
              "textRaw": "Enum types",
              "name": "enum_types",
              "modules": [
                {
                  "textRaw": "`napi_key_collection_mode`",
                  "name": "`napi_key_collection_mode`",
                  "meta": {
                    "added": [
                      "v13.7.0",
                      "v12.17.0",
                      "v10.20.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">typedef enum {\n  napi_key_include_prototypes,\n  napi_key_own_only\n} napi_key_collection_mode;\n</code></pre>\n<p>Describes the <code>Keys/Properties</code> filter enums:</p>\n<p><code>napi_key_collection_mode</code> limits the range of collected properties.</p>\n<p><code>napi_key_own_only</code> limits the collected properties to the given\nobject only. <code>napi_key_include_prototypes</code> will include all keys\nof the objects's prototype chain as well.</p>",
                  "type": "module",
                  "displayName": "`napi_key_collection_mode`"
                },
                {
                  "textRaw": "`napi_key_filter`",
                  "name": "`napi_key_filter`",
                  "meta": {
                    "added": [
                      "v13.7.0",
                      "v12.17.0",
                      "v10.20.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">typedef enum {\n  napi_key_all_properties = 0,\n  napi_key_writable = 1,\n  napi_key_enumerable = 1 &#x3C;&#x3C; 1,\n  napi_key_configurable = 1 &#x3C;&#x3C; 2,\n  napi_key_skip_strings = 1 &#x3C;&#x3C; 3,\n  napi_key_skip_symbols = 1 &#x3C;&#x3C; 4\n} napi_key_filter;\n</code></pre>\n<p>Property filter bits. They can be or'ed to build a composite filter.</p>",
                  "type": "module",
                  "displayName": "`napi_key_filter`"
                },
                {
                  "textRaw": "`napi_key_conversion`",
                  "name": "`napi_key_conversion`",
                  "meta": {
                    "added": [
                      "v13.7.0",
                      "v12.17.0",
                      "v10.20.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">typedef enum {\n  napi_key_keep_numbers,\n  napi_key_numbers_to_strings\n} napi_key_conversion;\n</code></pre>\n<p><code>napi_key_numbers_to_strings</code> will convert integer indices to\nstrings. <code>napi_key_keep_numbers</code> will return numbers for integer\nindices.</p>",
                  "type": "module",
                  "displayName": "`napi_key_conversion`"
                },
                {
                  "textRaw": "`napi_valuetype`",
                  "name": "`napi_valuetype`",
                  "desc": "<pre><code class=\"language-c\">typedef enum {\n  // ES6 types (corresponds to typeof)\n  napi_undefined,\n  napi_null,\n  napi_boolean,\n  napi_number,\n  napi_string,\n  napi_symbol,\n  napi_object,\n  napi_function,\n  napi_external,\n  napi_bigint,\n} napi_valuetype;\n</code></pre>\n<p>Describes the type of a <code>napi_value</code>. This generally corresponds to the types\ndescribed in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types\">Section 6.1</a> of the ECMAScript Language Specification.\nIn addition to types in that section, <code>napi_valuetype</code> can also represent\n<code>Function</code>s and <code>Object</code>s with external data.</p>\n<p>A JavaScript value of type <code>napi_external</code> appears in JavaScript as a plain\nobject such that no properties can be set on it, and no prototype.</p>",
                  "type": "module",
                  "displayName": "`napi_valuetype`"
                },
                {
                  "textRaw": "`napi_typedarray_type`",
                  "name": "`napi_typedarray_type`",
                  "desc": "<pre><code class=\"language-c\">typedef enum {\n  napi_int8_array,\n  napi_uint8_array,\n  napi_uint8_clamped_array,\n  napi_int16_array,\n  napi_uint16_array,\n  napi_int32_array,\n  napi_uint32_array,\n  napi_float32_array,\n  napi_float64_array,\n  napi_bigint64_array,\n  napi_biguint64_array,\n} napi_typedarray_type;\n</code></pre>\n<p>This represents the underlying binary scalar datatype of the <code>TypedArray</code>.\nElements of this enum correspond to\n<a href=\"https://tc39.github.io/ecma262/#sec-typedarray-objects\">Section 22.2</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>",
                  "type": "module",
                  "displayName": "`napi_typedarray_type`"
                }
              ],
              "type": "module",
              "displayName": "Enum types"
            },
            {
              "textRaw": "Object creation functions",
              "name": "object_creation_functions",
              "modules": [
                {
                  "textRaw": "`napi_create_array`",
                  "name": "`napi_create_array`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_array(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Array</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a Node-API value corresponding to a JavaScript <code>Array</code> type.\nJavaScript arrays are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-array-objects\">Section 22.1</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_array`"
                },
                {
                  "textRaw": "`napi_create_array_with_length`",
                  "name": "`napi_create_array_with_length`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_array_with_length(napi_env env,\n                                          size_t length,\n                                          napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: The initial length of the <code>Array</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Array</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a Node-API value corresponding to a JavaScript <code>Array</code> type.\nThe <code>Array</code>'s length property is set to the passed-in length parameter.\nHowever, the underlying buffer is not guaranteed to be pre-allocated by the VM\nwhen the array is created. That behavior is left to the underlying VM\nimplementation. If the buffer must be a contiguous block of memory that can be\ndirectly read and/or written via C, consider using\n<a href=\"#napi_create_external_arraybuffer\"><code>napi_create_external_arraybuffer</code></a>.</p>\n<p>JavaScript arrays are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-array-objects\">Section 22.1</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_array_with_length`"
                },
                {
                  "textRaw": "`napi_create_arraybuffer`",
                  "name": "`napi_create_arraybuffer`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_arraybuffer(napi_env env,\n                                    size_t byte_length,\n                                    void** data,\n                                    napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: The length in bytes of the array buffer to create.</li>\n<li><code>[out] data</code>: Pointer to the underlying byte buffer of the <code>ArrayBuffer</code>.\n<code>data</code> can optionally be ignored by passing <code>NULL</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a Node-API value corresponding to a JavaScript <code>ArrayBuffer</code>.\n<code>ArrayBuffer</code>s are used to represent fixed-length binary data buffers. They are\nnormally used as a backing-buffer for <code>TypedArray</code> objects.\nThe <code>ArrayBuffer</code> allocated will have an underlying byte buffer whose size is\ndetermined by the <code>length</code> parameter that's passed in.\nThe underlying buffer is optionally returned back to the caller in case the\ncaller wants to directly manipulate the buffer. This buffer can only be\nwritten to directly from native code. To write to this buffer from JavaScript,\na typed array or <code>DataView</code> object would need to be created.</p>\n<p>JavaScript <code>ArrayBuffer</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">Section 24.1</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_arraybuffer`"
                },
                {
                  "textRaw": "`napi_create_buffer`",
                  "name": "`napi_create_buffer`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_buffer(napi_env env,\n                               size_t size,\n                               void** data,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] size</code>: Size in bytes of the underlying buffer.</li>\n<li><code>[out] data</code>: Raw pointer to the underlying buffer.\n<code>data</code> can optionally be ignored by passing <code>NULL</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a <code>node::Buffer</code> object. While this is still a\nfully-supported data structure, in most cases using a <code>TypedArray</code> will suffice.</p>",
                  "type": "module",
                  "displayName": "`napi_create_buffer`"
                },
                {
                  "textRaw": "`napi_create_buffer_copy`",
                  "name": "`napi_create_buffer_copy`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_buffer_copy(napi_env env,\n                                    size_t length,\n                                    const void* data,\n                                    void** result_data,\n                                    napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] size</code>: Size in bytes of the input buffer (should be the same as the size\nof the new buffer).</li>\n<li><code>[in] data</code>: Raw pointer to the underlying buffer to copy from.</li>\n<li><code>[out] result_data</code>: Pointer to the new <code>Buffer</code>'s underlying data buffer.\n<code>result_data</code> can optionally be ignored by passing <code>NULL</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a <code>node::Buffer</code> object and initializes it with data copied\nfrom the passed-in buffer. While this is still a fully-supported data\nstructure, in most cases using a <code>TypedArray</code> will suffice.</p>",
                  "type": "module",
                  "displayName": "`napi_create_buffer_copy`"
                },
                {
                  "textRaw": "`napi_create_date`",
                  "name": "`napi_create_date`",
                  "meta": {
                    "added": [
                      "v11.11.0",
                      "v10.17.0"
                    ],
                    "napiVersion": [
                      5
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_date(napi_env env,\n                             double time,\n                             napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] time</code>: ECMAScript time value in milliseconds since 01 January, 1970 UTC.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Date</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API does not observe leap seconds; they are ignored, as\nECMAScript aligns with POSIX time specification.</p>\n<p>This API allocates a JavaScript <code>Date</code> object.</p>\n<p>JavaScript <code>Date</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-date-objects\">Section 20.3</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_date`"
                },
                {
                  "textRaw": "`napi_create_external`",
                  "name": "`napi_create_external`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_external(napi_env env,\n                                 void* data,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] data</code>: Raw pointer to the external data.</li>\n<li><code>[in] finalize_cb</code>: Optional callback to call when the external value is being\ncollected. <a href=\"#napi_finalize\"><code>napi_finalize</code></a> provides more details.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during\ncollection.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing an external value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a JavaScript value with external data attached to it. This\nis used to pass external data through JavaScript code, so it can be retrieved\nlater by native code using <a href=\"#napi_get_value_external\"><code>napi_get_value_external</code></a>.</p>\n<p>The API adds a <code>napi_finalize</code> callback which will be called when the JavaScript\nobject just created has been garbage collected.</p>\n<p>The created value is not an object, and therefore does not support additional\nproperties. It is considered a distinct value type: calling <code>napi_typeof()</code> with\nan external value yields <code>napi_external</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_create_external`"
                },
                {
                  "textRaw": "`napi_create_external_arraybuffer`",
                  "name": "`napi_create_external_arraybuffer`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status\nnapi_create_external_arraybuffer(napi_env env,\n                                 void* external_data,\n                                 size_t byte_length,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] external_data</code>: Pointer to the underlying byte buffer of the\n<code>ArrayBuffer</code>.</li>\n<li><code>[in] byte_length</code>: The length in bytes of the underlying buffer.</li>\n<li><code>[in] finalize_cb</code>: Optional callback to call when the <code>ArrayBuffer</code> is being\ncollected. <a href=\"#napi_finalize\"><code>napi_finalize</code></a> provides more details.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during\ncollection.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p><strong>Some runtimes other than Node.js have dropped support for external buffers</strong>.\nOn runtimes other than Node.js this method may return\n<code>napi_no_external_buffers_allowed</code> to indicate that external\nbuffers are not supported. One such runtime is Electron as\ndescribed in this issue\n<a href=\"https://github.com/electron/electron/issues/35801\">electron/issues/35801</a>.</p>\n<p>In order to maintain broadest compatibility with all runtimes\nyou may define <code>NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED</code> in your addon before\nincludes for the node-api headers. Doing so will hide the 2 functions\nthat create external buffers. This will ensure a compilation error\noccurs if you accidentally use one of these methods.</p>\n<p>This API returns a Node-API value corresponding to a JavaScript <code>ArrayBuffer</code>.\nThe underlying byte buffer of the <code>ArrayBuffer</code> is externally allocated and\nmanaged. The caller must ensure that the byte buffer remains valid until the\nfinalize callback is called.</p>\n<p>The API adds a <code>napi_finalize</code> callback which will be called when the JavaScript\nobject just created has been garbage collected.</p>\n<p>JavaScript <code>ArrayBuffer</code>s are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">Section 24.1</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_external_arraybuffer`"
                },
                {
                  "textRaw": "`napi_create_external_buffer`",
                  "name": "`napi_create_external_buffer`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_external_buffer(napi_env env,\n                                        size_t length,\n                                        void* data,\n                                        napi_finalize finalize_cb,\n                                        void* finalize_hint,\n                                        napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: Size in bytes of the input buffer (should be the same as the\nsize of the new buffer).</li>\n<li><code>[in] data</code>: Raw pointer to the underlying buffer to expose to JavaScript.</li>\n<li><code>[in] finalize_cb</code>: Optional callback to call when the <code>ArrayBuffer</code> is being\ncollected. <a href=\"#napi_finalize\"><code>napi_finalize</code></a> provides more details.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during\ncollection.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p><strong>Some runtimes other than Node.js have dropped support for external buffers</strong>.\nOn runtimes other than Node.js this method may return\n<code>napi_no_external_buffers_allowed</code> to indicate that external\nbuffers are not supported. One such runtime is Electron as\ndescribed in this issue\n<a href=\"https://github.com/electron/electron/issues/35801\">electron/issues/35801</a>.</p>\n<p>In order to maintain broadest compatibility with all runtimes\nyou may define <code>NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED</code> in your addon before\nincludes for the node-api headers. Doing so will hide the 2 functions\nthat create external buffers. This will ensure a compilation error\noccurs if you accidentally use one of these methods.</p>\n<p>This API allocates a <code>node::Buffer</code> object and initializes it with data\nbacked by the passed in buffer. While this is still a fully-supported data\nstructure, in most cases using a <code>TypedArray</code> will suffice.</p>\n<p>The API adds a <code>napi_finalize</code> callback which will be called when the JavaScript\nobject just created has been garbage collected.</p>\n<p>For Node.js >=4 <code>Buffers</code> are <code>Uint8Array</code>s.</p>",
                  "type": "module",
                  "displayName": "`napi_create_external_buffer`"
                },
                {
                  "textRaw": "`napi_create_object`",
                  "name": "`napi_create_object`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_object(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Object</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a default JavaScript <code>Object</code>.\nIt is the equivalent of doing <code>new Object()</code> in JavaScript.</p>\n<p>The JavaScript <code>Object</code> type is described in <a href=\"https://tc39.github.io/ecma262/#sec-object-type\">Section 6.1.7</a> of the\nECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_object`"
                },
                {
                  "textRaw": "`napi_create_symbol`",
                  "name": "`napi_create_symbol`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_symbol(napi_env env,\n                               napi_value description,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] description</code>: Optional <code>napi_value</code> which refers to a JavaScript\n<code>string</code> to be set as the description for the symbol.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>symbol</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>symbol</code> value from a UTF8-encoded C string.</p>\n<p>The JavaScript <code>symbol</code> type is described in <a href=\"https://tc39.github.io/ecma262/#sec-symbol-objects\">Section 19.4</a>\nof the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_symbol`"
                },
                {
                  "textRaw": "`node_api_symbol_for`",
                  "name": "`node_api_symbol_for`",
                  "meta": {
                    "added": [
                      "v17.5.0",
                      "v16.15.0"
                    ],
                    "changes": []
                  },
                  "stability": 1,
                  "stabilityText": "Experimental",
                  "desc": "<pre><code class=\"language-c\">napi_status node_api_symbol_for(napi_env env,\n                                const char* utf8description,\n                                size_t length,\n                                napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] utf8description</code>: UTF-8 C string representing the text to be used as the\ndescription for the symbol.</li>\n<li><code>[in] length</code>: The length of the description string in bytes, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>symbol</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API searches in the global registry for an existing symbol with the given\ndescription. If the symbol already exists it will be returned, otherwise a new\nsymbol will be created in the registry.</p>\n<p>The JavaScript <code>symbol</code> type is described in <a href=\"https://tc39.github.io/ecma262/#sec-symbol-objects\">Section 19.4</a> of the ECMAScript\nLanguage Specification.</p>",
                  "type": "module",
                  "displayName": "`node_api_symbol_for`"
                },
                {
                  "textRaw": "`napi_create_typedarray`",
                  "name": "`napi_create_typedarray`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_typedarray(napi_env env,\n                                   napi_typedarray_type type,\n                                   size_t length,\n                                   napi_value arraybuffer,\n                                   size_t byte_offset,\n                                   napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] type</code>: Scalar datatype of the elements within the <code>TypedArray</code>.</li>\n<li><code>[in] length</code>: Number of elements in the <code>TypedArray</code>.</li>\n<li><code>[in] arraybuffer</code>: <code>ArrayBuffer</code> underlying the typed array.</li>\n<li><code>[in] byte_offset</code>: The byte offset within the <code>ArrayBuffer</code> from which to\nstart projecting the <code>TypedArray</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>TypedArray</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>TypedArray</code> object over an existing\n<code>ArrayBuffer</code>. <code>TypedArray</code> objects provide an array-like view over an\nunderlying data buffer where each element has the same underlying binary scalar\ndatatype.</p>\n<p>It's required that <code>(length * size_of_element) + byte_offset</code> should\nbe &#x3C;= the size in bytes of the array passed in. If not, a <code>RangeError</code> exception\nis raised.</p>\n<p>JavaScript <code>TypedArray</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-typedarray-objects\">Section 22.2</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_typedarray`"
                },
                {
                  "textRaw": "`napi_create_dataview`",
                  "name": "`napi_create_dataview`",
                  "meta": {
                    "added": [
                      "v8.3.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_dataview(napi_env env,\n                                 size_t byte_length,\n                                 napi_value arraybuffer,\n                                 size_t byte_offset,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: Number of elements in the <code>DataView</code>.</li>\n<li><code>[in] arraybuffer</code>: <code>ArrayBuffer</code> underlying the <code>DataView</code>.</li>\n<li><code>[in] byte_offset</code>: The byte offset within the <code>ArrayBuffer</code> from which to\nstart projecting the <code>DataView</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>DataView</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>DataView</code> object over an existing <code>ArrayBuffer</code>.\n<code>DataView</code> objects provide an array-like view over an underlying data buffer,\nbut one which allows items of different size and type in the <code>ArrayBuffer</code>.</p>\n<p>It is required that <code>byte_length + byte_offset</code> is less than or equal to the\nsize in bytes of the array passed in. If not, a <code>RangeError</code> exception is\nraised.</p>\n<p>JavaScript <code>DataView</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-dataview-objects\">Section 24.3</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_dataview`"
                }
              ],
              "type": "module",
              "displayName": "Object creation functions"
            },
            {
              "textRaw": "Functions to convert from C types to Node-API",
              "name": "functions_to_convert_from_c_types_to_node-api",
              "modules": [
                {
                  "textRaw": "`napi_create_int32`",
                  "name": "`napi_create_int32`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_int32(napi_env env, int32_t value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>int32_t</code> type to the JavaScript\n<code>number</code> type.</p>\n<p>The JavaScript <code>number</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_int32`"
                },
                {
                  "textRaw": "`napi_create_uint32`",
                  "name": "`napi_create_uint32`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_uint32(napi_env env, uint32_t value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Unsigned integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>uint32_t</code> type to the JavaScript\n<code>number</code> type.</p>\n<p>The JavaScript <code>number</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_uint32`"
                },
                {
                  "textRaw": "`napi_create_int64`",
                  "name": "`napi_create_int64`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_int64(napi_env env, int64_t value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>int64_t</code> type to the JavaScript\n<code>number</code> type.</p>\n<p>The JavaScript <code>number</code> type is described in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a>\nof the ECMAScript Language Specification. Note the complete range of <code>int64_t</code>\ncannot be represented with full precision in JavaScript. Integer values\noutside the range of <a href=\"https://tc39.github.io/ecma262/#sec-number.min_safe_integer\"><code>Number.MIN_SAFE_INTEGER</code></a> <code>-(2**53 - 1)</code> -\n<a href=\"https://tc39.github.io/ecma262/#sec-number.max_safe_integer\"><code>Number.MAX_SAFE_INTEGER</code></a> <code>(2**53 - 1)</code> will lose precision.</p>",
                  "type": "module",
                  "displayName": "`napi_create_int64`"
                },
                {
                  "textRaw": "`napi_create_double`",
                  "name": "`napi_create_double`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_double(napi_env env, double value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Double-precision value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>double</code> type to the JavaScript\n<code>number</code> type.</p>\n<p>The JavaScript <code>number</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_double`"
                },
                {
                  "textRaw": "`napi_create_bigint_int64`",
                  "name": "`napi_create_bigint_int64`",
                  "meta": {
                    "added": [
                      "v10.7.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_bigint_int64(napi_env env,\n                                     int64_t value,\n                                     napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>BigInt</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API converts the C <code>int64_t</code> type to the JavaScript <code>BigInt</code> type.</p>",
                  "type": "module",
                  "displayName": "`napi_create_bigint_int64`"
                },
                {
                  "textRaw": "`napi_create_bigint_uint64`",
                  "name": "`napi_create_bigint_uint64`",
                  "meta": {
                    "added": [
                      "v10.7.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_bigint_uint64(napi_env env,\n                                      uint64_t value,\n                                      napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Unsigned integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>BigInt</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API converts the C <code>uint64_t</code> type to the JavaScript <code>BigInt</code> type.</p>",
                  "type": "module",
                  "displayName": "`napi_create_bigint_uint64`"
                },
                {
                  "textRaw": "`napi_create_bigint_words`",
                  "name": "`napi_create_bigint_words`",
                  "meta": {
                    "added": [
                      "v10.7.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_bigint_words(napi_env env,\n                                     int sign_bit,\n                                     size_t word_count,\n                                     const uint64_t* words,\n                                     napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] sign_bit</code>: Determines if the resulting <code>BigInt</code> will be positive or\nnegative.</li>\n<li><code>[in] word_count</code>: The length of the <code>words</code> array.</li>\n<li><code>[in] words</code>: An array of <code>uint64_t</code> little-endian 64-bit words.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>BigInt</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API converts an array of unsigned 64-bit words into a single <code>BigInt</code>\nvalue.</p>\n<p>The resulting <code>BigInt</code> is calculated as: (â1)<sup><code>sign_bit</code></sup> (<code>words[0]</code>\nÃ (2<sup>64</sup>)<sup>0</sup> + <code>words[1]</code> Ã (2<sup>64</sup>)<sup>1</sup> + â¦)</p>",
                  "type": "module",
                  "displayName": "`napi_create_bigint_words`"
                },
                {
                  "textRaw": "`napi_create_string_latin1`",
                  "name": "`napi_create_string_latin1`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_string_latin1(napi_env env,\n                                      const char* str,\n                                      size_t length,\n                                      napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] str</code>: Character buffer representing an ISO-8859-1-encoded string.</li>\n<li><code>[in] length</code>: The length of the string in bytes, or <code>NAPI_AUTO_LENGTH</code> if it\nis null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>string</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>string</code> value from an ISO-8859-1-encoded C\nstring. The native string is copied.</p>\n<p>The JavaScript <code>string</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_string_latin1`"
                },
                {
                  "textRaw": "`napi_create_string_utf16`",
                  "name": "`napi_create_string_utf16`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_string_utf16(napi_env env,\n                                     const char16_t* str,\n                                     size_t length,\n                                     napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] str</code>: Character buffer representing a UTF16-LE-encoded string.</li>\n<li><code>[in] length</code>: The length of the string in two-byte code units, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>string</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>string</code> value from a UTF16-LE-encoded C string.\nThe native string is copied.</p>\n<p>The JavaScript <code>string</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_string_utf16`"
                },
                {
                  "textRaw": "`napi_create_string_utf8`",
                  "name": "`napi_create_string_utf8`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_create_string_utf8(napi_env env,\n                                    const char* str,\n                                    size_t length,\n                                    napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] str</code>: Character buffer representing a UTF8-encoded string.</li>\n<li><code>[in] length</code>: The length of the string in bytes, or <code>NAPI_AUTO_LENGTH</code> if it\nis null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>string</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>string</code> value from a UTF8-encoded C string.\nThe native string is copied.</p>\n<p>The JavaScript <code>string</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p>",
                  "type": "module",
                  "displayName": "`napi_create_string_utf8`"
                }
              ],
              "type": "module",
              "displayName": "Functions to convert from C types to Node-API"
            },
            {
              "textRaw": "Functions to convert from Node-API to C types",
              "name": "functions_to_convert_from_node-api_to_c_types",
              "modules": [
                {
                  "textRaw": "`napi_get_array_length`",
                  "name": "`napi_get_array_length`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_array_length(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing the JavaScript <code>Array</code> whose length is\nbeing queried.</li>\n<li><code>[out] result</code>: <code>uint32</code> representing length of the array.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the length of an array.</p>\n<p><code>Array</code> length is described in <a href=\"https://tc39.github.io/ecma262/#sec-properties-of-array-instances-length\">Section 22.1.4.1</a> of the ECMAScript Language\nSpecification.</p>",
                  "type": "module",
                  "displayName": "`napi_get_array_length`"
                },
                {
                  "textRaw": "`napi_get_arraybuffer_info`",
                  "name": "`napi_get_arraybuffer_info`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_arraybuffer_info(napi_env env,\n                                      napi_value arraybuffer,\n                                      void** data,\n                                      size_t* byte_length)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] arraybuffer</code>: <code>napi_value</code> representing the <code>ArrayBuffer</code> being queried.</li>\n<li><code>[out] data</code>: The underlying data buffer of the <code>ArrayBuffer</code>. If byte_length\nis <code>0</code>, this may be <code>NULL</code> or any other pointer value.</li>\n<li><code>[out] byte_length</code>: Length in bytes of the underlying data buffer.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to retrieve the underlying data buffer of an <code>ArrayBuffer</code> and\nits length.</p>\n<p><em>WARNING</em>: Use caution while using this API. The lifetime of the underlying data\nbuffer is managed by the <code>ArrayBuffer</code> even after it's returned. A\npossible safe way to use this API is in conjunction with\n<a href=\"#napi_create_reference\"><code>napi_create_reference</code></a>, which can be used to guarantee control over the\nlifetime of the <code>ArrayBuffer</code>. It's also safe to use the returned data buffer\nwithin the same callback as long as there are no calls to other APIs that might\ntrigger a GC.</p>",
                  "type": "module",
                  "displayName": "`napi_get_arraybuffer_info`"
                },
                {
                  "textRaw": "`napi_get_buffer_info`",
                  "name": "`napi_get_buffer_info`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_buffer_info(napi_env env,\n                                 napi_value value,\n                                 void** data,\n                                 size_t* length)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing the <code>node::Buffer</code> being queried.</li>\n<li><code>[out] data</code>: The underlying data buffer of the <code>node::Buffer</code>.\nIf length is <code>0</code>, this may be <code>NULL</code> or any other pointer value.</li>\n<li><code>[out] length</code>: Length in bytes of the underlying data buffer.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to retrieve the underlying data buffer of a <code>node::Buffer</code>\nand its length.</p>\n<p><em>Warning</em>: Use caution while using this API since the underlying data buffer's\nlifetime is not guaranteed if it's managed by the VM.</p>",
                  "type": "module",
                  "displayName": "`napi_get_buffer_info`"
                },
                {
                  "textRaw": "`napi_get_prototype`",
                  "name": "`napi_get_prototype`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_prototype(napi_env env,\n                               napi_value object,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] object</code>: <code>napi_value</code> representing JavaScript <code>Object</code> whose prototype\nto return. This returns the equivalent of <code>Object.getPrototypeOf</code> (which is\nnot the same as the function's <code>prototype</code> property).</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing prototype of the given object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>",
                  "type": "module",
                  "displayName": "`napi_get_prototype`"
                },
                {
                  "textRaw": "`napi_get_typedarray_info`",
                  "name": "`napi_get_typedarray_info`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_typedarray_info(napi_env env,\n                                     napi_value typedarray,\n                                     napi_typedarray_type* type,\n                                     size_t* length,\n                                     void** data,\n                                     napi_value* arraybuffer,\n                                     size_t* byte_offset)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] typedarray</code>: <code>napi_value</code> representing the <code>TypedArray</code> whose\nproperties to query.</li>\n<li><code>[out] type</code>: Scalar datatype of the elements within the <code>TypedArray</code>.</li>\n<li><code>[out] length</code>: The number of elements in the <code>TypedArray</code>.</li>\n<li><code>[out] data</code>: The data buffer underlying the <code>TypedArray</code> adjusted by\nthe <code>byte_offset</code> value so that it points to the first element in the\n<code>TypedArray</code>. If the length of the array is <code>0</code>, this may be <code>NULL</code> or\nany other pointer value.</li>\n<li><code>[out] arraybuffer</code>: The <code>ArrayBuffer</code> underlying the <code>TypedArray</code>.</li>\n<li><code>[out] byte_offset</code>: The byte offset within the underlying native array\nat which the first element of the arrays is located. The value for the data\nparameter has already been adjusted so that data points to the first element\nin the array. Therefore, the first byte of the native array would be at\n<code>data - byte_offset</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns various properties of a typed array.</p>\n<p>Any of the out parameters may be <code>NULL</code> if that property is unneeded.</p>\n<p><em>Warning</em>: Use caution while using this API since the underlying data buffer\nis managed by the VM.</p>",
                  "type": "module",
                  "displayName": "`napi_get_typedarray_info`"
                },
                {
                  "textRaw": "`napi_get_dataview_info`",
                  "name": "`napi_get_dataview_info`",
                  "meta": {
                    "added": [
                      "v8.3.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_dataview_info(napi_env env,\n                                   napi_value dataview,\n                                   size_t* byte_length,\n                                   void** data,\n                                   napi_value* arraybuffer,\n                                   size_t* byte_offset)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] dataview</code>: <code>napi_value</code> representing the <code>DataView</code> whose\nproperties to query.</li>\n<li><code>[out] byte_length</code>: Number of bytes in the <code>DataView</code>.</li>\n<li><code>[out] data</code>: The data buffer underlying the <code>DataView</code>.\nIf byte_length is <code>0</code>, this may be <code>NULL</code> or any other pointer value.</li>\n<li><code>[out] arraybuffer</code>: <code>ArrayBuffer</code> underlying the <code>DataView</code>.</li>\n<li><code>[out] byte_offset</code>: The byte offset within the data buffer from which\nto start projecting the <code>DataView</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Any of the out parameters may be <code>NULL</code> if that property is unneeded.</p>\n<p>This API returns various properties of a <code>DataView</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_dataview_info`"
                },
                {
                  "textRaw": "`napi_get_date_value`",
                  "name": "`napi_get_date_value`",
                  "meta": {
                    "added": [
                      "v11.11.0",
                      "v10.17.0"
                    ],
                    "napiVersion": [
                      5
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_date_value(napi_env env,\n                                napi_value value,\n                                double* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing a JavaScript <code>Date</code>.</li>\n<li><code>[out] result</code>: Time value as a <code>double</code> represented as milliseconds since\nmidnight at the beginning of 01 January, 1970 UTC.</li>\n</ul>\n<p>This API does not observe leap seconds; they are ignored, as\nECMAScript aligns with POSIX time specification.</p>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-date <code>napi_value</code> is passed\nin it returns <code>napi_date_expected</code>.</p>\n<p>This API returns the C double primitive of time value for the given JavaScript\n<code>Date</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_date_value`"
                },
                {
                  "textRaw": "`napi_get_value_bool`",
                  "name": "`napi_get_value_bool`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_bool(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>Boolean</code>.</li>\n<li><code>[out] result</code>: C boolean primitive equivalent of the given JavaScript\n<code>Boolean</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-boolean <code>napi_value</code> is\npassed in it returns <code>napi_boolean_expected</code>.</p>\n<p>This API returns the C boolean primitive equivalent of the given JavaScript\n<code>Boolean</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_bool`"
                },
                {
                  "textRaw": "`napi_get_value_double`",
                  "name": "`napi_get_value_double`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_double(napi_env env,\n                                  napi_value value,\n                                  double* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>number</code>.</li>\n<li><code>[out] result</code>: C double primitive equivalent of the given JavaScript\n<code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code> is passed\nin it returns <code>napi_number_expected</code>.</p>\n<p>This API returns the C double primitive equivalent of the given JavaScript\n<code>number</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_double`"
                },
                {
                  "textRaw": "`napi_get_value_bigint_int64`",
                  "name": "`napi_get_value_bigint_int64`",
                  "meta": {
                    "added": [
                      "v10.7.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_bigint_int64(napi_env env,\n                                        napi_value value,\n                                        int64_t* result,\n                                        bool* lossless);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>BigInt</code>.</li>\n<li><code>[out] result</code>: C <code>int64_t</code> primitive equivalent of the given JavaScript\n<code>BigInt</code>.</li>\n<li><code>[out] lossless</code>: Indicates whether the <code>BigInt</code> value was converted\nlosslessly.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>BigInt</code> is passed in it\nreturns <code>napi_bigint_expected</code>.</p>\n<p>This API returns the C <code>int64_t</code> primitive equivalent of the given JavaScript\n<code>BigInt</code>. If needed it will truncate the value, setting <code>lossless</code> to <code>false</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_bigint_int64`"
                },
                {
                  "textRaw": "`napi_get_value_bigint_uint64`",
                  "name": "`napi_get_value_bigint_uint64`",
                  "meta": {
                    "added": [
                      "v10.7.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_bigint_uint64(napi_env env,\n                                        napi_value value,\n                                        uint64_t* result,\n                                        bool* lossless);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>BigInt</code>.</li>\n<li><code>[out] result</code>: C <code>uint64_t</code> primitive equivalent of the given JavaScript\n<code>BigInt</code>.</li>\n<li><code>[out] lossless</code>: Indicates whether the <code>BigInt</code> value was converted\nlosslessly.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>BigInt</code> is passed in it\nreturns <code>napi_bigint_expected</code>.</p>\n<p>This API returns the C <code>uint64_t</code> primitive equivalent of the given JavaScript\n<code>BigInt</code>. If needed it will truncate the value, setting <code>lossless</code> to <code>false</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_bigint_uint64`"
                },
                {
                  "textRaw": "`napi_get_value_bigint_words`",
                  "name": "`napi_get_value_bigint_words`",
                  "meta": {
                    "added": [
                      "v10.7.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_bigint_words(napi_env env,\n                                        napi_value value,\n                                        int* sign_bit,\n                                        size_t* word_count,\n                                        uint64_t* words);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>BigInt</code>.</li>\n<li><code>[out] sign_bit</code>: Integer representing if the JavaScript <code>BigInt</code> is positive\nor negative.</li>\n<li><code>[in/out] word_count</code>: Must be initialized to the length of the <code>words</code>\narray. Upon return, it will be set to the actual number of words that\nwould be needed to store this <code>BigInt</code>.</li>\n<li><code>[out] words</code>: Pointer to a pre-allocated 64-bit word array.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API converts a single <code>BigInt</code> value into a sign bit, 64-bit little-endian\narray, and the number of elements in the array. <code>sign_bit</code> and <code>words</code> may be\nboth set to <code>NULL</code>, in order to get only <code>word_count</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_bigint_words`"
                },
                {
                  "textRaw": "`napi_get_value_external`",
                  "name": "`napi_get_value_external`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_external(napi_env env,\n                                    napi_value value,\n                                    void** result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript external value.</li>\n<li><code>[out] result</code>: Pointer to the data wrapped by the JavaScript external value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-external <code>napi_value</code> is\npassed in it returns <code>napi_invalid_arg</code>.</p>\n<p>This API retrieves the external data pointer that was previously passed to\n<code>napi_create_external()</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_external`"
                },
                {
                  "textRaw": "`napi_get_value_int32`",
                  "name": "`napi_get_value_int32`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_int32(napi_env env,\n                                 napi_value value,\n                                 int32_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>number</code>.</li>\n<li><code>[out] result</code>: C <code>int32</code> primitive equivalent of the given JavaScript\n<code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code>\nis passed in <code>napi_number_expected</code>.</p>\n<p>This API returns the C <code>int32</code> primitive equivalent\nof the given JavaScript <code>number</code>.</p>\n<p>If the number exceeds the range of the 32 bit integer, then the result is\ntruncated to the equivalent of the bottom 32 bits. This can result in a large\npositive number becoming a negative number if the value is > 2<sup>31</sup> - 1.</p>\n<p>Non-finite number values (<code>NaN</code>, <code>+Infinity</code>, or <code>-Infinity</code>) set the\nresult to zero.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_int32`"
                },
                {
                  "textRaw": "`napi_get_value_int64`",
                  "name": "`napi_get_value_int64`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_int64(napi_env env,\n                                 napi_value value,\n                                 int64_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>number</code>.</li>\n<li><code>[out] result</code>: C <code>int64</code> primitive equivalent of the given JavaScript\n<code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code>\nis passed in it returns <code>napi_number_expected</code>.</p>\n<p>This API returns the C <code>int64</code> primitive equivalent of the given JavaScript\n<code>number</code>.</p>\n<p><code>number</code> values outside the range of <a href=\"https://tc39.github.io/ecma262/#sec-number.min_safe_integer\"><code>Number.MIN_SAFE_INTEGER</code></a>\n<code>-(2**53 - 1)</code> - <a href=\"https://tc39.github.io/ecma262/#sec-number.max_safe_integer\"><code>Number.MAX_SAFE_INTEGER</code></a> <code>(2**53 - 1)</code> will lose\nprecision.</p>\n<p>Non-finite number values (<code>NaN</code>, <code>+Infinity</code>, or <code>-Infinity</code>) set the\nresult to zero.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_int64`"
                },
                {
                  "textRaw": "`napi_get_value_string_latin1`",
                  "name": "`napi_get_value_string_latin1`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_string_latin1(napi_env env,\n                                         napi_value value,\n                                         char* buf,\n                                         size_t bufsize,\n                                         size_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li>\n<li><code>[in] buf</code>: Buffer to write the ISO-8859-1-encoded string into. If <code>NULL</code> is\npassed in, the length of the string in bytes and excluding the null terminator\nis returned in <code>result</code>.</li>\n<li><code>[in] bufsize</code>: Size of the destination buffer. When this value is\ninsufficient, the returned string is truncated and null-terminated.</li>\n<li><code>[out] result</code>: Number of bytes copied into the buffer, excluding the null\nterminator.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>string</code> <code>napi_value</code>\nis passed in it returns <code>napi_string_expected</code>.</p>\n<p>This API returns the ISO-8859-1-encoded string corresponding the value passed\nin.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_string_latin1`"
                },
                {
                  "textRaw": "`napi_get_value_string_utf8`",
                  "name": "`napi_get_value_string_utf8`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_string_utf8(napi_env env,\n                                       napi_value value,\n                                       char* buf,\n                                       size_t bufsize,\n                                       size_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li>\n<li><code>[in] buf</code>: Buffer to write the UTF8-encoded string into. If <code>NULL</code> is passed\nin, the length of the string in bytes and excluding the null terminator is\nreturned in <code>result</code>.</li>\n<li><code>[in] bufsize</code>: Size of the destination buffer. When this value is\ninsufficient, the returned string is truncated and null-terminated.</li>\n<li><code>[out] result</code>: Number of bytes copied into the buffer, excluding the null\nterminator.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>string</code> <code>napi_value</code>\nis passed in it returns <code>napi_string_expected</code>.</p>\n<p>This API returns the UTF8-encoded string corresponding the value passed in.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_string_utf8`"
                },
                {
                  "textRaw": "`napi_get_value_string_utf16`",
                  "name": "`napi_get_value_string_utf16`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_string_utf16(napi_env env,\n                                        napi_value value,\n                                        char16_t* buf,\n                                        size_t bufsize,\n                                        size_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li>\n<li><code>[in] buf</code>: Buffer to write the UTF16-LE-encoded string into. If <code>NULL</code> is\npassed in, the length of the string in 2-byte code units and excluding the\nnull terminator is returned.</li>\n<li><code>[in] bufsize</code>: Size of the destination buffer. When this value is\ninsufficient, the returned string is truncated and null-terminated.</li>\n<li><code>[out] result</code>: Number of 2-byte code units copied into the buffer, excluding\nthe null terminator.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>string</code> <code>napi_value</code>\nis passed in it returns <code>napi_string_expected</code>.</p>\n<p>This API returns the UTF16-encoded string corresponding the value passed in.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_string_utf16`"
                },
                {
                  "textRaw": "`napi_get_value_uint32`",
                  "name": "`napi_get_value_uint32`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_value_uint32(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>number</code>.</li>\n<li><code>[out] result</code>: C primitive equivalent of the given <code>napi_value</code> as a\n<code>uint32_t</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code>\nis passed in it returns <code>napi_number_expected</code>.</p>\n<p>This API returns the C primitive equivalent of the given <code>napi_value</code> as a\n<code>uint32_t</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_value_uint32`"
                }
              ],
              "type": "module",
              "displayName": "Functions to convert from Node-API to C types"
            },
            {
              "textRaw": "Functions to get global instances",
              "name": "functions_to_get_global_instances",
              "modules": [
                {
                  "textRaw": "`napi_get_boolean`",
                  "name": "`napi_get_boolean`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_boolean(napi_env env, bool value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The value of the boolean to retrieve.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript <code>Boolean</code> singleton to\nretrieve.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to return the JavaScript singleton object that is used to\nrepresent the given boolean value.</p>",
                  "type": "module",
                  "displayName": "`napi_get_boolean`"
                },
                {
                  "textRaw": "`napi_get_global`",
                  "name": "`napi_get_global`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_global(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript <code>global</code> object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the <code>global</code> object.</p>",
                  "type": "module",
                  "displayName": "`napi_get_global`"
                },
                {
                  "textRaw": "`napi_get_null`",
                  "name": "`napi_get_null`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_null(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript <code>null</code> object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the <code>null</code> object.</p>",
                  "type": "module",
                  "displayName": "`napi_get_null`"
                },
                {
                  "textRaw": "`napi_get_undefined`",
                  "name": "`napi_get_undefined`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_undefined(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript Undefined value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the Undefined object.</p>",
                  "type": "module",
                  "displayName": "`napi_get_undefined`"
                }
              ],
              "type": "module",
              "displayName": "Functions to get global instances"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript values"
        },
        {
          "textRaw": "Working with JavaScript values and abstract operations",
          "name": "working_with_javascript_values_and_abstract_operations",
          "desc": "<p>Node-API exposes a set of APIs to perform some abstract operations on JavaScript\nvalues. Some of these operations are documented under <a href=\"https://tc39.github.io/ecma262/#sec-abstract-operations\">Section 7</a>\nof the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n<p>These APIs support doing one of the following:</p>\n<ol>\n<li>Coerce JavaScript values to specific JavaScript types (such as <code>number</code> or\n<code>string</code>).</li>\n<li>Check the type of a JavaScript value.</li>\n<li>Check for equality between two JavaScript values.</li>\n</ol>",
          "modules": [
            {
              "textRaw": "`napi_coerce_to_bool`",
              "name": "`napi_coerce_to_bool`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_coerce_to_bool(napi_env env,\n                                napi_value value,\n                                napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>Boolean</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToBoolean()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-toboolean\">Section 7.1.2</a> of the ECMAScript Language Specification.</p>",
              "type": "module",
              "displayName": "`napi_coerce_to_bool`"
            },
            {
              "textRaw": "`napi_coerce_to_number`",
              "name": "`napi_coerce_to_number`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_coerce_to_number(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToNumber()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-tonumber\">Section 7.1.3</a> of the ECMAScript Language Specification.\nThis function potentially runs JS code if the passed-in value is an\nobject.</p>",
              "type": "module",
              "displayName": "`napi_coerce_to_number`"
            },
            {
              "textRaw": "`napi_coerce_to_object`",
              "name": "`napi_coerce_to_object`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_coerce_to_object(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>Object</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToObject()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-toobject\">Section 7.1.13</a> of the ECMAScript Language Specification.</p>",
              "type": "module",
              "displayName": "`napi_coerce_to_object`"
            },
            {
              "textRaw": "`napi_coerce_to_string`",
              "name": "`napi_coerce_to_string`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_coerce_to_string(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>string</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToString()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-toobject\">Section 7.1.13</a> of the ECMAScript Language Specification.\nThis function potentially runs JS code if the passed-in value is an\nobject.</p>",
              "type": "module",
              "displayName": "`napi_coerce_to_string`"
            },
            {
              "textRaw": "`napi_typeof`",
              "name": "`napi_typeof`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_typeof(napi_env env, napi_value value, napi_valuetype* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value whose type to query.</li>\n<li><code>[out] result</code>: The type of the JavaScript value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<ul>\n<li><code>napi_invalid_arg</code> if the type of <code>value</code> is not a known ECMAScript type and\n<code>value</code> is not an External value.</li>\n</ul>\n<p>This API represents behavior similar to invoking the <code>typeof</code> Operator on\nthe object as defined in <a href=\"https://tc39.github.io/ecma262/#sec-typeof-operator\">Section 12.5.5</a> of the ECMAScript Language\nSpecification. However, there are some differences:</p>\n<ol>\n<li>It has support for detecting an External value.</li>\n<li>It detects <code>null</code> as a separate type, while ECMAScript <code>typeof</code> would detect\n<code>object</code>.</li>\n</ol>\n<p>If <code>value</code> has a type that is invalid, an error is returned.</p>",
              "type": "module",
              "displayName": "`napi_typeof`"
            },
            {
              "textRaw": "`napi_instanceof`",
              "name": "`napi_instanceof`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_instanceof(napi_env env,\n                            napi_value object,\n                            napi_value constructor,\n                            bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] object</code>: The JavaScript value to check.</li>\n<li><code>[in] constructor</code>: The JavaScript function object of the constructor function\nto check against.</li>\n<li><code>[out] result</code>: Boolean that is set to true if <code>object instanceof constructor</code>\nis true.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API represents invoking the <code>instanceof</code> Operator on the object as\ndefined in <a href=\"https://tc39.github.io/ecma262/#sec-instanceofoperator\">Section 12.10.4</a> of the ECMAScript Language Specification.</p>",
              "type": "module",
              "displayName": "`napi_instanceof`"
            },
            {
              "textRaw": "`napi_is_array`",
              "name": "`napi_is_array`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_array(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given object is an array.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API represents invoking the <code>IsArray</code> operation on the object\nas defined in <a href=\"https://tc39.github.io/ecma262/#sec-isarray\">Section 7.2.2</a> of the ECMAScript Language Specification.</p>",
              "type": "module",
              "displayName": "`napi_is_array`"
            },
            {
              "textRaw": "`napi_is_arraybuffer`",
              "name": "`napi_is_arraybuffer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given object is an <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is an array buffer.</p>",
              "type": "module",
              "displayName": "`napi_is_arraybuffer`"
            },
            {
              "textRaw": "`napi_is_buffer`",
              "name": "`napi_is_buffer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_buffer(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>node::Buffer</code>\nobject.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a buffer.</p>",
              "type": "module",
              "displayName": "`napi_is_buffer`"
            },
            {
              "textRaw": "`napi_is_date`",
              "name": "`napi_is_date`",
              "meta": {
                "added": [
                  "v11.11.0",
                  "v10.17.0"
                ],
                "napiVersion": [
                  5
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_date(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a JavaScript <code>Date</code>\nobject.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a date.</p>",
              "type": "module",
              "displayName": "`napi_is_date`"
            },
            {
              "textRaw": "`napi_is_error`",
              "name": "`napi_is_error`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_error(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents an <code>Error</code> object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is an <code>Error</code>.</p>",
              "type": "module",
              "displayName": "`napi_is_error`"
            },
            {
              "textRaw": "`napi_is_typedarray`",
              "name": "`napi_is_typedarray`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_typedarray(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>TypedArray</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a typed array.</p>",
              "type": "module",
              "displayName": "`napi_is_typedarray`"
            },
            {
              "textRaw": "`napi_is_dataview`",
              "name": "`napi_is_dataview`",
              "meta": {
                "added": [
                  "v8.3.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_dataview(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>DataView</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a <code>DataView</code>.</p>",
              "type": "module",
              "displayName": "`napi_is_dataview`"
            },
            {
              "textRaw": "`napi_strict_equals`",
              "name": "`napi_strict_equals`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_strict_equals(napi_env env,\n                               napi_value lhs,\n                               napi_value rhs,\n                               bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] lhs</code>: The JavaScript value to check.</li>\n<li><code>[in] rhs</code>: The JavaScript value to check against.</li>\n<li><code>[out] result</code>: Whether the two <code>napi_value</code> objects are equal.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API represents the invocation of the Strict Equality algorithm as\ndefined in <a href=\"https://tc39.github.io/ecma262/#sec-strict-equality-comparison\">Section 7.2.14</a> of the ECMAScript Language Specification.</p>",
              "type": "module",
              "displayName": "`napi_strict_equals`"
            },
            {
              "textRaw": "`napi_detach_arraybuffer`",
              "name": "`napi_detach_arraybuffer`",
              "meta": {
                "added": [
                  "v13.0.0",
                  "v12.16.0",
                  "v10.22.0"
                ],
                "napiVersion": [
                  7
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_detach_arraybuffer(napi_env env,\n                                    napi_value arraybuffer)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] arraybuffer</code>: The JavaScript <code>ArrayBuffer</code> to be detached.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-detachable <code>ArrayBuffer</code> is\npassed in it returns <code>napi_detachable_arraybuffer_expected</code>.</p>\n<p>Generally, an <code>ArrayBuffer</code> is non-detachable if it has been detached before.\nThe engine may impose additional conditions on whether an <code>ArrayBuffer</code> is\ndetachable. For example, V8 requires that the <code>ArrayBuffer</code> be external,\nthat is, created with <a href=\"#napi_create_external_arraybuffer\"><code>napi_create_external_arraybuffer</code></a>.</p>\n<p>This API represents the invocation of the <code>ArrayBuffer</code> detach operation as\ndefined in <a href=\"https://tc39.es/ecma262/#sec-detacharraybuffer\">Section 24.1.1.3</a> of the ECMAScript Language Specification.</p>",
              "type": "module",
              "displayName": "`napi_detach_arraybuffer`"
            },
            {
              "textRaw": "`napi_is_detached_arraybuffer`",
              "name": "`napi_is_detached_arraybuffer`",
              "meta": {
                "added": [
                  "v13.3.0",
                  "v12.16.0",
                  "v10.22.0"
                ],
                "napiVersion": [
                  7
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_detached_arraybuffer(napi_env env,\n                                         napi_value arraybuffer,\n                                         bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] arraybuffer</code>: The JavaScript <code>ArrayBuffer</code> to be checked.</li>\n<li><code>[out] result</code>: Whether the <code>arraybuffer</code> is detached.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>The <code>ArrayBuffer</code> is considered detached if its internal data is <code>null</code>.</p>\n<p>This API represents the invocation of the <code>ArrayBuffer</code> <code>IsDetachedBuffer</code>\noperation as defined in <a href=\"https://tc39.es/ecma262/#sec-isdetachedbuffer\">Section 24.1.1.2</a> of the ECMAScript Language\nSpecification.</p>",
              "type": "module",
              "displayName": "`napi_is_detached_arraybuffer`"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript values and abstract operations"
        },
        {
          "textRaw": "Working with JavaScript properties",
          "name": "working_with_javascript_properties",
          "desc": "<p>Node-API exposes a set of APIs to get and set properties on JavaScript\nobjects. Some of these types are documented under <a href=\"https://tc39.github.io/ecma262/#sec-abstract-operations\">Section 7</a> of the\n<a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n<p>Properties in JavaScript are represented as a tuple of a key and a value.\nFundamentally, all property keys in Node-API can be represented in one of the\nfollowing forms:</p>\n<ul>\n<li>Named: a simple UTF8-encoded string</li>\n<li>Integer-Indexed: an index value represented by <code>uint32_t</code></li>\n<li>JavaScript value: these are represented in Node-API by <code>napi_value</code>. This can\nbe a <code>napi_value</code> representing a <code>string</code>, <code>number</code>, or <code>symbol</code>.</li>\n</ul>\n<p>Node-API values are represented by the type <code>napi_value</code>.\nAny Node-API call that requires a JavaScript value takes in a <code>napi_value</code>.\nHowever, it's the caller's responsibility to make sure that the\n<code>napi_value</code> in question is of the JavaScript type expected by the API.</p>\n<p>The APIs documented in this section provide a simple interface to\nget and set properties on arbitrary JavaScript objects represented by\n<code>napi_value</code>.</p>\n<p>For instance, consider the following JavaScript code snippet:</p>\n<pre><code class=\"language-js\">const obj = {};\nobj.myProp = 123;\n</code></pre>\n<p>The equivalent can be done using Node-API values with the following snippet:</p>\n<pre><code class=\"language-c\">napi_status status = napi_generic_failure;\n\n// const obj = {}\nnapi_value obj, value;\nstatus = napi_create_object(env, &#x26;obj);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 123\nstatus = napi_create_int32(env, 123, &#x26;value);\nif (status != napi_ok) return status;\n\n// obj.myProp = 123\nstatus = napi_set_named_property(env, obj, \"myProp\", value);\nif (status != napi_ok) return status;\n</code></pre>\n<p>Indexed properties can be set in a similar manner. Consider the following\nJavaScript snippet:</p>\n<pre><code class=\"language-js\">const arr = [];\narr[123] = 'hello';\n</code></pre>\n<p>The equivalent can be done using Node-API values with the following snippet:</p>\n<pre><code class=\"language-c\">napi_status status = napi_generic_failure;\n\n// const arr = [];\nnapi_value arr, value;\nstatus = napi_create_array(env, &#x26;arr);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 'hello'\nstatus = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &#x26;value);\nif (status != napi_ok) return status;\n\n// arr[123] = 'hello';\nstatus = napi_set_element(env, arr, 123, value);\nif (status != napi_ok) return status;\n</code></pre>\n<p>Properties can be retrieved using the APIs described in this section.\nConsider the following JavaScript snippet:</p>\n<pre><code class=\"language-js\">const arr = [];\nconst value = arr[123];\n</code></pre>\n<p>The following is the approximate equivalent of the Node-API counterpart:</p>\n<pre><code class=\"language-c\">napi_status status = napi_generic_failure;\n\n// const arr = []\nnapi_value arr, value;\nstatus = napi_create_array(env, &#x26;arr);\nif (status != napi_ok) return status;\n\n// const value = arr[123]\nstatus = napi_get_element(env, arr, 123, &#x26;value);\nif (status != napi_ok) return status;\n</code></pre>\n<p>Finally, multiple properties can also be defined on an object for performance\nreasons. Consider the following JavaScript:</p>\n<pre><code class=\"language-js\">const obj = {};\nObject.defineProperties(obj, {\n  'foo': { value: 123, writable: true, configurable: true, enumerable: true },\n  'bar': { value: 456, writable: true, configurable: true, enumerable: true },\n});\n</code></pre>\n<p>The following is the approximate equivalent of the Node-API counterpart:</p>\n<pre><code class=\"language-c\">napi_status status = napi_status_generic_failure;\n\n// const obj = {};\nnapi_value obj;\nstatus = napi_create_object(env, &#x26;obj);\nif (status != napi_ok) return status;\n\n// Create napi_values for 123 and 456\nnapi_value fooValue, barValue;\nstatus = napi_create_int32(env, 123, &#x26;fooValue);\nif (status != napi_ok) return status;\nstatus = napi_create_int32(env, 456, &#x26;barValue);\nif (status != napi_ok) return status;\n\n// Set the properties\nnapi_property_descriptor descriptors[] = {\n  { \"foo\", NULL, NULL, NULL, NULL, fooValue, napi_writable | napi_configurable, NULL },\n  { \"bar\", NULL, NULL, NULL, NULL, barValue, napi_writable | napi_configurable, NULL }\n}\nstatus = napi_define_properties(env,\n                                obj,\n                                sizeof(descriptors) / sizeof(descriptors[0]),\n                                descriptors);\nif (status != napi_ok) return status;\n</code></pre>",
          "modules": [
            {
              "textRaw": "Structures",
              "name": "structures",
              "modules": [
                {
                  "textRaw": "`napi_property_attributes`",
                  "name": "`napi_property_attributes`",
                  "meta": {
                    "changes": [
                      {
                        "version": "v14.12.0",
                        "pr-url": "https://github.com/nodejs/node/pull/35214",
                        "description": "added `napi_default_method` and `napi_default_property`."
                      }
                    ]
                  },
                  "desc": "<pre><code class=\"language-c\">typedef enum {\n  napi_default = 0,\n  napi_writable = 1 &#x3C;&#x3C; 0,\n  napi_enumerable = 1 &#x3C;&#x3C; 1,\n  napi_configurable = 1 &#x3C;&#x3C; 2,\n\n  // Used with napi_define_class to distinguish static properties\n  // from instance properties. Ignored by napi_define_properties.\n  napi_static = 1 &#x3C;&#x3C; 10,\n\n  // Default for class methods.\n  napi_default_method = napi_writable | napi_configurable,\n\n  // Default for object properties, like in JS obj[prop].\n  napi_default_jsproperty = napi_writable |\n                          napi_enumerable |\n                          napi_configurable,\n} napi_property_attributes;\n</code></pre>\n<p><code>napi_property_attributes</code> are flags used to control the behavior of properties\nset on a JavaScript object. Other than <code>napi_static</code> they correspond to the\nattributes listed in <a href=\"https://tc39.github.io/ecma262/#table-2\">Section 6.1.7.1</a>\nof the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.\nThey can be one or more of the following bitflags:</p>\n<ul>\n<li><code>napi_default</code>: No explicit attributes are set on the property. By default, a\nproperty is read only, not enumerable and not configurable.</li>\n<li><code>napi_writable</code>: The property is writable.</li>\n<li><code>napi_enumerable</code>: The property is enumerable.</li>\n<li><code>napi_configurable</code>: The property is configurable as defined in\n<a href=\"https://tc39.github.io/ecma262/#table-2\">Section 6.1.7.1</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</li>\n<li><code>napi_static</code>: The property will be defined as a static property on a class as\nopposed to an instance property, which is the default. This is used only by\n<a href=\"#napi_define_class\"><code>napi_define_class</code></a>. It is ignored by <code>napi_define_properties</code>.</li>\n<li><code>napi_default_method</code>: Like a method in a JS class, the property is\nconfigurable and writeable, but not enumerable.</li>\n<li><code>napi_default_jsproperty</code>: Like a property set via assignment in JavaScript,\nthe property is writable, enumerable, and configurable.</li>\n</ul>",
                  "type": "module",
                  "displayName": "`napi_property_attributes`"
                },
                {
                  "textRaw": "`napi_property_descriptor`",
                  "name": "`napi_property_descriptor`",
                  "desc": "<pre><code class=\"language-c\">typedef struct {\n  // One of utf8name or name should be NULL.\n  const char* utf8name;\n  napi_value name;\n\n  napi_callback method;\n  napi_callback getter;\n  napi_callback setter;\n  napi_value value;\n\n  napi_property_attributes attributes;\n  void* data;\n} napi_property_descriptor;\n</code></pre>\n<ul>\n<li><code>utf8name</code>: Optional string describing the key for the property,\nencoded as UTF8. One of <code>utf8name</code> or <code>name</code> must be provided for the\nproperty.</li>\n<li><code>name</code>: Optional <code>napi_value</code> that points to a JavaScript string or symbol\nto be used as the key for the property. One of <code>utf8name</code> or <code>name</code> must\nbe provided for the property.</li>\n<li><code>value</code>: The value that's retrieved by a get access of the property if the\nproperty is a data property. If this is passed in, set <code>getter</code>, <code>setter</code>,\n<code>method</code> and <code>data</code> to <code>NULL</code> (since these members won't be used).</li>\n<li><code>getter</code>: A function to call when a get access of the property is performed.\nIf this is passed in, set <code>value</code> and <code>method</code> to <code>NULL</code> (since these members\nwon't be used). The given function is called implicitly by the runtime when\nthe property is accessed from JavaScript code (or if a get on the property is\nperformed using a Node-API call). <a href=\"#napi_callback\"><code>napi_callback</code></a> provides more details.</li>\n<li><code>setter</code>: A function to call when a set access of the property is performed.\nIf this is passed in, set <code>value</code> and <code>method</code> to <code>NULL</code> (since these members\nwon't be used). The given function is called implicitly by the runtime when\nthe property is set from JavaScript code (or if a set on the property is\nperformed using a Node-API call). <a href=\"#napi_callback\"><code>napi_callback</code></a> provides more details.</li>\n<li><code>method</code>: Set this to make the property descriptor object's <code>value</code>\nproperty to be a JavaScript function represented by <code>method</code>. If this is\npassed in, set <code>value</code>, <code>getter</code> and <code>setter</code> to <code>NULL</code> (since these members\nwon't be used). <a href=\"#napi_callback\"><code>napi_callback</code></a> provides more details.</li>\n<li><code>attributes</code>: The attributes associated with the particular property. See\n<a href=\"#napi_property_attributes\"><code>napi_property_attributes</code></a>.</li>\n<li><code>data</code>: The callback data passed into <code>method</code>, <code>getter</code> and <code>setter</code> if this\nfunction is invoked.</li>\n</ul>",
                  "type": "module",
                  "displayName": "`napi_property_descriptor`"
                }
              ],
              "type": "module",
              "displayName": "Structures"
            },
            {
              "textRaw": "Functions",
              "name": "functions",
              "modules": [
                {
                  "textRaw": "`napi_get_property_names`",
                  "name": "`napi_get_property_names`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_property_names(napi_env env,\n                                    napi_value object,\n                                    napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the properties.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing an array of JavaScript values\nthat represent the property names of the object. The API can be used to\niterate over <code>result</code> using <a href=\"#napi_get_array_length\"><code>napi_get_array_length</code></a>\nand <a href=\"#napi_get_element\"><code>napi_get_element</code></a>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the names of the enumerable properties of <code>object</code> as an array\nof strings. The properties of <code>object</code> whose key is a symbol will not be\nincluded.</p>",
                  "type": "module",
                  "displayName": "`napi_get_property_names`"
                },
                {
                  "textRaw": "`napi_get_all_property_names`",
                  "name": "`napi_get_all_property_names`",
                  "meta": {
                    "added": [
                      "v13.7.0",
                      "v12.17.0",
                      "v10.20.0"
                    ],
                    "napiVersion": [
                      6
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_get_all_property_names(napi_env env,\n                            napi_value object,\n                            napi_key_collection_mode key_mode,\n                            napi_key_filter key_filter,\n                            napi_key_conversion key_conversion,\n                            napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the properties.</li>\n<li><code>[in] key_mode</code>: Whether to retrieve prototype properties as well.</li>\n<li><code>[in] key_filter</code>: Which properties to retrieve\n(enumerable/readable/writable).</li>\n<li><code>[in] key_conversion</code>: Whether to convert numbered property keys to strings.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing an array of JavaScript values\nthat represent the property names of the object. <a href=\"#napi_get_array_length\"><code>napi_get_array_length</code></a>\nand <a href=\"#napi_get_element\"><code>napi_get_element</code></a> can be used to iterate over <code>result</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns an array containing the names of the available properties\nof this object.</p>",
                  "type": "module",
                  "displayName": "`napi_get_all_property_names`"
                },
                {
                  "textRaw": "`napi_set_property`",
                  "name": "`napi_set_property`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_set_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value value);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object on which to set the property.</li>\n<li><code>[in] key</code>: The name of the property to set.</li>\n<li><code>[in] value</code>: The property value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API set a property on the <code>Object</code> passed in.</p>",
                  "type": "module",
                  "displayName": "`napi_set_property`"
                },
                {
                  "textRaw": "`napi_get_property`",
                  "name": "`napi_get_property`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the property.</li>\n<li><code>[in] key</code>: The name of the property to retrieve.</li>\n<li><code>[out] result</code>: The value of the property.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API gets the requested property from the <code>Object</code> passed in.</p>",
                  "type": "module",
                  "displayName": "`napi_get_property`"
                },
                {
                  "textRaw": "`napi_has_property`",
                  "name": "`napi_has_property`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_has_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] key</code>: The name of the property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in has the named property.</p>",
                  "type": "module",
                  "displayName": "`napi_has_property`"
                },
                {
                  "textRaw": "`napi_delete_property`",
                  "name": "`napi_delete_property`",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_delete_property(napi_env env,\n                                 napi_value object,\n                                 napi_value key,\n                                 bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] key</code>: The name of the property to delete.</li>\n<li><code>[out] result</code>: Whether the property deletion succeeded or not. <code>result</code> can\noptionally be ignored by passing <code>NULL</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API attempts to delete the <code>key</code> own property from <code>object</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_delete_property`"
                },
                {
                  "textRaw": "`napi_has_own_property`",
                  "name": "`napi_has_own_property`",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_has_own_property(napi_env env,\n                                  napi_value object,\n                                  napi_value key,\n                                  bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] key</code>: The name of the own property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the own property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in has the named own property. <code>key</code> must\nbe a <code>string</code> or a <code>symbol</code>, or an error will be thrown. Node-API will not\nperform any conversion between data types.</p>",
                  "type": "module",
                  "displayName": "`napi_has_own_property`"
                },
                {
                  "textRaw": "`napi_set_named_property`",
                  "name": "`napi_set_named_property`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_set_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value value);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object on which to set the property.</li>\n<li><code>[in] utf8Name</code>: The name of the property to set.</li>\n<li><code>[in] value</code>: The property value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is equivalent to calling <a href=\"#napi_set_property\"><code>napi_set_property</code></a> with a <code>napi_value</code>\ncreated from the string passed in as <code>utf8Name</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_set_named_property`"
                },
                {
                  "textRaw": "`napi_get_named_property`",
                  "name": "`napi_get_named_property`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the property.</li>\n<li><code>[in] utf8Name</code>: The name of the property to get.</li>\n<li><code>[out] result</code>: The value of the property.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is equivalent to calling <a href=\"#napi_get_property\"><code>napi_get_property</code></a> with a <code>napi_value</code>\ncreated from the string passed in as <code>utf8Name</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_get_named_property`"
                },
                {
                  "textRaw": "`napi_has_named_property`",
                  "name": "`napi_has_named_property`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_has_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] utf8Name</code>: The name of the property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is equivalent to calling <a href=\"#napi_has_property\"><code>napi_has_property</code></a> with a <code>napi_value</code>\ncreated from the string passed in as <code>utf8Name</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_has_named_property`"
                },
                {
                  "textRaw": "`napi_set_element`",
                  "name": "`napi_set_element`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_set_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value value);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to set the properties.</li>\n<li><code>[in] index</code>: The index of the property to set.</li>\n<li><code>[in] value</code>: The property value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API sets an element on the <code>Object</code> passed in.</p>",
                  "type": "module",
                  "displayName": "`napi_set_element`"
                },
                {
                  "textRaw": "`napi_get_element`",
                  "name": "`napi_get_element`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_get_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the property.</li>\n<li><code>[in] index</code>: The index of the property to get.</li>\n<li><code>[out] result</code>: The value of the property.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API gets the element at the requested index.</p>",
                  "type": "module",
                  "displayName": "`napi_get_element`"
                },
                {
                  "textRaw": "`napi_has_element`",
                  "name": "`napi_has_element`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_has_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] index</code>: The index of the property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns if the <code>Object</code> passed in has an element at the\nrequested index.</p>",
                  "type": "module",
                  "displayName": "`napi_has_element`"
                },
                {
                  "textRaw": "`napi_delete_element`",
                  "name": "`napi_delete_element`",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_delete_element(napi_env env,\n                                napi_value object,\n                                uint32_t index,\n                                bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] index</code>: The index of the property to delete.</li>\n<li><code>[out] result</code>: Whether the element deletion succeeded or not. <code>result</code> can\noptionally be ignored by passing <code>NULL</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API attempts to delete the specified <code>index</code> from <code>object</code>.</p>",
                  "type": "module",
                  "displayName": "`napi_delete_element`"
                },
                {
                  "textRaw": "`napi_define_properties`",
                  "name": "`napi_define_properties`",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "napiVersion": [
                      1
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_define_properties(napi_env env,\n                                   napi_value object,\n                                   size_t property_count,\n                                   const napi_property_descriptor* properties);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the properties.</li>\n<li><code>[in] property_count</code>: The number of elements in the <code>properties</code> array.</li>\n<li><code>[in] properties</code>: The array of property descriptors.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method allows the efficient definition of multiple properties on a given\nobject. The properties are defined using property descriptors (see\n<a href=\"#napi_property_descriptor\"><code>napi_property_descriptor</code></a>). Given an array of such property descriptors,\nthis API will set the properties on the object one at a time, as defined by\n<code>DefineOwnProperty()</code> (described in <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">Section 9.1.6</a> of the ECMA-262\nspecification).</p>",
                  "type": "module",
                  "displayName": "`napi_define_properties`"
                },
                {
                  "textRaw": "`napi_object_freeze`",
                  "name": "`napi_object_freeze`",
                  "meta": {
                    "added": [
                      "v14.14.0",
                      "v12.20.0"
                    ],
                    "napiVersion": [
                      8
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_object_freeze(napi_env env,\n                               napi_value object);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to freeze.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method freezes a given object. This prevents new properties from\nbeing added to it, existing properties from being removed, prevents\nchanging the enumerability, configurability, or writability of existing\nproperties, and prevents the values of existing properties from being changed.\nIt also prevents the object's prototype from being changed. This is described\nin <a href=\"https://tc39.es/ecma262/#sec-object.freeze\">Section 19.1.2.6</a> of the\nECMA-262 specification.</p>",
                  "type": "module",
                  "displayName": "`napi_object_freeze`"
                },
                {
                  "textRaw": "`napi_object_seal`",
                  "name": "`napi_object_seal`",
                  "meta": {
                    "added": [
                      "v14.14.0",
                      "v12.20.0"
                    ],
                    "napiVersion": [
                      8
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"language-c\">napi_status napi_object_seal(napi_env env,\n                             napi_value object);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the Node-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to seal.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method seals a given object. This prevents new properties from being\nadded to it, as well as marking all existing properties as non-configurable.\nThis is described in <a href=\"https://tc39.es/ecma262/#sec-object.seal\">Section 19.1.2.20</a>\nof the ECMA-262 specification.</p>",
                  "type": "module",
                  "displayName": "`napi_object_seal`"
                }
              ],
              "type": "module",
              "displayName": "Functions"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript properties"
        },
        {
          "textRaw": "Working with JavaScript functions",
          "name": "working_with_javascript_functions",
          "desc": "<p>Node-API provides a set of APIs that allow JavaScript code to\ncall back into native code. Node-APIs that support calling back\ninto native code take in a callback functions represented by\nthe <code>napi_callback</code> type. When the JavaScript VM calls back to\nnative code, the <code>napi_callback</code> function provided is invoked. The APIs\ndocumented in this section allow the callback function to do the\nfollowing:</p>\n<ul>\n<li>Get information about the context in which the callback was invoked.</li>\n<li>Get the arguments passed into the callback.</li>\n<li>Return a <code>napi_value</code> back from the callback.</li>\n</ul>\n<p>Additionally, Node-API provides a set of functions which allow calling\nJavaScript functions from native code. One can either call a function\nlike a regular JavaScript function call, or as a constructor\nfunction.</p>\n<p>Any non-<code>NULL</code> data which is passed to this API via the <code>data</code> field of the\n<code>napi_property_descriptor</code> items can be associated with <code>object</code> and freed\nwhenever <code>object</code> is garbage-collected by passing both <code>object</code> and the data to\n<a href=\"#napi_add_finalizer\"><code>napi_add_finalizer</code></a>.</p>",
          "modules": [
            {
              "textRaw": "`napi_call_function`",
              "name": "`napi_call_function`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_call_function(napi_env env,\n                                           napi_value recv,\n                                           napi_value func,\n                                           size_t argc,\n                                           const napi_value* argv,\n                                           napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] recv</code>: The <code>this</code> value passed to the called function.</li>\n<li><code>[in] func</code>: <code>napi_value</code> representing the JavaScript function to be invoked.</li>\n<li><code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li>\n<li><code>[in] argv</code>: Array of <code>napi_values</code> representing JavaScript values passed in\nas arguments to the function.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method allows a JavaScript function object to be called from a native\nadd-on. This is the primary mechanism of calling back <em>from</em> the add-on's\nnative code <em>into</em> JavaScript. For the special case of calling into JavaScript\nafter an async operation, see <a href=\"#napi_make_callback\"><code>napi_make_callback</code></a>.</p>\n<p>A sample use case might look as follows. Consider the following JavaScript\nsnippet:</p>\n<pre><code class=\"language-js\">function AddTwo(num) {\n  return num + 2;\n}\nglobal.AddTwo = AddTwo;\n</code></pre>\n<p>Then, the above function can be invoked from a native add-on using the\nfollowing code:</p>\n<pre><code class=\"language-c\">// Get the function named \"AddTwo\" on the global object\nnapi_value global, add_two, arg;\nnapi_status status = napi_get_global(env, &#x26;global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, \"AddTwo\", &#x26;add_two);\nif (status != napi_ok) return;\n\n// const arg = 1337\nstatus = napi_create_int32(env, 1337, &#x26;arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &#x26;arg;\nsize_t argc = 1;\n\n// AddTwo(arg);\nnapi_value return_val;\nstatus = napi_call_function(env, global, add_two, argc, argv, &#x26;return_val);\nif (status != napi_ok) return;\n\n// Convert the result back to a native type\nint32_t result;\nstatus = napi_get_value_int32(env, return_val, &#x26;result);\nif (status != napi_ok) return;\n</code></pre>",
              "type": "module",
              "displayName": "`napi_call_function`"
            },
            {
              "textRaw": "`napi_create_function`",
              "name": "`napi_create_function`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_create_function(napi_env env,\n                                 const char* utf8name,\n                                 size_t length,\n                                 napi_callback cb,\n                                 void* data,\n                                 napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] utf8Name</code>: Optional name of the function encoded as UTF8. This is\nvisible within JavaScript as the new function object's <code>name</code> property.</li>\n<li><code>[in] length</code>: The length of the <code>utf8name</code> in bytes, or <code>NAPI_AUTO_LENGTH</code> if\nit is null-terminated.</li>\n<li><code>[in] cb</code>: The native function which should be called when this function\nobject is invoked. <a href=\"#napi_callback\"><code>napi_callback</code></a> provides more details.</li>\n<li><code>[in] data</code>: User-provided data context. This will be passed back into the\nfunction when invoked later.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript function object for\nthe newly created function.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allows an add-on author to create a function object in native code.\nThis is the primary mechanism to allow calling <em>into</em> the add-on's native code\n<em>from</em> JavaScript.</p>\n<p>The newly created function is not automatically visible from script after this\ncall. Instead, a property must be explicitly set on any object that is visible\nto JavaScript, in order for the function to be accessible from script.</p>\n<p>In order to expose a function as part of the\nadd-on's module exports, set the newly created function on the exports\nobject. A sample module might look as follows:</p>\n<pre><code class=\"language-c\">napi_value SayHello(napi_env env, napi_callback_info info) {\n  printf(\"Hello\\n\");\n  return NULL;\n}\n\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n\n  napi_value fn;\n  status = napi_create_function(env, NULL, 0, SayHello, NULL, &#x26;fn);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, \"sayHello\", fn);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\n</code></pre>\n<p>Given the above code, the add-on can be used from JavaScript as follows:</p>\n<pre><code class=\"language-js\">const myaddon = require('./addon');\nmyaddon.sayHello();\n</code></pre>\n<p>The string passed to <code>require()</code> is the name of the target in <code>binding.gyp</code>\nresponsible for creating the <code>.node</code> file.</p>\n<p>Any non-<code>NULL</code> data which is passed to this API via the <code>data</code> parameter can\nbe associated with the resulting JavaScript function (which is returned in the\n<code>result</code> parameter) and freed whenever the function is garbage-collected by\npassing both the JavaScript function and the data to <a href=\"#napi_add_finalizer\"><code>napi_add_finalizer</code></a>.</p>\n<p>JavaScript <code>Function</code>s are described in <a href=\"https://tc39.github.io/ecma262/#sec-function-objects\">Section 19.2</a> of the ECMAScript\nLanguage Specification.</p>",
              "type": "module",
              "displayName": "`napi_create_function`"
            },
            {
              "textRaw": "`napi_get_cb_info`",
              "name": "`napi_get_cb_info`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_get_cb_info(napi_env env,\n                             napi_callback_info cbinfo,\n                             size_t* argc,\n                             napi_value* argv,\n                             napi_value* thisArg,\n                             void** data)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] cbinfo</code>: The callback info passed into the callback function.</li>\n<li><code>[in-out] argc</code>: Specifies the length of the provided <code>argv</code> array and\nreceives the actual count of arguments. <code>argc</code> can\noptionally be ignored by passing <code>NULL</code>.</li>\n<li><code>[out] argv</code>: C array of <code>napi_value</code>s to which the arguments will be\ncopied. If there are more arguments than the provided count, only the\nrequested number of arguments are copied. If there are fewer arguments\nprovided than claimed, the rest of <code>argv</code> is filled with <code>napi_value</code> values\nthat represent <code>undefined</code>. <code>argv</code> can optionally be ignored by\npassing <code>NULL</code>.</li>\n<li><code>[out] thisArg</code>: Receives the JavaScript <code>this</code> argument for the call.\n<code>thisArg</code> can optionally be ignored by passing <code>NULL</code>.</li>\n<li><code>[out] data</code>: Receives the data pointer for the callback. <code>data</code> can\noptionally be ignored by passing <code>NULL</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is used within a callback function to retrieve details about the\ncall like the arguments and the <code>this</code> pointer from a given callback info.</p>",
              "type": "module",
              "displayName": "`napi_get_cb_info`"
            },
            {
              "textRaw": "`napi_get_new_target`",
              "name": "`napi_get_new_target`",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_get_new_target(napi_env env,\n                                napi_callback_info cbinfo,\n                                napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] cbinfo</code>: The callback info passed into the callback function.</li>\n<li><code>[out] result</code>: The <code>new.target</code> of the constructor call.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the <code>new.target</code> of the constructor call. If the current\ncallback is not a constructor call, the result is <code>NULL</code>.</p>",
              "type": "module",
              "displayName": "`napi_get_new_target`"
            },
            {
              "textRaw": "`napi_new_instance`",
              "name": "`napi_new_instance`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_new_instance(napi_env env,\n                              napi_value cons,\n                              size_t argc,\n                              napi_value* argv,\n                              napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] cons</code>: <code>napi_value</code> representing the JavaScript function to be invoked\nas a constructor.</li>\n<li><code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li>\n<li><code>[in] argv</code>: Array of JavaScript values as <code>napi_value</code> representing the\narguments to the constructor. If <code>argc</code> is zero this parameter may be\nomitted by passing in <code>NULL</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned,\nwhich in this case is the constructed object.</li>\n</ul>\n<p>This method is used to instantiate a new JavaScript value using a given\n<code>napi_value</code> that represents the constructor for the object. For example,\nconsider the following snippet:</p>\n<pre><code class=\"language-js\">function MyObject(param) {\n  this.param = param;\n}\n\nconst arg = 'hello';\nconst value = new MyObject(arg);\n</code></pre>\n<p>The following can be approximated in Node-API using the following snippet:</p>\n<pre><code class=\"language-c\">// Get the constructor function MyObject\nnapi_value global, constructor, arg, value;\nnapi_status status = napi_get_global(env, &#x26;global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, \"MyObject\", &#x26;constructor);\nif (status != napi_ok) return;\n\n// const arg = \"hello\"\nstatus = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &#x26;arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &#x26;arg;\nsize_t argc = 1;\n\n// const value = new MyObject(arg)\nstatus = napi_new_instance(env, constructor, argc, argv, &#x26;value);\n</code></pre>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>",
              "type": "module",
              "displayName": "`napi_new_instance`"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript functions"
        },
        {
          "textRaw": "Object wrap",
          "name": "object_wrap",
          "desc": "<p>Node-API offers a way to \"wrap\" C++ classes and instances so that the class\nconstructor and methods can be called from JavaScript.</p>\n<ol>\n<li>The <a href=\"#napi_define_class\"><code>napi_define_class</code></a> API defines a JavaScript class with constructor,\nstatic properties and methods, and instance properties and methods that\ncorrespond to the C++ class.</li>\n<li>When JavaScript code invokes the constructor, the constructor callback\nuses <a href=\"#napi_wrap\"><code>napi_wrap</code></a> to wrap a new C++ instance in a JavaScript object,\nthen returns the wrapper object.</li>\n<li>When JavaScript code invokes a method or property accessor on the class,\nthe corresponding <code>napi_callback</code> C++ function is invoked. For an instance\ncallback, <a href=\"#napi_unwrap\"><code>napi_unwrap</code></a> obtains the C++ instance that is the target of\nthe call.</li>\n</ol>\n<p>For wrapped objects it may be difficult to distinguish between a function\ncalled on a class prototype and a function called on an instance of a class.\nA common pattern used to address this problem is to save a persistent\nreference to the class constructor for later <code>instanceof</code> checks.</p>\n<pre><code class=\"language-c\">napi_value MyClass_constructor = NULL;\nstatus = napi_get_reference_value(env, MyClass::es_constructor, &#x26;MyClass_constructor);\nassert(napi_ok == status);\nbool is_instance = false;\nstatus = napi_instanceof(env, es_this, MyClass_constructor, &#x26;is_instance);\nassert(napi_ok == status);\nif (is_instance) {\n  // napi_unwrap() ...\n} else {\n  // otherwise...\n}\n</code></pre>\n<p>The reference must be freed once it is no longer needed.</p>\n<p>There are occasions where <code>napi_instanceof()</code> is insufficient for ensuring that\na JavaScript object is a wrapper for a certain native type. This is the case\nespecially when wrapped JavaScript objects are passed back into the addon via\nstatic methods rather than as the <code>this</code> value of prototype methods. In such\ncases there is a chance that they may be unwrapped incorrectly.</p>\n<pre><code class=\"language-js\">const myAddon = require('./build/Release/my_addon.node');\n\n// `openDatabase()` returns a JavaScript object that wraps a native database\n// handle.\nconst dbHandle = myAddon.openDatabase();\n\n// `query()` returns a JavaScript object that wraps a native query handle.\nconst queryHandle = myAddon.query(dbHandle, 'Gimme ALL the things!');\n\n// There is an accidental error in the line below. The first parameter to\n// `myAddon.queryHasRecords()` should be the database handle (`dbHandle`), not\n// the query handle (`query`), so the correct condition for the while-loop\n// should be\n//\n// myAddon.queryHasRecords(dbHandle, queryHandle)\n//\nwhile (myAddon.queryHasRecords(queryHandle, dbHandle)) {\n  // retrieve records\n}\n</code></pre>\n<p>In the above example <code>myAddon.queryHasRecords()</code> is a method that accepts two\narguments. The first is a database handle and the second is a query handle.\nInternally, it unwraps the first argument and casts the resulting pointer to a\nnative database handle. It then unwraps the second argument and casts the\nresulting pointer to a query handle. If the arguments are passed in the wrong\norder, the casts will work, however, there is a good chance that the underlying\ndatabase operation will fail, or will even cause an invalid memory access.</p>\n<p>To ensure that the pointer retrieved from the first argument is indeed a pointer\nto a database handle and, similarly, that the pointer retrieved from the second\nargument is indeed a pointer to a query handle, the implementation of\n<code>queryHasRecords()</code> has to perform a type validation. Retaining the JavaScript\nclass constructor from which the database handle was instantiated and the\nconstructor from which the query handle was instantiated in <code>napi_ref</code>s can\nhelp, because <code>napi_instanceof()</code> can then be used to ensure that the instances\npassed into <code>queryHashRecords()</code> are indeed of the correct type.</p>\n<p>Unfortunately, <code>napi_instanceof()</code> does not protect against prototype\nmanipulation. For example, the prototype of the database handle instance can be\nset to the prototype of the constructor for query handle instances. In this\ncase, the database handle instance can appear as a query handle instance, and it\nwill pass the <code>napi_instanceof()</code> test for a query handle instance, while still\ncontaining a pointer to a database handle.</p>\n<p>To this end, Node-API provides type-tagging capabilities.</p>\n<p>A type tag is a 128-bit integer unique to the addon. Node-API provides the\n<code>napi_type_tag</code> structure for storing a type tag. When such a value is passed\nalong with a JavaScript object stored in a <code>napi_value</code> to\n<code>napi_type_tag_object()</code>, the JavaScript object will be \"marked\" with the\ntype tag. The \"mark\" is invisible on the JavaScript side. When a JavaScript\nobject arrives into a native binding, <code>napi_check_object_type_tag()</code> can be used\nalong with the original type tag to determine whether the JavaScript object was\npreviously \"marked\" with the type tag. This creates a type-checking capability\nof a higher fidelity than <code>napi_instanceof()</code> can provide, because such type-\ntagging survives prototype manipulation and addon unloading/reloading.</p>\n<p>Continuing the above example, the following skeleton addon implementation\nillustrates the use of <code>napi_type_tag_object()</code> and\n<code>napi_check_object_type_tag()</code>.</p>\n<pre><code class=\"language-c\">// This value is the type tag for a database handle. The command\n//\n//   uuidgen | sed -r -e 's/-//g' -e 's/(.{16})(.*)/0x\\1, 0x\\2/'\n//\n// can be used to obtain the two values with which to initialize the structure.\nstatic const napi_type_tag DatabaseHandleTypeTag = {\n  0x1edf75a38336451d, 0xa5ed9ce2e4c00c38\n};\n\n// This value is the type tag for a query handle.\nstatic const napi_type_tag QueryHandleTypeTag = {\n  0x9c73317f9fad44a3, 0x93c3920bf3b0ad6a\n};\n\nstatic napi_value\nopenDatabase(napi_env env, napi_callback_info info) {\n  napi_status status;\n  napi_value result;\n\n  // Perform the underlying action which results in a database handle.\n  DatabaseHandle* dbHandle = open_database();\n\n  // Create a new, empty JS object.\n  status = napi_create_object(env, &#x26;result);\n  if (status != napi_ok) return NULL;\n\n  // Tag the object to indicate that it holds a pointer to a `DatabaseHandle`.\n  status = napi_type_tag_object(env, result, &#x26;DatabaseHandleTypeTag);\n  if (status != napi_ok) return NULL;\n\n  // Store the pointer to the `DatabaseHandle` structure inside the JS object.\n  status = napi_wrap(env, result, dbHandle, NULL, NULL, NULL);\n  if (status != napi_ok) return NULL;\n\n  return result;\n}\n\n// Later when we receive a JavaScript object purporting to be a database handle\n// we can use `napi_check_object_type_tag()` to ensure that it is indeed such a\n// handle.\n\nstatic napi_value\nquery(napi_env env, napi_callback_info info) {\n  napi_status status;\n  size_t argc = 2;\n  napi_value argv[2];\n  bool is_db_handle;\n\n  status = napi_get_cb_info(env, info, &#x26;argc, argv, NULL, NULL);\n  if (status != napi_ok) return NULL;\n\n  // Check that the object passed as the first parameter has the previously\n  // applied tag.\n  status = napi_check_object_type_tag(env,\n                                      argv[0],\n                                      &#x26;DatabaseHandleTypeTag,\n                                      &#x26;is_db_handle);\n  if (status != napi_ok) return NULL;\n\n  // Throw a `TypeError` if it doesn't.\n  if (!is_db_handle) {\n    // Throw a TypeError.\n    return NULL;\n  }\n}\n</code></pre>",
          "modules": [
            {
              "textRaw": "`napi_define_class`",
              "name": "`napi_define_class`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_define_class(napi_env env,\n                              const char* utf8name,\n                              size_t length,\n                              napi_callback constructor,\n                              void* data,\n                              size_t property_count,\n                              const napi_property_descriptor* properties,\n                              napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] utf8name</code>: Name of the JavaScript constructor function; When wrapping a\nC++ class, we recommend for clarity that this name be the same as that of\nthe C++ class.</li>\n<li><code>[in] length</code>: The length of the <code>utf8name</code> in bytes, or <code>NAPI_AUTO_LENGTH</code>\nif it is null-terminated.</li>\n<li><code>[in] constructor</code>: Callback function that handles constructing instances\nof the class. When wrapping a C++ class, this method must be a static member\nwith the <a href=\"#napi_callback\"><code>napi_callback</code></a> signature. A C++ class constructor cannot be\nused. <a href=\"#napi_callback\"><code>napi_callback</code></a> provides more details.</li>\n<li><code>[in] data</code>: Optional data to be passed to the constructor callback as\nthe <code>data</code> property of the callback info.</li>\n<li><code>[in] property_count</code>: Number of items in the <code>properties</code> array argument.</li>\n<li><code>[in] properties</code>: Array of property descriptors describing static and\ninstance data properties, accessors, and methods on the class\nSee <code>napi_property_descriptor</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing the constructor function for\nthe class.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Defines a JavaScript class, including:</p>\n<ul>\n<li>A JavaScript constructor function that has the class name. When wrapping a\ncorresponding C++ class, the callback passed via <code>constructor</code> can be used to\ninstantiate a new C++ class instance, which can then be placed inside the\nJavaScript object instance being constructed using <a href=\"#napi_wrap\"><code>napi_wrap</code></a>.</li>\n<li>Properties on the constructor function whose implementation can call\ncorresponding <em>static</em> data properties, accessors, and methods of the C++\nclass (defined by property descriptors with the <code>napi_static</code> attribute).</li>\n<li>Properties on the constructor function's <code>prototype</code> object. When wrapping a\nC++ class, <em>non-static</em> data properties, accessors, and methods of the C++\nclass can be called from the static functions given in the property\ndescriptors without the <code>napi_static</code> attribute after retrieving the C++ class\ninstance placed inside the JavaScript object instance by using\n<a href=\"#napi_unwrap\"><code>napi_unwrap</code></a>.</li>\n</ul>\n<p>When wrapping a C++ class, the C++ constructor callback passed via <code>constructor</code>\nshould be a static method on the class that calls the actual class constructor,\nthen wraps the new C++ instance in a JavaScript object, and returns the wrapper\nobject. See <a href=\"#napi_wrap\"><code>napi_wrap</code></a> for details.</p>\n<p>The JavaScript constructor function returned from <a href=\"#napi_define_class\"><code>napi_define_class</code></a> is\noften saved and used later to construct new instances of the class from native\ncode, and/or to check whether provided values are instances of the class. In\nthat case, to prevent the function value from being garbage-collected, a\nstrong persistent reference to it can be created using\n<a href=\"#napi_create_reference\"><code>napi_create_reference</code></a>, ensuring that the reference count is kept >= 1.</p>\n<p>Any non-<code>NULL</code> data which is passed to this API via the <code>data</code> parameter or via\nthe <code>data</code> field of the <code>napi_property_descriptor</code> array items can be associated\nwith the resulting JavaScript constructor (which is returned in the <code>result</code>\nparameter) and freed whenever the class is garbage-collected by passing both\nthe JavaScript function and the data to <a href=\"#napi_add_finalizer\"><code>napi_add_finalizer</code></a>.</p>",
              "type": "module",
              "displayName": "`napi_define_class`"
            },
            {
              "textRaw": "`napi_wrap`",
              "name": "`napi_wrap`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_wrap(napi_env env,\n                      napi_value js_object,\n                      void* native_object,\n                      napi_finalize finalize_cb,\n                      void* finalize_hint,\n                      napi_ref* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The JavaScript object that will be the wrapper for the\nnative object.</li>\n<li><code>[in] native_object</code>: The native instance that will be wrapped in the\nJavaScript object.</li>\n<li><code>[in] finalize_cb</code>: Optional native callback that can be used to free the\nnative instance when the JavaScript object has been garbage-collected.\n<a href=\"#napi_finalize\"><code>napi_finalize</code></a> provides more details.</li>\n<li><code>[in] finalize_hint</code>: Optional contextual hint that is passed to the\nfinalize callback.</li>\n<li><code>[out] result</code>: Optional reference to the wrapped object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Wraps a native instance in a JavaScript object. The native instance can be\nretrieved later using <code>napi_unwrap()</code>.</p>\n<p>When JavaScript code invokes a constructor for a class that was defined using\n<code>napi_define_class()</code>, the <code>napi_callback</code> for the constructor is invoked.\nAfter constructing an instance of the native class, the callback must then call\n<code>napi_wrap()</code> to wrap the newly constructed instance in the already-created\nJavaScript object that is the <code>this</code> argument to the constructor callback.\n(That <code>this</code> object was created from the constructor function's <code>prototype</code>,\nso it already has definitions of all the instance properties and methods.)</p>\n<p>Typically when wrapping a class instance, a finalize callback should be\nprovided that simply deletes the native instance that is received as the <code>data</code>\nargument to the finalize callback.</p>\n<p>The optional returned reference is initially a weak reference, meaning it\nhas a reference count of 0. Typically this reference count would be incremented\ntemporarily during async operations that require the instance to remain valid.</p>\n<p><em>Caution</em>: The optional returned reference (if obtained) should be deleted via\n<a href=\"#napi_delete_reference\"><code>napi_delete_reference</code></a> ONLY in response to the finalize callback\ninvocation. If it is deleted before then, then the finalize callback may never\nbe invoked. Therefore, when obtaining a reference a finalize callback is also\nrequired in order to enable correct disposal of the reference.</p>\n<p>Finalizer callbacks may be deferred, leaving a window where the object has\nbeen garbage collected (and the weak reference is invalid) but the finalizer\nhasn't been called yet. When using <code>napi_get_reference_value()</code> on weak\nreferences returned by <code>napi_wrap()</code>, you should still handle an empty result.</p>\n<p>Calling <code>napi_wrap()</code> a second time on an object will return an error. To\nassociate another native instance with the object, use <code>napi_remove_wrap()</code>\nfirst.</p>",
              "type": "module",
              "displayName": "`napi_wrap`"
            },
            {
              "textRaw": "`napi_unwrap`",
              "name": "`napi_unwrap`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_unwrap(napi_env env,\n                        napi_value js_object,\n                        void** result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The object associated with the native instance.</li>\n<li><code>[out] result</code>: Pointer to the wrapped native instance.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Retrieves a native instance that was previously wrapped in a JavaScript\nobject using <code>napi_wrap()</code>.</p>\n<p>When JavaScript code invokes a method or property accessor on the class, the\ncorresponding <code>napi_callback</code> is invoked. If the callback is for an instance\nmethod or accessor, then the <code>this</code> argument to the callback is the wrapper\nobject; the wrapped C++ instance that is the target of the call can be obtained\nthen by calling <code>napi_unwrap()</code> on the wrapper object.</p>",
              "type": "module",
              "displayName": "`napi_unwrap`"
            },
            {
              "textRaw": "`napi_remove_wrap`",
              "name": "`napi_remove_wrap`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_remove_wrap(napi_env env,\n                             napi_value js_object,\n                             void** result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The object associated with the native instance.</li>\n<li><code>[out] result</code>: Pointer to the wrapped native instance.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Retrieves a native instance that was previously wrapped in the JavaScript\nobject <code>js_object</code> using <code>napi_wrap()</code> and removes the wrapping. If a finalize\ncallback was associated with the wrapping, it will no longer be called when the\nJavaScript object becomes garbage-collected.</p>",
              "type": "module",
              "displayName": "`napi_remove_wrap`"
            },
            {
              "textRaw": "`napi_type_tag_object`",
              "name": "`napi_type_tag_object`",
              "meta": {
                "added": [
                  "v14.8.0",
                  "v12.19.0"
                ],
                "napiVersion": [
                  8
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_type_tag_object(napi_env env,\n                                 napi_value js_object,\n                                 const napi_type_tag* type_tag);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The JavaScript object to be marked.</li>\n<li><code>[in] type_tag</code>: The tag with which the object is to be marked.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Associates the value of the <code>type_tag</code> pointer with the JavaScript object.\n<code>napi_check_object_type_tag()</code> can then be used to compare the tag that was\nattached to the object with one owned by the addon to ensure that the object\nhas the right type.</p>\n<p>If the object already has an associated type tag, this API will return\n<code>napi_invalid_arg</code>.</p>",
              "type": "module",
              "displayName": "`napi_type_tag_object`"
            },
            {
              "textRaw": "`napi_check_object_type_tag`",
              "name": "`napi_check_object_type_tag`",
              "meta": {
                "added": [
                  "v14.8.0",
                  "v12.19.0"
                ],
                "napiVersion": [
                  8
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_check_object_type_tag(napi_env env,\n                                       napi_value js_object,\n                                       const napi_type_tag* type_tag,\n                                       bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The JavaScript object whose type tag to examine.</li>\n<li><code>[in] type_tag</code>: The tag with which to compare any tag found on the object.</li>\n<li><code>[out] result</code>: Whether the type tag given matched the type tag on the\nobject. <code>false</code> is also returned if no type tag was found on the object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Compares the pointer given as <code>type_tag</code> with any that can be found on\n<code>js_object</code>. If no tag is found on <code>js_object</code> or, if a tag is found but it does\nnot match <code>type_tag</code>, then <code>result</code> is set to <code>false</code>. If a tag is found and it\nmatches <code>type_tag</code>, then <code>result</code> is set to <code>true</code>.</p>",
              "type": "module",
              "displayName": "`napi_check_object_type_tag`"
            },
            {
              "textRaw": "`napi_add_finalizer`",
              "name": "`napi_add_finalizer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  5
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_add_finalizer(napi_env env,\n                               napi_value js_object,\n                               void* finalize_data,\n                               napi_finalize finalize_cb,\n                               void* finalize_hint,\n                               napi_ref* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The JavaScript object to which the native data will be\nattached.</li>\n<li><code>[in] finalize_data</code>: Optional data to be passed to <code>finalize_cb</code>.</li>\n<li><code>[in] finalize_cb</code>: Native callback that will be used to free the\nnative data when the JavaScript object has been garbage-collected.\n<a href=\"#napi_finalize\"><code>napi_finalize</code></a> provides more details.</li>\n<li><code>[in] finalize_hint</code>: Optional contextual hint that is passed to the\nfinalize callback.</li>\n<li><code>[out] result</code>: Optional reference to the JavaScript object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Adds a <code>napi_finalize</code> callback which will be called when the JavaScript object\nin <code>js_object</code> has been garbage-collected.</p>\n<p>This API can be called multiple times on a single JavaScript object.</p>\n<p><em>Caution</em>: The optional returned reference (if obtained) should be deleted via\n<a href=\"#napi_delete_reference\"><code>napi_delete_reference</code></a> ONLY in response to the finalize callback\ninvocation. If it is deleted before then, then the finalize callback may never\nbe invoked. Therefore, when obtaining a reference a finalize callback is also\nrequired in order to enable correct disposal of the reference.</p>",
              "type": "module",
              "displayName": "`napi_add_finalizer`"
            }
          ],
          "type": "misc",
          "displayName": "Object wrap"
        },
        {
          "textRaw": "Simple asynchronous operations",
          "name": "simple_asynchronous_operations",
          "desc": "<p>Addon modules often need to leverage async helpers from libuv as part of their\nimplementation. This allows them to schedule work to be executed asynchronously\nso that their methods can return in advance of the work being completed. This\nallows them to avoid blocking overall execution of the Node.js application.</p>\n<p>Node-API provides an ABI-stable interface for these\nsupporting functions which covers the most common asynchronous use cases.</p>\n<p>Node-API defines the <code>napi_async_work</code> structure which is used to manage\nasynchronous workers. Instances are created/deleted with\n<a href=\"#napi_create_async_work\"><code>napi_create_async_work</code></a> and <a href=\"#napi_delete_async_work\"><code>napi_delete_async_work</code></a>.</p>\n<p>The <code>execute</code> and <code>complete</code> callbacks are functions that will be\ninvoked when the executor is ready to execute and when it completes its\ntask respectively.</p>\n<p>The <code>execute</code> function should avoid making any Node-API calls\nthat could result in the execution of JavaScript or interaction with\nJavaScript objects. Most often, any code that needs to make Node-API\ncalls should be made in <code>complete</code> callback instead.\nAvoid using the <code>napi_env</code> parameter in the execute callback as\nit will likely execute JavaScript.</p>\n<p>These functions implement the following interfaces:</p>\n<pre><code class=\"language-c\">typedef void (*napi_async_execute_callback)(napi_env env,\n                                            void* data);\ntypedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\n</code></pre>\n<p>When these methods are invoked, the <code>data</code> parameter passed will be the\naddon-provided <code>void*</code> data that was passed into the\n<code>napi_create_async_work</code> call.</p>\n<p>Once created the async worker can be queued\nfor execution using the <a href=\"#napi_queue_async_work\"><code>napi_queue_async_work</code></a> function:</p>\n<pre><code class=\"language-c\">napi_status napi_queue_async_work(napi_env env,\n                                  napi_async_work work);\n</code></pre>\n<p><a href=\"#napi_cancel_async_work\"><code>napi_cancel_async_work</code></a> can be used if the work needs\nto be cancelled before the work has started execution.</p>\n<p>After calling <a href=\"#napi_cancel_async_work\"><code>napi_cancel_async_work</code></a>, the <code>complete</code> callback\nwill be invoked with a status value of <code>napi_cancelled</code>.\nThe work should not be deleted before the <code>complete</code>\ncallback invocation, even when it was cancelled.</p>",
          "modules": [
            {
              "textRaw": "`napi_create_async_work`",
              "name": "`napi_create_async_work`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": [
                  {
                    "version": "v8.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/14697",
                    "description": "Added `async_resource` and `async_resource_name` parameters."
                  }
                ]
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_create_async_work(napi_env env,\n                                   napi_value async_resource,\n                                   napi_value async_resource_name,\n                                   napi_async_execute_callback execute,\n                                   napi_async_complete_callback complete,\n                                   void* data,\n                                   napi_async_work* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_resource</code>: An optional object associated with the async work\nthat will be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#initasyncid-type-triggerasyncid-resource\"><code>init</code> hooks</a>.</li>\n<li><code>[in] async_resource_name</code>: Identifier for the kind of resource that is being\nprovided for diagnostic information exposed by the <code>async_hooks</code> API.</li>\n<li><code>[in] execute</code>: The native function which should be called to execute the\nlogic asynchronously. The given function is called from a worker pool thread\nand can execute in parallel with the main event loop thread.</li>\n<li><code>[in] complete</code>: The native function which will be called when the\nasynchronous logic is completed or is cancelled. The given function is called\nfrom the main event loop thread. <a href=\"#napi_async_complete_callback\"><code>napi_async_complete_callback</code></a> provides\nmore details.</li>\n<li><code>[in] data</code>: User-provided data context. This will be passed back into the\nexecute and complete functions.</li>\n<li><code>[out] result</code>: <code>napi_async_work*</code> which is the handle to the newly created\nasync work.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a work object that is used to execute logic asynchronously.\nIt should be freed using <a href=\"#napi_delete_async_work\"><code>napi_delete_async_work</code></a> once the work is no longer\nrequired.</p>\n<p><code>async_resource_name</code> should be a null-terminated, UTF-8-encoded string.</p>\n<p>The <code>async_resource_name</code> identifier is provided by the user and should be\nrepresentative of the type of async work being performed. It is also recommended\nto apply namespacing to the identifier, e.g. by including the module name. See\nthe <a href=\"async_hooks.html#type\"><code>async_hooks</code> documentation</a> for more information.</p>",
              "type": "module",
              "displayName": "`napi_create_async_work`"
            },
            {
              "textRaw": "`napi_delete_async_work`",
              "name": "`napi_delete_async_work`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_delete_async_work(napi_env env,\n                                   napi_async_work work);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API frees a previously allocated work object.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
              "type": "module",
              "displayName": "`napi_delete_async_work`"
            },
            {
              "textRaw": "`napi_queue_async_work`",
              "name": "`napi_queue_async_work`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_queue_async_work(napi_env env,\n                                  napi_async_work work);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API requests that the previously allocated work be scheduled\nfor execution. Once it returns successfully, this API must not be called again\nwith the same <code>napi_async_work</code> item or the result will be undefined.</p>",
              "type": "module",
              "displayName": "`napi_queue_async_work`"
            },
            {
              "textRaw": "`napi_cancel_async_work`",
              "name": "`napi_cancel_async_work`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_cancel_async_work(napi_env env,\n                                   napi_async_work work);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API cancels queued work if it has not yet\nbeen started. If it has already started executing, it cannot be\ncancelled and <code>napi_generic_failure</code> will be returned. If successful,\nthe <code>complete</code> callback will be invoked with a status value of\n<code>napi_cancelled</code>. The work should not be deleted before the <code>complete</code>\ncallback invocation, even if it has been successfully cancelled.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
              "type": "module",
              "displayName": "`napi_cancel_async_work`"
            }
          ],
          "type": "misc",
          "displayName": "Simple asynchronous operations"
        },
        {
          "textRaw": "Custom asynchronous operations",
          "name": "custom_asynchronous_operations",
          "desc": "<p>The simple asynchronous work APIs above may not be appropriate for every\nscenario. When using any other asynchronous mechanism, the following APIs\nare necessary to ensure an asynchronous operation is properly tracked by\nthe runtime.</p>",
          "modules": [
            {
              "textRaw": "`napi_async_init`",
              "name": "`napi_async_init`",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_async_init(napi_env env,\n                            napi_value async_resource,\n                            napi_value async_resource_name,\n                            napi_async_context* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_resource</code>: Object associated with the async work\nthat will be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#initasyncid-type-triggerasyncid-resource\"><code>init</code> hooks</a> and can be\naccessed by <a href=\"async_hooks.html#async_hooksexecutionasyncresource\"><code>async_hooks.executionAsyncResource()</code></a>.</li>\n<li><code>[in] async_resource_name</code>: Identifier for the kind of resource that is being\nprovided for diagnostic information exposed by the <code>async_hooks</code> API.</li>\n<li><code>[out] result</code>: The initialized async context.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>The <code>async_resource</code> object needs to be kept alive until\n<a href=\"#napi_async_destroy\"><code>napi_async_destroy</code></a> to keep <code>async_hooks</code> related API acts correctly. In\norder to retain ABI compatibility with previous versions, <code>napi_async_context</code>s\nare not maintaining the strong reference to the <code>async_resource</code> objects to\navoid introducing causing memory leaks. However, if the <code>async_resource</code> is\ngarbage collected by JavaScript engine before the <code>napi_async_context</code> was\ndestroyed by <code>napi_async_destroy</code>, calling <code>napi_async_context</code> related APIs\nlike <a href=\"#napi_open_callback_scope\"><code>napi_open_callback_scope</code></a> and <a href=\"#napi_make_callback\"><code>napi_make_callback</code></a> can cause\nproblems like loss of async context when using the <code>AsyncLocalStorage</code> API.</p>\n<p>In order to retain ABI compatibility with previous versions, passing <code>NULL</code>\nfor <code>async_resource</code> does not result in an error. However, this is not\nrecommended as this will result poor results with  <code>async_hooks</code>\n<a href=\"async_hooks.html#initasyncid-type-triggerasyncid-resource\"><code>init</code> hooks</a> and <code>async_hooks.executionAsyncResource()</code> as the resource is\nnow required by the underlying <code>async_hooks</code> implementation in order to provide\nthe linkage between async callbacks.</p>",
              "type": "module",
              "displayName": "`napi_async_init`"
            },
            {
              "textRaw": "`napi_async_destroy`",
              "name": "`napi_async_destroy`",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_async_destroy(napi_env env,\n                               napi_async_context async_context);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_context</code>: The async context to be destroyed.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
              "type": "module",
              "displayName": "`napi_async_destroy`"
            },
            {
              "textRaw": "`napi_make_callback`",
              "name": "`napi_make_callback`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": [
                  {
                    "version": "v8.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15189",
                    "description": "Added `async_context` parameter."
                  }
                ]
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_make_callback(napi_env env,\n                                           napi_async_context async_context,\n                                           napi_value recv,\n                                           napi_value func,\n                                           size_t argc,\n                                           const napi_value* argv,\n                                           napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_context</code>: Context for the async operation that is\ninvoking the callback. This should normally be a value previously\nobtained from <a href=\"#napi_async_init\"><code>napi_async_init</code></a>.\nIn order to retain ABI compatibility with previous versions, passing <code>NULL</code>\nfor <code>async_context</code> does not result in an error. However, this results\nin incorrect operation of async hooks. Potential issues include loss of\nasync context when using the <code>AsyncLocalStorage</code> API.</li>\n<li><code>[in] recv</code>: The <code>this</code> value passed to the called function.</li>\n<li><code>[in] func</code>: <code>napi_value</code> representing the JavaScript function to be invoked.</li>\n<li><code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li>\n<li><code>[in] argv</code>: Array of JavaScript values as <code>napi_value</code> representing the\narguments to the function. If <code>argc</code> is zero this parameter may be\nomitted by passing in <code>NULL</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method allows a JavaScript function object to be called from a native\nadd-on. This API is similar to <code>napi_call_function</code>. However, it is used to call\n<em>from</em> native code back <em>into</em> JavaScript <em>after</em> returning from an async\noperation (when there is no other script on the stack). It is a fairly simple\nwrapper around <code>node::MakeCallback</code>.</p>\n<p>Note it is <em>not</em> necessary to use <code>napi_make_callback</code> from within a\n<code>napi_async_complete_callback</code>; in that situation the callback's async\ncontext has already been set up, so a direct call to <code>napi_call_function</code>\nis sufficient and appropriate. Use of the <code>napi_make_callback</code> function\nmay be required when implementing custom async behavior that does not use\n<code>napi_create_async_work</code>.</p>\n<p>Any <code>process.nextTick</code>s or Promises scheduled on the microtask queue by\nJavaScript during the callback are ran before returning back to C/C++.</p>",
              "type": "module",
              "displayName": "`napi_make_callback`"
            },
            {
              "textRaw": "`napi_open_callback_scope`",
              "name": "`napi_open_callback_scope`",
              "meta": {
                "added": [
                  "v9.6.0"
                ],
                "napiVersion": [
                  3
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_open_callback_scope(napi_env env,\n                                                 napi_value resource_object,\n                                                 napi_async_context context,\n                                                 napi_callback_scope* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] resource_object</code>: An object associated with the async work\nthat will be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#initasyncid-type-triggerasyncid-resource\"><code>init</code> hooks</a>. This\nparameter has been deprecated and is ignored at runtime. Use the\n<code>async_resource</code> parameter in <a href=\"#napi_async_init\"><code>napi_async_init</code></a> instead.</li>\n<li><code>[in] context</code>: Context for the async operation that is invoking the callback.\nThis should be a value previously obtained from <a href=\"#napi_async_init\"><code>napi_async_init</code></a>.</li>\n<li><code>[out] result</code>: The newly created scope.</li>\n</ul>\n<p>There are cases (for example, resolving promises) where it is\nnecessary to have the equivalent of the scope associated with a callback\nin place when making certain Node-API calls. If there is no other script on\nthe stack the <a href=\"#napi_open_callback_scope\"><code>napi_open_callback_scope</code></a> and\n<a href=\"#napi_close_callback_scope\"><code>napi_close_callback_scope</code></a> functions can be used to open/close\nthe required scope.</p>",
              "type": "module",
              "displayName": "`napi_open_callback_scope`"
            },
            {
              "textRaw": "`napi_close_callback_scope`",
              "name": "`napi_close_callback_scope`",
              "meta": {
                "added": [
                  "v9.6.0"
                ],
                "napiVersion": [
                  3
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_close_callback_scope(napi_env env,\n                                                  napi_callback_scope scope)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: The scope to be closed.</li>\n</ul>\n<p>This API can be called even if there is a pending JavaScript exception.</p>",
              "type": "module",
              "displayName": "`napi_close_callback_scope`"
            }
          ],
          "type": "misc",
          "displayName": "Custom asynchronous operations"
        },
        {
          "textRaw": "Version management",
          "name": "version_management",
          "modules": [
            {
              "textRaw": "`napi_get_node_version`",
              "name": "`napi_get_node_version`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">typedef struct {\n  uint32_t major;\n  uint32_t minor;\n  uint32_t patch;\n  const char* release;\n} napi_node_version;\n\nnapi_status napi_get_node_version(napi_env env,\n                                  const napi_node_version** version);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] version</code>: A pointer to version information for Node.js itself.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This function fills the <code>version</code> struct with the major, minor, and patch\nversion of Node.js that is currently running, and the <code>release</code> field with the\nvalue of <a href=\"process.html#processrelease\"><code>process.release.name</code></a>.</p>\n<p>The returned buffer is statically allocated and does not need to be freed.</p>",
              "type": "module",
              "displayName": "`napi_get_node_version`"
            },
            {
              "textRaw": "`napi_get_version`",
              "name": "`napi_get_version`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_get_version(napi_env env,\n                             uint32_t* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: The highest version of Node-API supported.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the highest Node-API version supported by the\nNode.js runtime. Node-API is planned to be additive such that\nnewer releases of Node.js may support additional API functions.\nIn order to allow an addon to use a newer function when running with\nversions of Node.js that support it, while providing\nfallback behavior when running with Node.js versions that don't\nsupport it:</p>\n<ul>\n<li>Call <code>napi_get_version()</code> to determine if the API is available.</li>\n<li>If available, dynamically load a pointer to the function using <code>uv_dlsym()</code>.</li>\n<li>Use the dynamically loaded pointer to invoke the function.</li>\n<li>If the function is not available, provide an alternate implementation\nthat does not use the function.</li>\n</ul>",
              "type": "module",
              "displayName": "`napi_get_version`"
            }
          ],
          "type": "misc",
          "displayName": "Version management"
        },
        {
          "textRaw": "Memory management",
          "name": "memory_management",
          "modules": [
            {
              "textRaw": "`napi_adjust_external_memory`",
              "name": "`napi_adjust_external_memory`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_adjust_external_memory(napi_env env,\n                                                    int64_t change_in_bytes,\n                                                    int64_t* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] change_in_bytes</code>: The change in externally allocated memory that is kept\nalive by JavaScript objects.</li>\n<li><code>[out] result</code>: The adjusted value</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This function gives V8 an indication of the amount of externally allocated\nmemory that is kept alive by JavaScript objects (i.e. a JavaScript object\nthat points to its own memory allocated by a native addon). Registering\nexternally allocated memory will trigger global garbage collections more\noften than it would otherwise.</p>",
              "type": "module",
              "displayName": "`napi_adjust_external_memory`"
            }
          ],
          "type": "misc",
          "displayName": "Memory management"
        },
        {
          "textRaw": "Promises",
          "name": "promises",
          "desc": "<p>Node-API provides facilities for creating <code>Promise</code> objects as described in\n<a href=\"https://tc39.github.io/ecma262/#sec-promise-objects\">Section 25.4</a> of the ECMA specification. It implements promises as a pair of\nobjects. When a promise is created by <code>napi_create_promise()</code>, a \"deferred\"\nobject is created and returned alongside the <code>Promise</code>. The deferred object is\nbound to the created <code>Promise</code> and is the only means to resolve or reject the\n<code>Promise</code> using <code>napi_resolve_deferred()</code> or <code>napi_reject_deferred()</code>. The\ndeferred object that is created by <code>napi_create_promise()</code> is freed by\n<code>napi_resolve_deferred()</code> or <code>napi_reject_deferred()</code>. The <code>Promise</code> object may\nbe returned to JavaScript where it can be used in the usual fashion.</p>\n<p>For example, to create a promise and pass it to an asynchronous worker:</p>\n<pre><code class=\"language-c\">napi_deferred deferred;\nnapi_value promise;\nnapi_status status;\n\n// Create the promise.\nstatus = napi_create_promise(env, &#x26;deferred, &#x26;promise);\nif (status != napi_ok) return NULL;\n\n// Pass the deferred to a function that performs an asynchronous action.\ndo_something_asynchronous(deferred);\n\n// Return the promise to JS\nreturn promise;\n</code></pre>\n<p>The above function <code>do_something_asynchronous()</code> would perform its asynchronous\naction and then it would resolve or reject the deferred, thereby concluding the\npromise and freeing the deferred:</p>\n<pre><code class=\"language-c\">napi_deferred deferred;\nnapi_value undefined;\nnapi_status status;\n\n// Create a value with which to conclude the deferred.\nstatus = napi_get_undefined(env, &#x26;undefined);\nif (status != napi_ok) return NULL;\n\n// Resolve or reject the promise associated with the deferred depending on\n// whether the asynchronous action succeeded.\nif (asynchronous_action_succeeded) {\n  status = napi_resolve_deferred(env, deferred, undefined);\n} else {\n  status = napi_reject_deferred(env, deferred, undefined);\n}\nif (status != napi_ok) return NULL;\n\n// At this point the deferred has been freed, so we should assign NULL to it.\ndeferred = NULL;\n</code></pre>",
          "modules": [
            {
              "textRaw": "`napi_create_promise`",
              "name": "`napi_create_promise`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_create_promise(napi_env env,\n                                napi_deferred* deferred,\n                                napi_value* promise);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] deferred</code>: A newly created deferred object which can later be passed to\n<code>napi_resolve_deferred()</code> or <code>napi_reject_deferred()</code> to resolve resp. reject\nthe associated promise.</li>\n<li><code>[out] promise</code>: The JavaScript promise associated with the deferred object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a deferred object and a JavaScript promise.</p>",
              "type": "module",
              "displayName": "`napi_create_promise`"
            },
            {
              "textRaw": "`napi_resolve_deferred`",
              "name": "`napi_resolve_deferred`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_resolve_deferred(napi_env env,\n                                  napi_deferred deferred,\n                                  napi_value resolution);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] deferred</code>: The deferred object whose associated promise to resolve.</li>\n<li><code>[in] resolution</code>: The value with which to resolve the promise.</li>\n</ul>\n<p>This API resolves a JavaScript promise by way of the deferred object\nwith which it is associated. Thus, it can only be used to resolve JavaScript\npromises for which the corresponding deferred object is available. This\neffectively means that the promise must have been created using\n<code>napi_create_promise()</code> and the deferred object returned from that call must\nhave been retained in order to be passed to this API.</p>\n<p>The deferred object is freed upon successful completion.</p>",
              "type": "module",
              "displayName": "`napi_resolve_deferred`"
            },
            {
              "textRaw": "`napi_reject_deferred`",
              "name": "`napi_reject_deferred`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_reject_deferred(napi_env env,\n                                 napi_deferred deferred,\n                                 napi_value rejection);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] deferred</code>: The deferred object whose associated promise to resolve.</li>\n<li><code>[in] rejection</code>: The value with which to reject the promise.</li>\n</ul>\n<p>This API rejects a JavaScript promise by way of the deferred object\nwith which it is associated. Thus, it can only be used to reject JavaScript\npromises for which the corresponding deferred object is available. This\neffectively means that the promise must have been created using\n<code>napi_create_promise()</code> and the deferred object returned from that call must\nhave been retained in order to be passed to this API.</p>\n<p>The deferred object is freed upon successful completion.</p>",
              "type": "module",
              "displayName": "`napi_reject_deferred`"
            },
            {
              "textRaw": "`napi_is_promise`",
              "name": "`napi_is_promise`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">napi_status napi_is_promise(napi_env env,\n                            napi_value value,\n                            bool* is_promise);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The value to examine</li>\n<li><code>[out] is_promise</code>: Flag indicating whether <code>promise</code> is a native promise\nobject (that is, a promise object created by the underlying engine).</li>\n</ul>",
              "type": "module",
              "displayName": "`napi_is_promise`"
            }
          ],
          "type": "misc",
          "displayName": "Promises"
        },
        {
          "textRaw": "Script execution",
          "name": "script_execution",
          "desc": "<p>Node-API provides an API for executing a string containing JavaScript using the\nunderlying JavaScript engine.</p>",
          "modules": [
            {
              "textRaw": "`napi_run_script`",
              "name": "`napi_run_script`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "napiVersion": [
                  1
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_run_script(napi_env env,\n                                        napi_value script,\n                                        napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] script</code>: A JavaScript string containing the script to execute.</li>\n<li><code>[out] result</code>: The value resulting from having executed the script.</li>\n</ul>\n<p>This function executes a string of JavaScript code and returns its result with\nthe following caveats:</p>\n<ul>\n<li>Unlike <code>eval</code>, this function does not allow the script to access the current\nlexical scope, and therefore also does not allow to access the\n<a href=\"modules.html#the-module-scope\">module scope</a>, meaning that pseudo-globals such as <code>require</code> will not be\navailable.</li>\n<li>The script can access the <a href=\"globals.html\">global scope</a>. Function and <code>var</code> declarations\nin the script will be added to the <a href=\"globals.html#global\"><code>global</code></a> object. Variable declarations\nmade using <code>let</code> and <code>const</code> will be visible globally, but will not be added\nto the <a href=\"globals.html#global\"><code>global</code></a> object.</li>\n<li>The value of <code>this</code> is <a href=\"globals.html#global\"><code>global</code></a> within the script.</li>\n</ul>",
              "type": "module",
              "displayName": "`napi_run_script`"
            }
          ],
          "type": "misc",
          "displayName": "Script execution"
        },
        {
          "textRaw": "libuv event loop",
          "name": "libuv_event_loop",
          "desc": "<p>Node-API provides a function for getting the current event loop associated with\na specific <code>napi_env</code>.</p>",
          "modules": [
            {
              "textRaw": "`napi_get_uv_event_loop`",
              "name": "`napi_get_uv_event_loop`",
              "meta": {
                "added": [
                  "v9.3.0",
                  "v8.10.0"
                ],
                "napiVersion": [
                  2
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status napi_get_uv_event_loop(napi_env env,\n                                               struct uv_loop_s** loop);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] loop</code>: The current libuv loop instance.</li>\n</ul>",
              "type": "module",
              "displayName": "`napi_get_uv_event_loop`"
            }
          ],
          "type": "misc",
          "displayName": "libuv event loop"
        },
        {
          "textRaw": "Asynchronous thread-safe function calls",
          "name": "asynchronous_thread-safe_function_calls",
          "desc": "<p>JavaScript functions can normally only be called from a native addon's main\nthread. If an addon creates additional threads, then Node-API functions that\nrequire a <code>napi_env</code>, <code>napi_value</code>, or <code>napi_ref</code> must not be called from those\nthreads.</p>\n<p>When an addon has additional threads and JavaScript functions need to be invoked\nbased on the processing completed by those threads, those threads must\ncommunicate with the addon's main thread so that the main thread can invoke the\nJavaScript function on their behalf. The thread-safe function APIs provide an\neasy way to do this.</p>\n<p>These APIs provide the type <code>napi_threadsafe_function</code> as well as APIs to\ncreate, destroy, and call objects of this type.\n<code>napi_create_threadsafe_function()</code> creates a persistent reference to a\n<code>napi_value</code> that holds a JavaScript function which can be called from multiple\nthreads. The calls happen asynchronously. This means that values with which the\nJavaScript callback is to be called will be placed in a queue, and, for each\nvalue in the queue, a call will eventually be made to the JavaScript function.</p>\n<p>Upon creation of a <code>napi_threadsafe_function</code> a <code>napi_finalize</code> callback can be\nprovided. This callback will be invoked on the main thread when the thread-safe\nfunction is about to be destroyed. It receives the context and the finalize data\ngiven during construction, and provides an opportunity for cleaning up after the\nthreads e.g. by calling <code>uv_thread_join()</code>. <strong>Aside from the main loop thread,\nno threads should be using the thread-safe function after the finalize callback\ncompletes.</strong></p>\n<p>The <code>context</code> given during the call to <code>napi_create_threadsafe_function()</code> can\nbe retrieved from any thread with a call to\n<code>napi_get_threadsafe_function_context()</code>.</p>",
          "modules": [
            {
              "textRaw": "Calling a thread-safe function",
              "name": "calling_a_thread-safe_function",
              "desc": "<p><code>napi_call_threadsafe_function()</code> can be used for initiating a call into\nJavaScript. <code>napi_call_threadsafe_function()</code> accepts a parameter which controls\nwhether the API behaves blockingly. If set to <code>napi_tsfn_nonblocking</code>, the API\nbehaves non-blockingly, returning <code>napi_queue_full</code> if the queue was full,\npreventing data from being successfully added to the queue. If set to\n<code>napi_tsfn_blocking</code>, the API blocks until space becomes available in the queue.\n<code>napi_call_threadsafe_function()</code> never blocks if the thread-safe function was\ncreated with a maximum queue size of 0.</p>\n<p><code>napi_call_threadsafe_function()</code> should not be called with <code>napi_tsfn_blocking</code>\nfrom a JavaScript thread, because, if the queue is full, it may cause the\nJavaScript thread to deadlock.</p>\n<p>The actual call into JavaScript is controlled by the callback given via the\n<code>call_js_cb</code> parameter. <code>call_js_cb</code> is invoked on the main thread once for each\nvalue that was placed into the queue by a successful call to\n<code>napi_call_threadsafe_function()</code>. If such a callback is not given, a default\ncallback will be used, and the resulting JavaScript call will have no arguments.\nThe <code>call_js_cb</code> callback receives the JavaScript function to call as a\n<code>napi_value</code> in its parameters, as well as the <code>void*</code> context pointer used when\ncreating the <code>napi_threadsafe_function</code>, and the next data pointer that was\ncreated by one of the secondary threads. The callback can then use an API such\nas <code>napi_call_function()</code> to call into JavaScript.</p>\n<p>The callback may also be invoked with <code>env</code> and <code>call_js_cb</code> both set to <code>NULL</code>\nto indicate that calls into JavaScript are no longer possible, while items\nremain in the queue that may need to be freed. This normally occurs when the\nNode.js process exits while there is a thread-safe function still active.</p>\n<p>It is not necessary to call into JavaScript via <code>napi_make_callback()</code> because\nNode-API runs <code>call_js_cb</code> in a context appropriate for callbacks.</p>",
              "type": "module",
              "displayName": "Calling a thread-safe function"
            },
            {
              "textRaw": "Reference counting of thread-safe functions",
              "name": "reference_counting_of_thread-safe_functions",
              "desc": "<p>Threads can be added to and removed from a <code>napi_threadsafe_function</code> object\nduring its existence. Thus, in addition to specifying an initial number of\nthreads upon creation, <code>napi_acquire_threadsafe_function</code> can be called to\nindicate that a new thread will start making use of the thread-safe function.\nSimilarly, <code>napi_release_threadsafe_function</code> can be called to indicate that an\nexisting thread will stop making use of the thread-safe function.</p>\n<p><code>napi_threadsafe_function</code> objects are destroyed when every thread which uses\nthe object has called <code>napi_release_threadsafe_function()</code> or has received a\nreturn status of <code>napi_closing</code> in response to a call to\n<code>napi_call_threadsafe_function</code>. The queue is emptied before the\n<code>napi_threadsafe_function</code> is destroyed. <code>napi_release_threadsafe_function()</code>\nshould be the last API call made in conjunction with a given\n<code>napi_threadsafe_function</code>, because after the call completes, there is no\nguarantee that the <code>napi_threadsafe_function</code> is still allocated. For the same\nreason, do not use a thread-safe function\nafter receiving a return value of <code>napi_closing</code> in response to a call to\n<code>napi_call_threadsafe_function</code>. Data associated with the\n<code>napi_threadsafe_function</code> can be freed in its <code>napi_finalize</code> callback which\nwas passed to <code>napi_create_threadsafe_function()</code>. The parameter\n<code>initial_thread_count</code> of <code>napi_create_threadsafe_function</code> marks the initial\nnumber of acquisitions of the thread-safe functions, instead of calling\n<code>napi_acquire_threadsafe_function</code> multiple times at creation.</p>\n<p>Once the number of threads making use of a <code>napi_threadsafe_function</code> reaches\nzero, no further threads can start making use of it by calling\n<code>napi_acquire_threadsafe_function()</code>. In fact, all subsequent API calls\nassociated with it, except <code>napi_release_threadsafe_function()</code>, will return an\nerror value of <code>napi_closing</code>.</p>\n<p>The thread-safe function can be \"aborted\" by giving a value of <code>napi_tsfn_abort</code>\nto <code>napi_release_threadsafe_function()</code>. This will cause all subsequent APIs\nassociated with the thread-safe function except\n<code>napi_release_threadsafe_function()</code> to return <code>napi_closing</code> even before its\nreference count reaches zero. In particular, <code>napi_call_threadsafe_function()</code>\nwill return <code>napi_closing</code>, thus informing the threads that it is no longer\npossible to make asynchronous calls to the thread-safe function. This can be\nused as a criterion for terminating the thread. <strong>Upon receiving a return value\nof <code>napi_closing</code> from <code>napi_call_threadsafe_function()</code> a thread must not use\nthe thread-safe function anymore because it is no longer guaranteed to\nbe allocated.</strong></p>",
              "type": "module",
              "displayName": "Reference counting of thread-safe functions"
            },
            {
              "textRaw": "Deciding whether to keep the process running",
              "name": "deciding_whether_to_keep_the_process_running",
              "desc": "<p>Similarly to libuv handles, thread-safe functions can be \"referenced\" and\n\"unreferenced\". A \"referenced\" thread-safe function will cause the event loop on\nthe thread on which it is created to remain alive until the thread-safe function\nis destroyed. In contrast, an \"unreferenced\" thread-safe function will not\nprevent the event loop from exiting. The APIs <code>napi_ref_threadsafe_function</code> and\n<code>napi_unref_threadsafe_function</code> exist for this purpose.</p>\n<p>Neither does <code>napi_unref_threadsafe_function</code> mark the thread-safe functions as\nable to be destroyed nor does <code>napi_ref_threadsafe_function</code> prevent it from\nbeing destroyed.</p>",
              "type": "module",
              "displayName": "Deciding whether to keep the process running"
            },
            {
              "textRaw": "`napi_create_threadsafe_function`",
              "name": "`napi_create_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": [
                  {
                    "version": [
                      "v12.6.0",
                      "v10.17.0"
                    ],
                    "pr-url": "https://github.com/nodejs/node/pull/27791",
                    "description": "Made `func` parameter optional with custom `call_js_cb`."
                  }
                ]
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_create_threadsafe_function(napi_env env,\n                                napi_value func,\n                                napi_value async_resource,\n                                napi_value async_resource_name,\n                                size_t max_queue_size,\n                                size_t initial_thread_count,\n                                void* thread_finalize_data,\n                                napi_finalize thread_finalize_cb,\n                                void* context,\n                                napi_threadsafe_function_call_js call_js_cb,\n                                napi_threadsafe_function* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] func</code>: An optional JavaScript function to call from another thread. It\nmust be provided if <code>NULL</code> is passed to <code>call_js_cb</code>.</li>\n<li><code>[in] async_resource</code>: An optional object associated with the async work that\nwill be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#initasyncid-type-triggerasyncid-resource\"><code>init</code> hooks</a>.</li>\n<li><code>[in] async_resource_name</code>: A JavaScript string to provide an identifier for\nthe kind of resource that is being provided for diagnostic information exposed\nby the <code>async_hooks</code> API.</li>\n<li><code>[in] max_queue_size</code>: Maximum size of the queue. <code>0</code> for no limit.</li>\n<li><code>[in] initial_thread_count</code>: The initial number of acquisitions, i.e. the\ninitial number of threads, including the main thread, which will be making use\nof this function.</li>\n<li><code>[in] thread_finalize_data</code>: Optional data to be passed to <code>thread_finalize_cb</code>.</li>\n<li><code>[in] thread_finalize_cb</code>: Optional function to call when the\n<code>napi_threadsafe_function</code> is being destroyed.</li>\n<li><code>[in] context</code>: Optional data to attach to the resulting\n<code>napi_threadsafe_function</code>.</li>\n<li><code>[in] call_js_cb</code>: Optional callback which calls the JavaScript function in\nresponse to a call on a different thread. This callback will be called on the\nmain thread. If not given, the JavaScript function will be called with no\nparameters and with <code>undefined</code> as its <code>this</code> value.\n<a href=\"#napi_threadsafe_function_call_js\"><code>napi_threadsafe_function_call_js</code></a> provides more details.</li>\n<li><code>[out] result</code>: The asynchronous thread-safe JavaScript function.</li>\n</ul>",
              "type": "module",
              "displayName": "`napi_create_threadsafe_function`"
            },
            {
              "textRaw": "`napi_get_threadsafe_function_context`",
              "name": "`napi_get_threadsafe_function_context`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_get_threadsafe_function_context(napi_threadsafe_function func,\n                                     void** result);\n</code></pre>\n<ul>\n<li><code>[in] func</code>: The thread-safe function for which to retrieve the context.</li>\n<li><code>[out] result</code>: The location where to store the context.</li>\n</ul>\n<p>This API may be called from any thread which makes use of <code>func</code>.</p>",
              "type": "module",
              "displayName": "`napi_get_threadsafe_function_context`"
            },
            {
              "textRaw": "`napi_call_threadsafe_function`",
              "name": "`napi_call_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": [
                  {
                    "version": "v14.5.0",
                    "pr-url": "https://github.com/nodejs/node/pull/33453",
                    "description": "Support for `napi_would_deadlock` has been reverted."
                  },
                  {
                    "version": "v14.1.0",
                    "pr-url": "https://github.com/nodejs/node/pull/32689",
                    "description": "Return `napi_would_deadlock` when called with `napi_tsfn_blocking` from the main thread or a worker thread and the queue is full."
                  }
                ]
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_call_threadsafe_function(napi_threadsafe_function func,\n                              void* data,\n                              napi_threadsafe_function_call_mode is_blocking);\n</code></pre>\n<ul>\n<li><code>[in] func</code>: The asynchronous thread-safe JavaScript function to invoke.</li>\n<li><code>[in] data</code>: Data to send into JavaScript via the callback <code>call_js_cb</code>\nprovided during the creation of the thread-safe JavaScript function.</li>\n<li><code>[in] is_blocking</code>: Flag whose value can be either <code>napi_tsfn_blocking</code> to\nindicate that the call should block if the queue is full or\n<code>napi_tsfn_nonblocking</code> to indicate that the call should return immediately\nwith a status of <code>napi_queue_full</code> whenever the queue is full.</li>\n</ul>\n<p>This API should not be called with <code>napi_tsfn_blocking</code> from a JavaScript\nthread, because, if the queue is full, it may cause the JavaScript thread to\ndeadlock.</p>\n<p>This API will return <code>napi_closing</code> if <code>napi_release_threadsafe_function()</code> was\ncalled with <code>abort</code> set to <code>napi_tsfn_abort</code> from any thread. The value is only\nadded to the queue if the API returns <code>napi_ok</code>.</p>\n<p>This API may be called from any thread which makes use of <code>func</code>.</p>",
              "type": "module",
              "displayName": "`napi_call_threadsafe_function`"
            },
            {
              "textRaw": "`napi_acquire_threadsafe_function`",
              "name": "`napi_acquire_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_acquire_threadsafe_function(napi_threadsafe_function func);\n</code></pre>\n<ul>\n<li><code>[in] func</code>: The asynchronous thread-safe JavaScript function to start making\nuse of.</li>\n</ul>\n<p>A thread should call this API before passing <code>func</code> to any other thread-safe\nfunction APIs to indicate that it will be making use of <code>func</code>. This prevents\n<code>func</code> from being destroyed when all other threads have stopped making use of\nit.</p>\n<p>This API may be called from any thread which will start making use of <code>func</code>.</p>",
              "type": "module",
              "displayName": "`napi_acquire_threadsafe_function`"
            },
            {
              "textRaw": "`napi_release_threadsafe_function`",
              "name": "`napi_release_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_release_threadsafe_function(napi_threadsafe_function func,\n                                 napi_threadsafe_function_release_mode mode);\n</code></pre>\n<ul>\n<li><code>[in] func</code>: The asynchronous thread-safe JavaScript function whose reference\ncount to decrement.</li>\n<li><code>[in] mode</code>: Flag whose value can be either <code>napi_tsfn_release</code> to indicate\nthat the current thread will make no further calls to the thread-safe\nfunction, or <code>napi_tsfn_abort</code> to indicate that in addition to the current\nthread, no other thread should make any further calls to the thread-safe\nfunction. If set to <code>napi_tsfn_abort</code>, further calls to\n<code>napi_call_threadsafe_function()</code> will return <code>napi_closing</code>, and no further\nvalues will be placed in the queue.</li>\n</ul>\n<p>A thread should call this API when it stops making use of <code>func</code>. Passing <code>func</code>\nto any thread-safe APIs after having called this API has undefined results, as\n<code>func</code> may have been destroyed.</p>\n<p>This API may be called from any thread which will stop making use of <code>func</code>.</p>",
              "type": "module",
              "displayName": "`napi_release_threadsafe_function`"
            },
            {
              "textRaw": "`napi_ref_threadsafe_function`",
              "name": "`napi_ref_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_ref_threadsafe_function(napi_env env, napi_threadsafe_function func);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] func</code>: The thread-safe function to reference.</li>\n</ul>\n<p>This API is used to indicate that the event loop running on the main thread\nshould not exit until <code>func</code> has been destroyed. Similar to <a href=\"https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref\"><code>uv_ref</code></a> it is\nalso idempotent.</p>\n<p>Neither does <code>napi_unref_threadsafe_function</code> mark the thread-safe functions as\nable to be destroyed nor does <code>napi_ref_threadsafe_function</code> prevent it from\nbeing destroyed. <code>napi_acquire_threadsafe_function</code> and\n<code>napi_release_threadsafe_function</code> are available for that purpose.</p>\n<p>This API may only be called from the main thread.</p>",
              "type": "module",
              "displayName": "`napi_ref_threadsafe_function`"
            },
            {
              "textRaw": "`napi_unref_threadsafe_function`",
              "name": "`napi_unref_threadsafe_function`",
              "meta": {
                "added": [
                  "v10.6.0"
                ],
                "napiVersion": [
                  4
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnapi_unref_threadsafe_function(napi_env env, napi_threadsafe_function func);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] func</code>: The thread-safe function to unreference.</li>\n</ul>\n<p>This API is used to indicate that the event loop running on the main thread\nmay exit before <code>func</code> is destroyed. Similar to <a href=\"https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref\"><code>uv_unref</code></a> it is also\nidempotent.</p>\n<p>This API may only be called from the main thread.</p>",
              "type": "module",
              "displayName": "`napi_unref_threadsafe_function`"
            }
          ],
          "type": "misc",
          "displayName": "Asynchronous thread-safe function calls"
        },
        {
          "textRaw": "Miscellaneous utilities",
          "name": "miscellaneous_utilities",
          "modules": [
            {
              "textRaw": "`node_api_get_module_file_name`",
              "name": "`node_api_get_module_file_name`",
              "meta": {
                "added": [
                  "v15.9.0",
                  "v14.18.0",
                  "v12.22.0"
                ],
                "changes": []
              },
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<pre><code class=\"language-c\">NAPI_EXTERN napi_status\nnode_api_get_module_file_name(napi_env env, const char** result);\n\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: A URL containing the absolute path of the\nlocation from which the add-on was loaded. For a file on the local\nfile system it will start with <code>file://</code>. The string is null-terminated and\nowned by <code>env</code> and must thus not be modified or freed.</li>\n</ul>\n<p><code>result</code> may be an empty string if the add-on loading process fails to establish\nthe add-on's file name during loading.</p>",
              "type": "module",
              "displayName": "`node_api_get_module_file_name`"
            }
          ],
          "type": "misc",
          "displayName": "Miscellaneous utilities"
        }
      ]
    }
  ]
}